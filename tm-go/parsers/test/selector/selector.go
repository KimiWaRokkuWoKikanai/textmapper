// generated by Textmapper; DO NOT EDIT

package selector

import (
	"github.com/inspirer/textmapper/tm-go/parsers/test"
)

type Selector func(nt test.NodeType) bool

var (
	Any               = func(t test.NodeType) bool { return true }
	AsExpr            = func(t test.NodeType) bool { return t == test.AsExpr }
	Block             = func(t test.NodeType) bool { return t == test.Block }
	Decl1             = func(t test.NodeType) bool { return t == test.Decl1 }
	Decl2             = func(t test.NodeType) bool { return t == test.Decl2 }
	Empty1            = func(t test.NodeType) bool { return t == test.Empty1 }
	EvalFoo           = func(t test.NodeType) bool { return t == test.EvalFoo }
	EvalFoo2          = func(t test.NodeType) bool { return t == test.EvalFoo2 }
	Icon              = func(t test.NodeType) bool { return t == test.Icon }
	Int               = func(t test.NodeType) bool { return t == test.Int }
	IntExpr           = func(t test.NodeType) bool { return t == test.IntExpr }
	LastInt           = func(t test.NodeType) bool { return t == test.LastInt }
	Negation          = func(t test.NodeType) bool { return t == test.Negation }
	PlusExpr          = func(t test.NodeType) bool { return t == test.PlusExpr }
	Test              = func(t test.NodeType) bool { return t == test.Test }
	TestClause        = func(t test.NodeType) bool { return t == test.TestClause }
	TestIntClause     = func(t test.NodeType) bool { return t == test.TestIntClause }
	MultiLineComment  = func(t test.NodeType) bool { return t == test.MultiLineComment }
	SingleLineComment = func(t test.NodeType) bool { return t == test.SingleLineComment }
	InvalidToken      = func(t test.NodeType) bool { return t == test.InvalidToken }
	Identifier        = func(t test.NodeType) bool { return t == test.Identifier }
	Declaration       = OneOf(test.Declaration...)
	Expr              = OneOf(test.Expr...)
	TokenSet          = OneOf(test.TokenSet...)
)

func OneOf(types ...test.NodeType) Selector {
	if len(types) == 0 {
		return func(test.NodeType) bool { return false }
	}
	const bits = 32
	max := 1
	for _, t := range types {
		if int(t) > max {
			max = int(t)
		}
	}
	size := (max + bits) / bits
	bitarr := make([]uint32, size)
	for _, t := range types {
		bitarr[uint(t)/bits] |= 1 << (uint(t) % bits)
	}
	return func(t test.NodeType) bool {
		i := uint(t) / bits
		return int(i) < len(bitarr) && bitarr[i]&(1<<(uint(t)%bits)) != 0
	}
}
