// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	NoType NodeType = iota
	Test            // (Declaration)+
	Negation
	Block // Negation? (Declaration)*
	LastInt
	Int
	TestClause
	Empty1
	Icon
	TestIntClause // Icon
	Decl1         // (Identifier)+
	Decl2
	Int7
	Int9
	MultiLineComment
	SingleLineComment
	InvalidToken
	Identifier
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"Test",
	"Negation",
	"Block",
	"LastInt",
	"Int",
	"TestClause",
	"Empty1",
	"Icon",
	"TestIntClause",
	"Decl1",
	"Decl2",
	"Int7",
	"Int9",
	"MultiLineComment",
	"SingleLineComment",
	"InvalidToken",
	"Identifier",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var Declaration = []NodeType{
	Block,
	Decl1,
	Decl2,
	Empty1,
	Int,
	LastInt,
	TestClause,
	TestIntClause,
}

var TokenSet = []NodeType{
	Identifier,
}
