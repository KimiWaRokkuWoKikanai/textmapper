// generated by Textmapper; DO NOT EDIT

package test

const tmNumClasses = 32

type mapRange struct {
	lo         rune
	hi         rune
	defaultVal uint8
	val        []uint8
}

func mapRune(c rune) int {
	lo := 0
	hi := len(tmRuneRanges)
	for lo < hi {
		m := lo + (hi-lo)/2
		r := tmRuneRanges[m]
		if c < r.lo {
			hi = m
		} else if c >= r.hi {
			lo = m + 1
		} else {
			i := int(c - r.lo)
			if i < len(r.val) {
				return int(r.val[i])
			}
			return int(r.defaultVal)
		}
	}
	return 1
}

// Latin-1 characters.
var tmRuneClass = []uint8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 5, 1, 1, 1, 1, 1, 6, 7, 8, 1, 9, 10, 11, 12, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 14, 1, 1, 1, 15, 1, 1, 16, 16, 16, 16, 16,
	16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 19, 20, 21, 1, 22, 1, 16, 16, 16, 16, 23, 24, 17, 17, 17, 17, 17, 17,
	17, 17, 25, 17, 17, 17, 26, 27, 28, 17, 17, 17, 17, 17, 29, 1, 30, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

const tmRuneClassLen = 256
const tmFirstRule = -3

var tmRuneRanges = []mapRange{
	{8232, 8234, 31, nil},
}

var tmStateMap = []int{
	0, 37,
}

var tmToken = []Token{
	1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 1, 23, 24, 26, 1, 26, 26, 2,
}

var tmLexerAction = []int8{
	-4, -3, 36, 36, 36, 35, 34, 33, -3, 32, 30, 29, 26, 24, 23, -3, 22, 22, 15,
	14, -3, 13, -3, 22, 22, 22, 22, 3, 22, 2, 1, -3, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7, 22, -7, -7, 22, 22, 22, -7, -7,
	-7, 22, 4, 22, 22, 22, 22, 22, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -1, -7, -7, 22, -7, -7, 22, 22, 22, -7, -7, -7, 22, 22, 22, 22, 5,
	22, 22, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7, 22,
	-7, -7, 22, 22, 22, -7, -7, -7, 22, 22, 22, 22, 22, 6, 22, -7, -7, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -2, -7, -7, 22, -7, -7, 22, 22, 22, -7,
	-7, -7, 22, 22, 7, 22, 22, 22, 22, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -7, -1, -7, -7, 22, -7, -7, 22, 22, 22, -7, -7, -7, 22, 22, 22, 8,
	22, 22, 22, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7,
	22, -7, -7, 22, 22, 22, -7, -7, -7, 22, 22, 22, 9, 22, 22, 22, -7, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -2, -7, -7, 22, -7, -7, 22, 22, 22,
	-7, -7, -7, 22, 22, 22, 22, 22, 22, 22, -7, -7, -7, -3, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, 10, -3, -3, 22, -3, 11, 22, 22, 22, -3, -3, -3, 22, 22, 22,
	22, 22, 22, 22, -3, -3, -3, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
	12, -3, -3, 22, -3, -3, 22, 22, 22, -3, -3, -3, 22, 22, 22, 22, 22, 22, 22,
	-3, -3, -3, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, 21, 21, 21, -3, 16, -3, -3, 21, 21, 21, 21, 21, 21, -3, -3,
	-3, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, 17,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, 18, -26, -26, 18, -26, -26, -26, -26, -26, -26, 18, 18, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, 19, -26, -26, 19, -26, -26, -26, -26, -26, -26, 19, 19, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, 20, -26, -26, 20, -26, -26, -26, -26, -26, -26, 20, 20, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, 21, -26, -26, 21, -26, -26, -26, -26, -26, -26, 21, 21,
	-26, -26, -26, -26, -26, -26, -26, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, 21, 21, 21, -25, 16, -25, -25, 21,
	21, 21, 21, 21, 21, -25, -25, -25, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-1, -7, -7, 22, -7, -7, 22, 22, 22, -7, -7, -7, 22, 22, 22, 22, 22, 22, 22,
	-7, -7, -7, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, 25, -8, -8, 25, -8, -8, -8, -8, -8, -8, -8, -8, -8, 24,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -3, -3, -3, -3, -3, -3, -3,
	-3, 28, -3, -3, -3, 27, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, -3, -3, -6, 27, 27, -6, -6, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -6,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, 31, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -24,
	-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,
	-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,
	-24, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, 43, 42, 42, 42, 42,
	42, 42, 42, 40, 42, 42, 42, 38, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, -33, -33, -33, -33, -33, -33, -33, -33, 39,
	-33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,
	-33, -33, -33, -33, -33, -33, -33, -33, -31, -31, -31, -31, -31, -31, -31,
	-31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31,
	-31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -33, -33, -33, -33, -33,
	-33, -33, -33, -33, -33, -33, -33, 41, -33, -33, -33, -33, -33, -33, -33,
	-33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -33,
	42, 42, 42, 42, 42, 42, 42, -33, 42, 42, 42, -33, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
}

var tmBacktracking = []int{
	4, 12, // in Identifier
	4, 10, // in Identifier
}
