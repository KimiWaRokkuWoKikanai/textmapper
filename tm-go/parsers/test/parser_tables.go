// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"setof_not_EOI_or_DOT_or_RBRACE",
	"setof_not_EOI_or_DOT_or_RBRACE_optlist",
	"empty1",
	"foo",
	"QualifiedName",
	"Decl1",
	"Decl2",
	"If",
	"expr",
	"primaryExpr",
	"primaryExpr_WithoutAs",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(NumTokens) {
		return Token(sym).String()
	}
	if i := int(sym) - int(NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -3, 11, -1, -1, 57, -1, -1, -1, -27, 1, 3, 4, 58, -1, 16, 51, 52, -1,
	-1, -1, 10, -1, -1, 0, 12, -1, -1, 54, -1, -47, -1, -1, 62, -1, -1, 8, -1,
	-1, 9, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 14, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 15, 56, -1, -1,
	18, 17, -1, -1, -57, 6, -1, 7, 55, -81, -89, 61, -95, -1, 5, -1, 60, -1, 19,
	-1, -1, -2, -2,
}

var tmLalr = []int32{
	18, -1, 0, 13, 5, 13, 6, 13, 7, 13, 8, 13, 9, 13, 10, 13, 12, 13, 14, 13, 15,
	13, -1, -2, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 12, -1, 14, -1, 0, 2,
	-1, -2, 20, -1, 17, 64, 25, 64, 11, 65, -1, -2, 13, -1, 0, 59, 5, 59, 6, 59,
	7, 59, 8, 59, 9, 59, 10, 59, 12, 59, 14, 59, 15, 59, -1, -2, 17, 64, 25, 64,
	11, 65, -1, -2, 25, -1, 17, 53, -1, -2, 25, -1, 17, 63, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 16, 46, 64, 82, 102, 124, 142, 146, 168, 172, 192, 206, 216,
	230, 234, 238, 242, 244, 246, 252, 254, 264, 266, 268, 270, 272, 274, 276,
	278, 286, 288, 304, 306, 308, 310, 312, 314, 332, 352, 372, 380, 390, 400,
}

var tmFromTo = []int8{
	96, 98, 97, 99, 27, 41, 27, 42, 27, 43, 19, 29, 27, 44, 75, 85, 0, 2, 4, 16,
	9, 2, 10, 2, 20, 31, 23, 2, 24, 2, 27, 45, 38, 2, 39, 2, 76, 86, 79, 86, 80,
	86, 83, 2, 92, 86, 0, 3, 9, 3, 10, 3, 23, 3, 24, 3, 27, 46, 38, 3, 39, 3, 83,
	3, 0, 4, 9, 4, 10, 4, 23, 4, 24, 4, 27, 47, 38, 4, 39, 4, 83, 4, 0, 5, 1, 5,
	9, 5, 10, 5, 23, 5, 24, 5, 27, 48, 38, 5, 39, 5, 83, 5, 0, 6, 9, 6, 10, 6,
	23, 6, 24, 6, 27, 49, 36, 6, 38, 6, 39, 6, 83, 6, 90, 6, 0, 7, 9, 7, 10, 7,
	23, 7, 24, 7, 27, 50, 38, 7, 39, 7, 83, 7, 27, 51, 35, 80, 0, 8, 9, 8, 10, 8,
	23, 8, 24, 8, 27, 52, 36, 8, 38, 8, 39, 8, 83, 8, 90, 8, 27, 53, 81, 90, 0,
	9, 4, 17, 9, 9, 10, 9, 23, 9, 24, 9, 27, 54, 38, 9, 39, 9, 83, 9, 9, 22, 23,
	37, 24, 40, 27, 55, 38, 82, 39, 84, 83, 91, 4, 18, 5, 19, 7, 20, 8, 21, 27,
	56, 21, 36, 27, 57, 28, 73, 30, 74, 32, 77, 33, 78, 94, 95, 2, 15, 27, 58,
	15, 26, 27, 59, 30, 75, 31, 76, 27, 60, 27, 61, 9, 23, 23, 38, 27, 62, 27,
	63, 27, 64, 33, 79, 87, 92, 89, 79, 94, 79, 27, 65, 27, 66, 27, 67, 27, 68,
	27, 69, 27, 70, 27, 71, 0, 10, 9, 24, 23, 39, 38, 83, 0, 96, 0, 11, 9, 11,
	10, 25, 23, 11, 24, 25, 38, 11, 39, 25, 83, 25, 27, 72, 17, 27, 18, 28, 20,
	32, 19, 30, 0, 12, 1, 97, 9, 12, 10, 12, 23, 12, 24, 12, 38, 12, 39, 12, 83,
	12, 0, 13, 9, 13, 10, 13, 23, 13, 24, 13, 36, 81, 38, 13, 39, 13, 83, 13, 90,
	93, 0, 14, 9, 14, 10, 14, 23, 14, 24, 14, 36, 14, 38, 14, 39, 14, 83, 14, 90,
	14, 20, 33, 76, 87, 80, 89, 92, 94, 20, 34, 76, 34, 79, 88, 80, 34, 92, 34,
	20, 35, 76, 35, 79, 35, 80, 35, 92, 35,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 1, 4, 4, 2, 4, 4, 8, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	0, 3, 1, 3, 4, 1, 1, 4, 6, 3, 1, 3, 1, 1,
}

var tmRuleSymbol = []int32{
	33, 33, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 39, 40, 40, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 46,
}

var tmRuleType = [...]uint32{
	0,                  // Declaration_list : Declaration_list Declaration
	0,                  // Declaration_list : Declaration
	uint32(Test),       // Test : Declaration_list
	0,                  // Declaration : Decl1
	0,                  // Declaration : Decl2
	uint32(Block),      // Declaration : '{' '-' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '-' '}'
	uint32(Block),      // Declaration : '{' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '}'
	uint32(Block),      // Declaration : '{' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '}'
	uint32(LastInt),    // Declaration : lastInt
	uint32(Int),        // Declaration : IntegerConstant '[' ']'
	uint32(Int),        // Declaration : IntegerConstant
	uint32(TestClause), // Declaration : 'test' '{' setof_not_EOI_or_DOT_or_RBRACE_optlist '}'
	0,                  // Declaration : 'test' '(' empty1 ')'
	uint32(TestIntClause) + uint32(InTest|InFoo)<<16, // Declaration : 'test' IntegerConstant
	0,                // Declaration : 'eval' '(' expr ')'
	uint32(EvalFoo),  // Declaration : 'eval' '(' foo ')'
	uint32(EvalFoo2), // Declaration : 'eval' '(' IntegerConstant '.' expr '+' .greedy expr ')'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : invalid_token
	0,                // setof_not_EOI_or_DOT_or_RBRACE : WhiteSpace
	0,                // setof_not_EOI_or_DOT_or_RBRACE : SingleLineComment
	0,                // setof_not_EOI_or_DOT_or_RBRACE : Identifier
	0,                // setof_not_EOI_or_DOT_or_RBRACE : IntegerConstant
	0,                // setof_not_EOI_or_DOT_or_RBRACE : lastInt
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'test'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'decl1'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'decl2'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'eval'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'as'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'if'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'else'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '{'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '('
	0,                // setof_not_EOI_or_DOT_or_RBRACE : ')'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '['
	0,                // setof_not_EOI_or_DOT_or_RBRACE : ']'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : ','
	0,                // setof_not_EOI_or_DOT_or_RBRACE : ':'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '-'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '->'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : '+'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : dquote
	0,                // setof_not_EOI_or_DOT_or_RBRACE : squote
	0,                // setof_not_EOI_or_DOT_or_RBRACE : SharpAtID
	0,                // setof_not_EOI_or_DOT_or_RBRACE : 'Zfoo'
	0,                // setof_not_EOI_or_DOT_or_RBRACE : backtrackingToken
	0,                // setof_not_EOI_or_DOT_or_RBRACE : error
	0,                // setof_not_EOI_or_DOT_or_RBRACE : MultiLineComment
	0,                // setof_not_EOI_or_DOT_or_RBRACE_optlist : setof_not_EOI_or_DOT_or_RBRACE_optlist setof_not_EOI_or_DOT_or_RBRACE
	0,                // setof_not_EOI_or_DOT_or_RBRACE_optlist :
	0,                // empty1 :
	0,                // foo : IntegerConstant '.' expr
	0,                // QualifiedName : Identifier
	0,                // QualifiedName : QualifiedName '.' Identifier
	uint32(Decl1),    // Decl1 : 'decl1' '(' QualifiedName ')'
	uint32(Decl2),    // Decl2 : 'decl2'
	0,                // Decl2 : If
	uint32(If),       // If : 'if' '(' ')' Decl2
	uint32(If),       // If : 'if' '(' ')' Decl2 'else' Decl2
	uint32(PlusExpr), // expr : expr '+' primaryExpr
	0,                // expr : primaryExpr
	uint32(AsExpr),   // primaryExpr : primaryExpr_WithoutAs 'as' expr
	uint32(IntExpr),  // primaryExpr : IntegerConstant
	uint32(IntExpr),  // primaryExpr_WithoutAs : IntegerConstant
}

// set(follow error) =
var afterErr = []int32{}
