// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"setof_not_((eoi | '.') | '}')",
	"setof_not_((eoi | '.') | '}')_optlist",
	"empty1",
	"foo",
	"QualifiedName",
	"Decl1",
	"Decl2",
	"expr",
	"primaryExpr",
	"primaryExpr_WithoutAs",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(NumTokens) {
		return Token(sym).String()
	}
	if i := int(sym) - int(NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -3, 11, -1, -1, 55, -1, -1, -25, 1, 3, 4, -1, 16, 49, 50, -1, -1, 10,
	-1, -1, 0, 12, -1, -1, 52, -1, -43, -1, -1, 57, -1, 8, -1, -1, 9, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 14, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 15, 54, -1, -1, 18, 17, -1, -1, 6, -1, 7, 53,
	-53, -61, 56, -67, 5, -1, -1, 19, -1, -1, -2, -2,
}

var tmLalr = []int32{
	16, -1, 0, 13, 5, 13, 6, 13, 7, 13, 8, 13, 9, 13, 10, 13, 12, 13, 13, 13, -1,
	-2, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 12, -1, 0, 2, -1, -2, 18, -1,
	15, 59, 23, 59, 11, 60, -1, -2, 15, 59, 23, 59, 11, 60, -1, -2, 23, -1, 15,
	51, -1, -2, 23, -1, 15, 58, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 16, 46, 64, 82, 102, 120, 138, 142, 162, 176, 184, 196, 200,
	204, 208, 210, 212, 218, 220, 230, 232, 234, 236, 238, 240, 242, 244, 252,
	254, 270, 272, 274, 276, 278, 280, 298, 314, 322, 332, 342,
}

var tmFromTo = []int8{
	87, 89, 88, 90, 24, 37, 24, 38, 24, 39, 17, 26, 24, 40, 69, 78, 0, 2, 4, 14,
	8, 2, 9, 2, 18, 28, 20, 2, 21, 2, 24, 41, 34, 2, 35, 2, 70, 79, 73, 79, 74,
	79, 76, 2, 84, 79, 0, 3, 8, 3, 9, 3, 20, 3, 21, 3, 24, 42, 34, 3, 35, 3, 76,
	3, 0, 4, 8, 4, 9, 4, 20, 4, 21, 4, 24, 43, 34, 4, 35, 4, 76, 4, 0, 5, 1, 5,
	8, 5, 9, 5, 20, 5, 21, 5, 24, 44, 34, 5, 35, 5, 76, 5, 0, 6, 8, 6, 9, 6, 20,
	6, 21, 6, 24, 45, 34, 6, 35, 6, 76, 6, 0, 7, 8, 7, 9, 7, 20, 7, 21, 7, 24,
	46, 34, 7, 35, 7, 76, 7, 24, 47, 32, 74, 0, 8, 4, 15, 8, 8, 9, 8, 20, 8, 21,
	8, 24, 48, 34, 8, 35, 8, 76, 8, 8, 19, 20, 33, 21, 36, 24, 49, 34, 75, 35,
	77, 76, 83, 4, 16, 5, 17, 7, 18, 24, 50, 24, 51, 25, 67, 27, 68, 29, 71, 30,
	72, 85, 86, 2, 13, 24, 52, 13, 23, 24, 53, 27, 69, 28, 70, 24, 54, 24, 55, 8,
	20, 20, 34, 24, 56, 24, 57, 24, 58, 30, 73, 80, 84, 82, 73, 85, 73, 24, 59,
	24, 60, 24, 61, 24, 62, 24, 63, 24, 64, 24, 65, 0, 9, 8, 21, 20, 35, 34, 76,
	0, 87, 0, 10, 8, 10, 9, 22, 20, 10, 21, 22, 34, 10, 35, 22, 76, 22, 24, 66,
	15, 24, 16, 25, 18, 29, 17, 27, 0, 11, 1, 88, 8, 11, 9, 11, 20, 11, 21, 11,
	34, 11, 35, 11, 76, 11, 0, 12, 8, 12, 9, 12, 20, 12, 21, 12, 34, 12, 35, 12,
	76, 12, 18, 30, 70, 80, 74, 82, 84, 85, 18, 31, 70, 31, 73, 81, 74, 31, 84,
	31, 18, 32, 70, 32, 73, 32, 74, 32, 84, 32,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 1, 4, 4, 2, 4, 4, 8, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3,
	1, 3, 4, 1, 3, 1, 3, 1, 1,
}

var tmRuleSymbol = []int32{
	31, 31, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41,
	41, 42, 42, 43,
}

var tmRuleType = [...]uint32{
	0,                  // Declaration_list : Declaration_list Declaration
	0,                  // Declaration_list : Declaration
	uint32(Test),       // Test : Declaration_list
	0,                  // Declaration : Decl1
	0,                  // Declaration : Decl2
	uint32(Block),      // Declaration : '{' '-' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '-' '}'
	uint32(Block),      // Declaration : '{' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '}'
	uint32(Block),      // Declaration : '{' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '}'
	uint32(LastInt),    // Declaration : lastInt
	uint32(Int),        // Declaration : IntegerConstant '[' ']'
	uint32(Int),        // Declaration : IntegerConstant
	uint32(TestClause), // Declaration : 'test' '{' setof_not_((eoi | '.') | '}')_optlist '}'
	0,                  // Declaration : 'test' '(' empty1 ')'
	uint32(TestIntClause) + uint32(InTest|InFoo)<<16, // Declaration : 'test' IntegerConstant
	0,                // Declaration : 'eval' '(' expr ')'
	uint32(EvalFoo),  // Declaration : 'eval' '(' foo ')'
	uint32(EvalFoo2), // Declaration : 'eval' '(' IntegerConstant '.' expr '+' .greedy expr ')'
	0,                // setof_not_((eoi | '.') | '}') : invalid_token
	0,                // setof_not_((eoi | '.') | '}') : WhiteSpace
	0,                // setof_not_((eoi | '.') | '}') : SingleLineComment
	0,                // setof_not_((eoi | '.') | '}') : Identifier
	0,                // setof_not_((eoi | '.') | '}') : IntegerConstant
	0,                // setof_not_((eoi | '.') | '}') : lastInt
	0,                // setof_not_((eoi | '.') | '}') : 'test'
	0,                // setof_not_((eoi | '.') | '}') : 'decl1'
	0,                // setof_not_((eoi | '.') | '}') : 'decl2'
	0,                // setof_not_((eoi | '.') | '}') : 'eval'
	0,                // setof_not_((eoi | '.') | '}') : 'as'
	0,                // setof_not_((eoi | '.') | '}') : '{'
	0,                // setof_not_((eoi | '.') | '}') : '('
	0,                // setof_not_((eoi | '.') | '}') : ')'
	0,                // setof_not_((eoi | '.') | '}') : '['
	0,                // setof_not_((eoi | '.') | '}') : ']'
	0,                // setof_not_((eoi | '.') | '}') : ','
	0,                // setof_not_((eoi | '.') | '}') : ':'
	0,                // setof_not_((eoi | '.') | '}') : '-'
	0,                // setof_not_((eoi | '.') | '}') : '->'
	0,                // setof_not_((eoi | '.') | '}') : '+'
	0,                // setof_not_((eoi | '.') | '}') : dquote
	0,                // setof_not_((eoi | '.') | '}') : squote
	0,                // setof_not_((eoi | '.') | '}') : SharpAtID
	0,                // setof_not_((eoi | '.') | '}') : 'Zfoo'
	0,                // setof_not_((eoi | '.') | '}') : backtrackingToken
	0,                // setof_not_((eoi | '.') | '}') : error
	0,                // setof_not_((eoi | '.') | '}') : MultiLineComment
	0,                // setof_not_((eoi | '.') | '}')_optlist : setof_not_((eoi | '.') | '}')_optlist setof_not_((eoi | '.') | '}')
	0,                // setof_not_((eoi | '.') | '}')_optlist :
	0,                // empty1 :
	0,                // foo : IntegerConstant '.' expr
	0,                // QualifiedName : Identifier
	0,                // QualifiedName : QualifiedName '.' Identifier
	uint32(Decl1),    // Decl1 : 'decl1' '(' QualifiedName ')'
	uint32(Decl2),    // Decl2 : 'decl2'
	uint32(PlusExpr), // expr : expr '+' primaryExpr
	0,                // expr : primaryExpr
	uint32(AsExpr),   // primaryExpr : primaryExpr_WithoutAs 'as' expr
	uint32(IntExpr),  // primaryExpr : IntegerConstant
	uint32(IntExpr),  // primaryExpr_WithoutAs : IntegerConstant
}

// set(follow error) =
var afterErr = []int32{}
