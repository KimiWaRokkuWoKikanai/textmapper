// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"

	"github.com/inspirer/textmapper/tm-go/parsers/test/token"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"lookahead_FooLookahead",
	"lookahead_notFooLookahead",
	"setof_not_EOI_or_DOT_or_RBRACE",
	"setof_not_EOI_or_DOT_or_RBRACE_optlist",
	"FooLookahead",
	"empty1",
	"foo",
	"QualifiedName",
	"Decl1",
	"Decl2",
	"If",
	"expr",
	"primaryExpr",
	"primaryExpr_WithoutAs",
	"QualifiedNameopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Token(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -1, -1, -3, 11, -1, -1, -27, -51, -1, -1, -55, 1, 3, 4, 64, -1, -1,
	-1, 16, 56, 58, -1, -75, -1, -1, -1, 10, -1, -1, 0, -1, 57, 12, -1, -1, 60,
	-1, -99, 20, -1, -1, -1, 8, -1, -1, 9, -123, -131, 68, -1, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 14, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 15, 62, -1, -1, -1, -1, 63, -137,
	6, -1, 7, -1, -1, 61, -1, 18, 58, -1, 5, 67, -161, -167, 17, 66, -1, -1, 19,
	-2, -1, -1, -2, -2,
}

var tmLalr = []int32{
	18, -1, 0, 13, 5, 13, 6, 13, 7, 13, 8, 13, 9, 13, 10, 13, 12, 13, 14, 13, 15,
	13, -1, -2, 23, -1, 0, 63, 5, 63, 6, 63, 7, 63, 8, 63, 9, 63, 10, 63, 12, 63,
	14, 63, 15, 63, -1, -2, 16, 74, -1, -2, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1,
	10, -1, 12, -1, 14, -1, 0, 2, -1, -2, 4, -1, 0, 73, 5, 73, 6, 73, 7, 73, 8,
	73, 9, 73, 10, 73, 12, 73, 14, 73, 15, 73, -1, -2, 20, -1, 0, 72, 5, 72, 6,
	72, 7, 72, 8, 72, 9, 72, 10, 72, 12, 72, 14, 72, 15, 72, -1, -2, 17, 70, 26,
	70, 11, 71, -1, -2, 26, -1, 17, 59, -1, -2, 13, -1, 0, 65, 5, 65, 6, 65, 7,
	65, 8, 65, 9, 65, 10, 65, 12, 65, 14, 65, 15, 65, -1, -2, 26, -1, 17, 69, -1,
	-2, 26, -1, 17, 59, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 18, 54, 72, 90, 110, 132, 150, 154, 176, 180, 200, 214, 228,
	244, 248, 252, 260, 262, 264, 268, 274, 276, 288, 290, 292, 294, 296, 298,
	300, 302, 304, 312, 314, 330, 332, 334, 336, 338, 340, 344, 348, 352, 370,
	390, 410, 420, 432, 444, 446,
}

var tmFromTo = []int8{
	114, 116, 115, 117, 35, 52, 35, 53, 35, 54, 23, 37, 24, 37, 35, 55, 88, 99,
	1, 4, 3, 17, 6, 20, 11, 4, 12, 4, 29, 4, 30, 4, 32, 48, 35, 56, 41, 89, 42,
	48, 45, 4, 46, 4, 95, 4, 97, 48, 98, 48, 100, 48, 110, 48, 1, 5, 11, 5, 12,
	5, 29, 5, 30, 5, 35, 57, 45, 5, 46, 5, 95, 5, 1, 6, 11, 6, 12, 6, 29, 6, 30,
	6, 35, 58, 45, 6, 46, 6, 95, 6, 1, 7, 2, 7, 11, 7, 12, 7, 29, 7, 30, 7, 35,
	59, 45, 7, 46, 7, 95, 7, 1, 8, 11, 8, 12, 8, 29, 8, 30, 8, 35, 60, 43, 92,
	45, 8, 46, 8, 95, 8, 103, 92, 1, 9, 11, 9, 12, 9, 29, 9, 30, 9, 35, 61, 45,
	9, 46, 9, 95, 9, 35, 62, 51, 98, 1, 10, 11, 10, 12, 10, 29, 10, 30, 10, 35,
	63, 43, 10, 45, 10, 46, 10, 95, 10, 103, 10, 35, 64, 93, 103, 1, 11, 6, 21,
	11, 11, 12, 11, 29, 11, 30, 11, 35, 65, 45, 11, 46, 11, 95, 11, 11, 28, 29,
	44, 30, 47, 35, 66, 45, 94, 46, 96, 95, 104, 0, 3, 6, 22, 7, 23, 10, 27, 25,
	41, 26, 42, 35, 67, 18, 33, 27, 43, 35, 68, 36, 86, 38, 87, 90, 101, 91, 102,
	111, 112, 4, 19, 35, 69, 19, 34, 35, 70, 17, 32, 38, 88, 39, 88, 89, 100, 35,
	71, 35, 72, 8, 24, 35, 73, 11, 29, 29, 45, 35, 74, 35, 75, 35, 76, 49, 97,
	91, 97, 106, 97, 107, 110, 111, 97, 35, 77, 35, 78, 35, 79, 35, 80, 35, 81,
	35, 82, 35, 83, 35, 84, 1, 12, 11, 30, 29, 46, 45, 95, 1, 114, 1, 13, 11, 13,
	12, 31, 29, 13, 30, 31, 45, 13, 46, 31, 95, 31, 9, 25, 9, 26, 35, 85, 21, 35,
	0, 113, 22, 36, 102, 108, 3, 18, 41, 90, 23, 38, 24, 39, 1, 14, 2, 115, 11,
	14, 12, 14, 29, 14, 30, 14, 45, 14, 46, 14, 95, 14, 1, 15, 11, 15, 12, 15,
	29, 15, 30, 15, 43, 93, 45, 15, 46, 15, 95, 15, 103, 109, 1, 16, 11, 16, 12,
	16, 29, 16, 30, 16, 43, 16, 45, 16, 46, 16, 95, 16, 103, 16, 32, 49, 42, 91,
	98, 106, 100, 107, 110, 111, 32, 50, 42, 50, 97, 105, 98, 50, 100, 50, 110,
	50, 32, 51, 42, 51, 97, 51, 98, 51, 100, 51, 110, 51, 24, 40,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 1, 4, 4, 2, 6, 5, 9, 3, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 3, 1, 3, 4, 1, 1, 4, 6, 3, 1, 3, 1, 1, 1, 0, 0,
}

var tmRuleSymbol = []int32{
	35, 35, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 38, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41,
	42, 43, 44, 45, 45, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 52, 52, 39,
}

var tmRuleType = [...]uint32{
	0,                  // Declaration_list : Declaration_list Declaration
	0,                  // Declaration_list : Declaration
	uint32(Test),       // Test : Declaration_list
	0,                  // Declaration : Decl1
	0,                  // Declaration : Decl2
	uint32(Block),      // Declaration : '{' '-' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '-' '}'
	uint32(Block),      // Declaration : '{' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '}'
	uint32(Block),      // Declaration : '{' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '}'
	uint32(LastInt),    // Declaration : lastInt
	uint32(Int),        // Declaration : IntegerConstant '[' ']'
	uint32(Int),        // Declaration : IntegerConstant
	uint32(TestClause), // Declaration : 'test' '{' setof_not_EOI_or_DOT_or_RBRACE_optlist '}'
	0,                  // Declaration : 'test' '(' empty1 ')'
	uint32(TestIntClause) + uint32(InTest|InFoo)<<16, // Declaration : 'test' IntegerConstant
	uint32(EvalEmpty1),  // Declaration : 'eval' lookahead_notFooLookahead '(' expr ')' empty1
	uint32(EvalFoo),     // Declaration : 'eval' lookahead_FooLookahead '(' foo ')'
	uint32(EvalFoo2),    // Declaration : 'eval' lookahead_FooLookahead '(' IntegerConstant '.' expr '+' .greedy expr ')'
	uint32(DeclOptQual), // Declaration : 'decl2' ':' QualifiedNameopt
	0,                   // lookahead_FooLookahead :
	0,                   // lookahead_notFooLookahead :
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : invalid_token
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : WhiteSpace
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SingleLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : Identifier
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : IntegerConstant
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : lastInt
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'test'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl1'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl2'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'eval'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'as'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'if'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'else'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '{'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '('
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ')'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '['
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ']'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '...'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ','
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ':'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '-'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '->'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '+'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : multiline
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : dquote
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : squote
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SharpAtID
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'Zfoo'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : backtrackingToken
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : error
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : MultiLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist : setof_not_EOI_or_DOT_or_RBRACE_optlist setof_not_EOI_or_DOT_or_RBRACE
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist :
	0,                   // FooLookahead : '(' foo ')'
	0,                   // empty1 :
	0,                   // foo : IntegerConstant '.' expr
	0,                   // QualifiedName : Identifier
	0,                   // QualifiedName : QualifiedName '.' Identifier
	uint32(Decl1),       // Decl1 : 'decl1' '(' QualifiedName ')'
	uint32(Decl2),       // Decl2 : 'decl2'
	0,                   // Decl2 : If
	uint32(If),          // If : 'if' '(' ')' Decl2
	uint32(If),          // If : 'if' '(' ')' Decl2 'else' Decl2
	uint32(PlusExpr),    // expr : expr '+' primaryExpr
	0,                   // expr : primaryExpr
	uint32(AsExpr),      // primaryExpr : primaryExpr_WithoutAs 'as' expr
	uint32(IntExpr),     // primaryExpr : IntegerConstant
	uint32(IntExpr),     // primaryExpr_WithoutAs : IntegerConstant
	0,                   // QualifiedNameopt : QualifiedName
	0,                   // QualifiedNameopt :
}

// set(follow error) =
var afterErr = []int32{}
