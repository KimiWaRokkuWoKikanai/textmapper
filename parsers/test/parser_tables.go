// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/test/token"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"lookahead_FooLookahead",
	"lookahead_notFooLookahead",
	"setof_not_EOI_or_DOT_or_RBRACE",
	"setof_not_EOI_or_DOT_or_RBRACE_optlist",
	"FooLookahead",
	"setof_foo_la",
	"setof_foo_la_list",
	"empty1",
	"foo_la",
	"foo_nonterm",
	"foo_nonterm_A",
	"QualifiedName",
	"Decl1",
	"Decl2",
	"If",
	"expr",
	"customPlus",
	"primaryExpr",
	"primaryExpr_WithoutAs",
	"QualifiedNameopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Token(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -1, -1, -3, 11, -1, -1, -27, -51, -1, -1, -55, 1, 3, 4, 81, -1, -1,
	17, 61, -75, -1, -81, -1, -1, -1, 10, -1, -1, 0, -1, 12, -1, -1, -1, -1, 77,
	-1, -105, 21, -1, -1, -1, 8, -1, -1, 9, 63, 64, 65, 66, 67, 68, 70, -1, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 14, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, -1,
	15, 16, 79, -1, -1, -1, -129, -1, -1, 85, 86, -1, 80, -137, 6, -1, 7, 62, 69,
	-161, 78, -1, -1, 19, -1, 71, -1, -1, -1, 5, -167, -173, -1, 18, 84, -179,
	83, -1, -185, -1, 20, -2, -1, -1, -2, -2,
}

var tmLalr = []int32{
	18, -1, 0, 13, 5, 13, 6, 13, 7, 13, 8, 13, 9, 13, 10, 13, 12, 13, 14, 13, 15,
	13, -1, -2, 23, -1, 0, 80, 5, 80, 6, 80, 7, 80, 8, 80, 9, 80, 10, 80, 12, 80,
	14, 80, 15, 80, -1, -2, 16, 93, -1, -2, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1,
	10, -1, 12, -1, 14, -1, 0, 2, -1, -2, 5, -1, 17, 71, -1, -2, 4, -1, 0, 92, 5,
	92, 6, 92, 7, 92, 8, 92, 9, 92, 10, 92, 12, 92, 14, 92, 15, 92, -1, -2, 20,
	-1, 0, 91, 5, 91, 6, 91, 7, 91, 8, 91, 9, 91, 10, 91, 12, 91, 14, 91, 15, 91,
	-1, -2, 17, 89, 26, 89, 11, 90, -1, -2, 13, -1, 0, 82, 5, 82, 6, 82, 7, 82,
	8, 82, 9, 82, 10, 82, 12, 82, 14, 82, 15, 82, -1, -2, 26, -1, 17, 74, -1, -2,
	26, -1, 17, 75, -1, -2, 26, -1, 17, 76, -1, -2, 26, -1, 17, 88, -1, -2, 26,
	87, 17, 87, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 18, 66, 84, 102, 122, 144, 162, 170, 192, 196, 216, 230, 244,
	262, 266, 270, 284, 286, 288, 292, 298, 300, 322, 342, 344, 352, 354, 356,
	358, 360, 362, 364, 366, 368, 370, 378, 380, 396, 398, 400, 402, 404, 406,
	410, 412, 416, 416, 418, 420, 424, 442, 462, 482, 496, 510, 528, 546, 548,
}

var tmFromTo = []int16{
	137, 139, 138, 140, 33, 56, 33, 57, 33, 58, 22, 37, 23, 37, 33, 59, 98, 115,
	1, 4, 3, 17, 6, 19, 11, 4, 12, 4, 21, 34, 28, 4, 29, 4, 31, 48, 33, 60, 41,
	99, 42, 101, 45, 4, 46, 4, 55, 48, 94, 101, 102, 101, 110, 4, 116, 101, 117,
	101, 121, 101, 122, 101, 127, 101, 132, 101, 1, 5, 11, 5, 12, 5, 28, 5, 29,
	5, 33, 61, 45, 5, 46, 5, 110, 5, 1, 6, 11, 6, 12, 6, 28, 6, 29, 6, 33, 62,
	45, 6, 46, 6, 110, 6, 1, 7, 2, 7, 11, 7, 12, 7, 28, 7, 29, 7, 33, 63, 45, 7,
	46, 7, 110, 7, 1, 8, 11, 8, 12, 8, 28, 8, 29, 8, 33, 64, 43, 107, 45, 8, 46,
	8, 110, 8, 123, 107, 1, 9, 11, 9, 12, 9, 28, 9, 29, 9, 33, 65, 45, 9, 46, 9,
	110, 9, 31, 49, 33, 66, 55, 49, 106, 122, 1, 10, 11, 10, 12, 10, 28, 10, 29,
	10, 33, 67, 43, 10, 45, 10, 46, 10, 110, 10, 123, 10, 33, 68, 108, 123, 1,
	11, 6, 20, 11, 11, 12, 11, 28, 11, 29, 11, 33, 69, 45, 11, 46, 11, 110, 11,
	11, 27, 28, 44, 29, 47, 33, 70, 45, 109, 46, 111, 110, 124, 0, 3, 6, 21, 7,
	22, 10, 26, 24, 41, 25, 42, 33, 71, 26, 43, 33, 72, 35, 95, 36, 96, 38, 97,
	55, 112, 100, 118, 103, 120, 134, 135, 4, 18, 33, 73, 18, 32, 33, 74, 17, 31,
	31, 50, 34, 94, 38, 98, 39, 98, 55, 50, 99, 116, 33, 75, 33, 76, 8, 23, 33,
	77, 11, 28, 28, 45, 33, 78, 33, 79, 31, 51, 33, 80, 55, 51, 103, 121, 114,
	121, 119, 127, 125, 132, 126, 121, 130, 121, 133, 121, 134, 121, 31, 52, 33,
	81, 42, 102, 55, 52, 94, 102, 116, 102, 117, 102, 122, 102, 127, 102, 132,
	102, 33, 82, 31, 53, 33, 83, 55, 53, 99, 117, 33, 84, 33, 85, 33, 86, 33, 87,
	33, 88, 33, 89, 33, 90, 33, 91, 33, 92, 1, 12, 11, 29, 28, 46, 45, 110, 1,
	137, 1, 13, 11, 13, 12, 30, 28, 13, 29, 30, 45, 13, 46, 30, 110, 30, 9, 24,
	9, 25, 33, 93, 20, 33, 0, 136, 31, 54, 55, 113, 31, 55, 21, 35, 120, 128, 21,
	36, 41, 100, 22, 38, 23, 39, 1, 14, 2, 138, 11, 14, 12, 14, 28, 14, 29, 14,
	45, 14, 46, 14, 110, 14, 1, 15, 11, 15, 12, 15, 28, 15, 29, 15, 43, 108, 45,
	15, 46, 15, 110, 15, 123, 131, 1, 16, 11, 16, 12, 16, 28, 16, 29, 16, 43, 16,
	45, 16, 46, 16, 110, 16, 123, 16, 42, 103, 94, 114, 116, 125, 117, 126, 122,
	130, 127, 133, 132, 134, 42, 104, 94, 104, 116, 104, 117, 104, 122, 104, 127,
	104, 132, 104, 42, 105, 94, 105, 102, 119, 116, 105, 117, 105, 121, 129, 122,
	105, 127, 105, 132, 105, 42, 106, 94, 106, 102, 106, 116, 106, 117, 106, 121,
	106, 122, 106, 127, 106, 132, 106, 23, 40,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 1, 4, 4, 4, 2, 6, 5, 9, 3, 0, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 5, 1, 1, 1, 1, 1, 1, 2, 1, 0, 3, 3, 3, 3, 3, 1,
	3, 4, 1, 1, 4, 6, 3, 1, 1, 4, 3, 1, 1, 1, 0, 0,
}

var tmRuleSymbol = []int32{
	39, 39, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 42, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 45, 45, 46, 47, 47, 47, 47, 47, 47, 48, 48, 49, 50, 50, 51, 52,
	52, 53, 53, 54, 55, 55, 56, 56, 57, 57, 57, 58, 59, 59, 60, 61, 61, 43,
}

var tmRuleType = [...]uint32{
	0,                  // Declaration_list : Declaration_list Declaration
	0,                  // Declaration_list : Declaration
	uint32(Test),       // Test : Declaration_list
	0,                  // Declaration : Decl1
	0,                  // Declaration : Decl2
	uint32(Block),      // Declaration : '{' '-' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '-' '}'
	uint32(Block),      // Declaration : '{' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '}'
	uint32(Block),      // Declaration : '{' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '}'
	uint32(LastInt),    // Declaration : lastInt
	uint32(Int),        // Declaration : IntegerConstant '[' ']'
	uint32(Int),        // Declaration : IntegerConstant
	uint32(TestClause), // Declaration : 'test' '{' setof_not_EOI_or_DOT_or_RBRACE_optlist '}'
	0,                  // Declaration : 'test' '(' empty1 ')'
	0,                  // Declaration : 'test' '(' foo_nonterm ')'
	uint32(TestIntClause) + uint32(InTest|InFoo)<<16, // Declaration : 'test' IntegerConstant
	uint32(EvalEmpty1),  // Declaration : 'eval' lookahead_notFooLookahead '(' expr ')' empty1
	uint32(EvalFoo),     // Declaration : 'eval' lookahead_FooLookahead '(' foo_nonterm_A ')'
	uint32(EvalFoo2),    // Declaration : 'eval' lookahead_FooLookahead '(' IntegerConstant '.' expr '+' .greedy expr ')'
	uint32(DeclOptQual), // Declaration : 'decl2' ':' QualifiedNameopt
	0,                   // lookahead_FooLookahead :
	0,                   // lookahead_notFooLookahead :
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : invalid_token
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : WhiteSpace
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SingleLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : Identifier
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : IntegerConstant
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : lastInt
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'test'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl1'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl2'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'eval'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'as'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'if'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'else'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '{'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '('
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ')'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '['
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ']'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '...'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ','
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ':'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '-'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '->'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '+'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '\\'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '_'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'foo_'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'f_a'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : multiline
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : dquote
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : squote
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SharpAtID
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'Zfoo'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : backtrackingToken
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : error
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : MultiLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist : setof_not_EOI_or_DOT_or_RBRACE_optlist setof_not_EOI_or_DOT_or_RBRACE
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist :
	0,                   // FooLookahead : '(' IntegerConstant '.' setof_foo_la_list ')'
	0,                   // setof_foo_la : IntegerConstant
	0,                   // setof_foo_la : 'as'
	0,                   // setof_foo_la : '.'
	0,                   // setof_foo_la : '+'
	0,                   // setof_foo_la : '\\'
	0,                   // setof_foo_la : 'foo_'
	0,                   // setof_foo_la_list : setof_foo_la_list setof_foo_la
	0,                   // setof_foo_la_list : setof_foo_la
	0,                   // empty1 :
	0,                   // foo_la : IntegerConstant '.' expr
	0,                   // foo_la : IntegerConstant 'foo_' expr
	0,                   // foo_nonterm : IntegerConstant '.' expr
	0,                   // foo_nonterm_A : IntegerConstant '.' expr
	0,                   // foo_nonterm_A : IntegerConstant 'foo_' expr
	0,                   // QualifiedName : Identifier
	0,                   // QualifiedName : QualifiedName '.' Identifier
	uint32(Decl1),       // Decl1 : 'decl1' '(' QualifiedName ')'
	uint32(Decl2),       // Decl2 : 'decl2'
	0,                   // Decl2 : If
	uint32(If),          // If : 'if' '(' ')' Decl2
	uint32(If),          // If : 'if' '(' ')' Decl2 'else' Decl2
	uint32(PlusExpr),    // expr : expr '+' primaryExpr
	0,                   // expr : customPlus
	0,                   // expr : primaryExpr
	0,                   // customPlus : '\\' primaryExpr '+' expr
	uint32(AsExpr),      // primaryExpr : primaryExpr_WithoutAs 'as' expr
	uint32(IntExpr),     // primaryExpr : IntegerConstant
	uint32(IntExpr),     // primaryExpr_WithoutAs : IntegerConstant
	0,                   // QualifiedNameopt : QualifiedName
	0,                   // QualifiedNameopt :
}

// set(follow error) =
var afterErr = []int32{}
