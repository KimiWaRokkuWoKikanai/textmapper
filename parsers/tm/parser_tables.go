// generated by Textmapper; DO NOT EDIT

package tm

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/tm/token"
)

var recoveryScopeStates = map[int]bool{
	98:  true,
	137: true,
	160: true,
	161: true,
	205: true,
	335: true,
}

var tmNonterminals = [...]string{
	"identifier",
	"identifier_Keywords",
	"integer_literal",
	"string_literal",
	"boolean_literal",
	"literal",
	"pattern",
	"command",
	"syntax_problem",
	"file",
	"import__optlist",
	"option_optlist",
	"header",
	"lexer_section",
	"parser_section",
	"import_",
	"option",
	"symref",
	"symref_Args",
	"rawType",
	"lexer_parts",
	"lexer_part",
	"lexer_part_OrSyntaxError",
	"named_pattern",
	"start_conditions_scope",
	"start_conditions",
	"stateref_list_Comma_separated",
	"lexeme",
	"lexeme_attrs",
	"lexeme_attribute",
	"lexer_directive",
	"lexer_state_list_Comma_separated",
	"stateref",
	"lexer_state",
	"grammar_parts",
	"grammar_part",
	"grammar_part_OrSyntaxError",
	"nonterm",
	"assoc",
	"param_modifier",
	"template_param",
	"directive",
	"identifier_list_Comma_separated",
	"inputref_list_Comma_separated",
	"inputref",
	"references",
	"rules",
	"rule0",
	"predicate",
	"rhsSuffix",
	"reportClause",
	"reportAs",
	"rhsParts",
	"rhsPart",
	"rhsPart_OrSyntaxError",
	"lookahead_predicate_list_And_separated",
	"rhsLookahead",
	"lookahead_predicate",
	"rhsStateMarker",
	"rhsAssignment",
	"rhsOptional",
	"rhsCast",
	"listSeparator",
	"rhsPrimary",
	"rhsSet",
	"setPrimary",
	"setExpression",
	"nonterm_param_list_Comma_separated",
	"nonterm_params",
	"nonterm_param",
	"param_ref",
	"args",
	"argument_list_Comma_separated",
	"argument_list_Comma_separatedopt",
	"argument",
	"param_type",
	"param_value",
	"predicate_primary",
	"predicate_expression",
	"expression",
	"expression_list_Comma_separated",
	"rawTypeopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmDefGoto = []int32{
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1,
}

var tmGoto = []int32{
	-1, 413, -35, 3965, 3899, 3953, -100, 3514, 3558, 581, 580, 504, 586, -61,
	46, 510, 500, 3912, 3363, 48, 148, 168, -131, -99, -98, -60, 359, 18, -299,
	225, 22, 122, 57, -58, 429, 431, 357, 6, 360, 361, 227, 236, 219, 292, 137,
	278, 12, 4070, 4123, 3824, 3523, 318, 3978, 4016, 44, 545, 3879, 407, 3924,
	3933, 167, 3688, 489, 3733, 3613, -137, -45, 563, 605, 399, 3969, 15, 492,
	493, 282, 140, -125, 195, 210, 32, 363, 221,
}

var tmDefAct = []int32{
	-1, -1, -1, 91, 0, 10, 1, 23, 11, 21, 22, 14, -1, 17, 9, 13, 27, 2, 5, 24,
	30, 29, 28, 6, 31, 15, 18, 8, 12, 16, 32, 3, 7, 19, 4, 25, 20, -1, 33, 69,
	67, 70, 68, 71, 66, 43, 34, 56, 44, 54, 55, 47, 59, 50, 42, 46, 60, 35, 38,
	57, 63, 62, 61, 39, 64, 48, 51, 41, 45, 49, 65, 36, 40, 52, 37, 58, 53, -1,
	-1, 26, -1, -1, -1, -1, 104, -1, -1, -1, 95, -1, -1, -1, 90, -1, -1, -1, -1,
	-1, -1, -1, -1, 81, -1, 80, 103, 226, 214, 249, -1, 196, -1, -1, 212, -1,
	223, 228, 227, 225, 240, 243, 245, 256, -1, -1, -1, 266, 268, -1, -1, -1, -1,
	-1, -1, -1, 73, -1, -1, -1, -1, -1, -1, 88, 92, -1, -1, -1, -1, 239, -1, 271,
	-1, 289, -1, -1, -1, -1, 101, 238, -1, 235, -1, -1, -1, -1, -1, 102, -1, 168,
	-1, 204, -1, 210, 230, 233, -1, 208, 224, 232, 231, 229, 244, 254, 253, -1,
	-1, -1, 220, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1,
	-1, 84, -1, 86, 170, -1, 216, 217, 286, -1, -1, -1, 215, -1, 250, -1, -1,
	237, 236, -1, -1, -1, -1, -1, 259, 262, -1, 103, 241, -1, -1, -1, -1, -1,
	274, 242, 197, 202, -1, 200, 206, 72, 75, 74, 77, 76, 78, 247, 246, 189, -1,
	222, -1, 265, 166, -1, 167, 164, -1, -1, -1, 94, 98, -1, -1, -1, -1, 105,
	107, 110, -1, 108, 109, -1, -1, 152, 154, 155, 156, -1, 292, 298, 293, 100,
	82, 169, 287, 288, -1, -1, 194, -1, -1, 234, 255, -1, 261, 258, -1, 257, -1,
	279, 280, -1, -1, 272, 198, -1, 218, 283, 284, 269, 165, 162, -1, 163, -1,
	-1, -1, -1, 150, -1, 121, -1, 301, -1, 115, 106, 111, 114, 112, 113, -1, -1,
	-1, -1, -1, 281, -1, -1, -1, -1, 171, 174, 173, 282, 172, -1, -1, -1, 160,
	153, 157, 158, 159, -1, 297, 300, -1, 195, 252, 251, 260, -1, -1, 277, 273,
	188, 161, -1, 151, -1, 149, -1, 118, -1, 119, 79, 116, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 191, -1, -1, -1, -1, 296, -1, 295, -1, 146, -1, 147,
	120, -1, -1, 140, 117, -1, -1, -1, 185, 186, -1, -1, 192, 180, -1, 181, 179,
	-1, -1, 178, 294, 299, 145, 148, 143, 144, -1, -1, 138, -1, -1, 130, 182,
	183, -1, 187, 190, -1, 176, -1, 142, 134, -1, 136, -1, 128, -1, 184, -1, 177,
	132, 124, -1, 126, 175, 122, -1, -1, -1, -1,
}

const tmActionBase = -82

var tmAction = []int32{
	-32, 3301, 1767, -82, -82, -82, -82, -82, -82, -82, -82, -82, 1987, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -5, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -11, 2068, -82, 56, 398, 3340, 3340, -82, 97, -12, 4, -82, 1767,
	2913, 2330, -82, 398, 1, -72, 3340, 2961, 471, 3009, 155, -82, 265, -82,
	3420, -82, -82, -82, 16, -82, 763, 13, -82, 544, -82, -82, -82, -82, -82,
	2410, 2657, -82, 76, 2691, 240, -82, -82, 398, 466, 398, 398, 109, 467, 462,
	-82, 486, 482, 101, 487, 146, 290, -82, -82, 298, 398, 3340, 3340, -82, 3340,
	-82, 138, -82, 208, 302, 617, 3340, -82, -82, 304, -82, 471, 2750, 2444,
	2497, 2444, -82, -7, -82, 165, -82, 690, -82, -82, -82, 181, -82, -82, -82,
	-82, -82, -82, -82, -82, 2108, 3340, 3340, -82, 8, 3340, -82, 320, 398, 329,
	337, 398, 480, 398, 485, 490, -82, 2822, 3048, 1845, 346, -82, 428, -82, -82,
	344, -82, -82, -82, 74, 74, 2961, -82, 2961, -82, 3340, 484, -82, -82, 3009,
	312, 2750, 2750, 2178, -82, -82, 206, 3537, -82, 3340, 3340, 107, 333, 483,
	-82, -82, -82, -82, 187, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, 89, -82, 2108, -82, -82, 352, -82, -82, 365, 398, 371, -82, -82, 163,
	3100, 215, 1925, -82, -82, -82, 3141, -82, -82, 317, 2577, -82, -82, -82,
	-82, 1004, -82, -82, -82, -82, -82, -82, -82, -82, 218, 224, -82, 3197, 222,
	-82, -82, 245, -82, -82, 2750, -82, 2750, -82, -82, 2108, 2873, -82, -82,
	3340, -82, -82, -82, -82, -82, -82, 381, -82, 3340, 3340, 3340, 488, -82,
	339, -82, 433, -82, 491, -82, -82, -82, -82, -82, -82, 2822, 252, 52, 513,
	513, -82, 3340, 3340, 3340, 3340, -82, -82, -82, -82, -82, 3340, 217, 3340,
	-82, -82, -82, -82, -82, 498, -82, -82, 373, -82, -82, -82, -82, 254, 291,
	-82, -82, -82, -82, 3340, -82, 23, -82, 382, -82, 3340, -82, -82, -82, 1084,
	2250, 535, 509, 509, 543, 546, 550, 541, 177, 395, -82, 408, 3262, 3340, 415,
	-82, 1404, -82, 554, -82, 3340, -82, -82, 354, 844, -82, -82, 1164, 555, 557,
	-82, -82, 509, 558, -82, -82, 3340, -82, -82, 421, 2108, -82, -82, -82, -82,
	-82, -82, -82, 551, 1244, -82, 1484, 925, -82, -82, -82, 559, -82, -82, 2108,
	-82, 561, -82, -82, 1565, -82, 1325, -82, 1646, -82, 562, -82, -82, -82,
	1727, -82, -82, -82, 578, 579, -82, -82,
}

const tmTableLen = 4412

var tmTable = []int16{
	37, -97, -147, 213, -90, -148, -131, 462, 213, -98, -91, 80, -99, -83, -100,
	-101, -84, 213, -84, -146, -257, -85, -132, 211, 228, 270, -168, -84, 211,
	-102, 140, -169, -4, -103, -6, 270, -84, 211, -404, -104, -405, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -105,
	-95, -86, -136, -246, 203, -84, 104, 122, 123, 408, -86, 85, 221, 228, 299,
	135, 138, 221, 104, 108, 221, 147, 149, 104, 156, 219, 221, 271, 272, -387,
	219, 143, -312, 219, 434, 104, 153, 436, 104, 219, -186, -129, 229, -247,
	-187, 165, -84, -248, 187, -388, 278, -308, 104, -196, 104, 104, 314, -187,
	-84, 447, 278, 131, 451, 141, 330, 190, 273, 192, 193, 104, 156, 156, 85,
	149, 247, 285, 457, -214, -215, 104, 156, -139, 208, 176, 285, 104, 226, 230,
	149, 230, 228, 104, 228, 247, -202, 104, 331, 332, 223, 285, -203, 203, -162,
	247, 247, 298, 203, 368, 230, 252, 254, 204, 206, 123, -84, 203, 104, 207,
	193, 104, 193, 104, 207, 199, 176, 268, 37, 230, 199, 258, -84, 207, 261,
	279, 263, 273, -84, 199, -321, 149, 176, 149, -303, 156, 274, -216, 247, 156,
	275, 226, 226, 230, 381, -328, -217, 291, -304, 149, 149, 302, 286, 290, 271,
	272, 291, -322, -305, 165, -323, -218, 290, 165, -419, 247, 118, 287, -365,
	-366, 330, -218, 149, -303, 366, -190, 367, 290, 118, 104, 375, 375, 263,
	118, 323, -191, 268, -367, 302, 247, 336, -342, 317, 273, 37, 118, 263, -305,
	118, 230, 407, 355, 331, 332, -163, 333, -305, -350, 87, 334, 151, 156, 118,
	-86, 118, 118, 444, -207, 226, 264, 226, 387, 388, 149, 149, 152, -168, 370,
	435, 118, -168, -209, 360, 264, 327, 453, 156, 373, 373, 118, -168, 273, 325,
	264, -219, 118, -223, 231, -168, 238, -86, 118, 268, -259, -299, 118, -224,
	-168, 389, 156, 156, 252, -261, 428, 83, -168, 269, 156, -309, 397, -262,
	274, -168, -207, -380, 275, 118, -290, 275, 118, -168, 118, 247, -339, -381,
	-317, 270, -340, -341, 156, 432, -342, -343, -168, -344, 323, -345, -346,
	-318, -168, 268, -347, 327, -348, -320, -349, 247, -350, -401, -168, -351,
	-402, 156, 422, -373, -406, 230, -405, 449, 333, 373, 253, -431, 334, -97,
	247, 213, 151, -420, 151, -421, 213, -98, 77, 352, -99, 156, -100, -101, -84,
	149, -422, 291, -312, 292, -425, 280, 118, -426, 426, -432, -444, -102, 405,
	-445, 281, -103, -6, 186, 149, 374, 376, -104, 237, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -105, -97, 393,
	213, 125, 383, -193, -198, -199, -98, -136, 328, -99, 396, -100, -101, -84,
	213, 294, -201, -264, -204, -266, -203, 133, 270, 356, -267, 159, -102, -297,
	-384, -310, -103, -6, 357, -382, -379, -246, -104, -400, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -105, -97,
	-412, 209, -104, 441, 384, -415, 209, -98, -416, -417, 394, -84, -100, -101,
	-84, 209, -429, -439, 311, -440, -442, -454, -447, -456, -461, -465, -466,
	-102, 461, 91, 78, -103, -6, 3, 256, 92, 369, -104, 142, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -105, -97,
	324, 209, 395, 296, 277, 431, 278, -98, 354, 392, 350, 351, -100, -101, -84,
	209, 87, 219, 158, 361, 124, 0, 0, 0, 0, 0, 0, -102, 0, 235, 236, -103, -6,
	0, 0, 0, -220, -104, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -105, -97, 0, 201, 0, 0, 0, 0, 201, -98, 0, 0,
	0, 0, -100, -101, -84, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0,
	-103, -6, 0, 0, 0, 0, -104, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -105, -97, 0, 205, 0, 0, 0, 0, 205, -98,
	0, 0, 0, 0, -100, -101, -84, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0,
	0, 0, 0, -6, 0, 0, 0, 0, -104, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -105, 139, 0, 0, -246, 0, 0, 0, 0,
	139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -408, 0, 0, 0, 139, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, -105, 129,
	0, 0, -246, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -408, 0,
	0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0,
	0, 0, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, -105, -136, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -360,
	0, -284, -361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103,
	-6, 0, -247, 0, 0, 0, -248, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, 141, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -408, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 131, -382, 0, 0, 0, 0, 0,
	0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -408, 0, 0, 0, 131, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 135,
	-382, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -408, 0,
	0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0,
	0, 0, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, -105, 125, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -408, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 125, 0, 0, 0, 0, 0, 0, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, -105, -136, -246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -284, -427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -103, -6, 0, -247, 0, 0, 0, -248, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 137, 0, 0, 0, 0, 0, 0, 0,
	137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, -105, 133,
	0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, -105, 127, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	127, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, -105, 123, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, -105, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58,
	-59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -136, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103,
	-6, 0, -247, 0, 0, 0, -248, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, 96, 0, 0, 0, 0, 0, 0, 0, -268, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -103, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, 26, 0, 0, 0, 0, 26, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 26, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 93, -136, -246, -92, 0, 0, 0, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 0, -6, 0, -247, 0, 0, 0,
	-248, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, -165, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -411, -269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -103, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	-139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -103, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -1, -1, -1, -1, -1, -1, -1,
	-1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1,
	-1, -1, -1, -182, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1,
	0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0,
	0, 0, 0, -6, 0, 0, 0, 0, -104, -1, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, 276, 0, -234, 0, 0, 0, -235, 0, 0, 0,
	0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, 97, 0, 0, 0, 0, 0, 0, 0, -278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -103, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -1, -1, -1, -1, -1, -1, -1, -1,
	0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -183,
	-184, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, -185, -1, -1, 0, 0, -1, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -6, 0, 0, 0, 0, 0, -1, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-227, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12,
	-13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -234, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0,
	-6, -136, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -150, 0, 0, 0, 0,
	0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -157, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, 0, 0, -278, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12,
	-13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -337, 0, -6, 0, 0, 0, 0, 0,
	0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0,
	0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1,
	-164, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 107, -1, -165, -1, 0, 0, -166,
	0, -1, -1, -1, -1, 107, -1, -1, -1, 0, 107, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0,
	0, 107, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 107, 107,
	0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 107, 227, 107, 0, 107, 0, 107, 0, 0, 0, 107, 0, 0, 0, 0, -1,
	-1, -1, -1, -1, -1, -1, 0, 251, 0, -1, -1, -1, -1, 0, 0, 107, -1, -1, 107, 0,
	107, 86, 0, -1, -165, -1, 285, 0, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, 0, 0,
	0, -1, -1, 0, 0, -1, 0, 0, 227, 227, 300, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 94, 112, 0, 0, 105, 128, 0, 132, 0, 105, 0, 0, 0, 112, 0, -1, 0, 0,
	112, 0, 0, 105, 107, 0, 172, 0, 0, 0, 0, 0, 169, 171, 0, 175, 0, 0, 106, 0,
	105, 0, 105, 105, 285, 0, 0, 0, 139, 112, 106, 112, 112, 195, 0, 106, 0, 105,
	0, 0, 0, 0, 0, 227, 0, 227, 112, 172, 0, 0, 173, 0, 0, 105, 0, 0, 175, 0, 0,
	105, 0, 0, 112, 172, 106, 0, 106, 106, 112, 0, 240, 0, 242, 121, 0, 0, 243,
	0, 0, 0, 0, 106, 0, 0, 105, 121, 0, 105, 0, 105, 121, 173, 0, 112, 0, 0, 112,
	106, 112, 0, 0, 0, 121, 106, 0, 121, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 121, 121, 0, 0, 0, 0, 0, 106, 0, 0, 106, 0, 106, 0, 0, 121, 0, 0,
	284, 0, 285, 0, 309, 0, 0, 121, 0, 119, 0, 0, 0, 121, 0, 121, 105, 121, 0,
	121, 0, 119, 0, 121, 0, 112, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	119, 0, 0, 121, 0, 0, 121, 0, 121, 0, 0, 0, 0, 120, 119, 0, 119, 119, 0, 106,
	0, 0, 0, 0, 0, 120, 329, 0, 0, 0, 120, 119, 0, 0, 353, 0, 0, 0, 0, 284, 0,
	119, 120, 0, 0, 120, 0, 119, 0, 119, 0, 119, 0, 119, 0, 0, 0, 119, 0, 120, 0,
	120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 120, 0, 119, 0, 0, 119, 0,
	119, 0, 0, 120, 0, 0, 0, 0, 0, 120, 0, 120, 0, 120, 0, 120, 0, 0, 0, 120, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 111, 0, 0, 0, 433, 111, 0, 120, 0, 0,
	120, 0, 120, 0, 0, 0, 0, 168, 0, 0, 174, 0, 0, 0, 329, 0, 0, 0, 0, 446, 0,
	448, 450, 119, 111, 0, 111, 111, 0, 0, 284, 0, 0, 115, 455, 0, 456, 0, 458,
	0, 0, 111, 0, 0, 460, 115, 0, 0, 0, 0, 115, 174, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 115, 111, 0, 177, 0, 241, 120, 0, 0, 411, 412, 0, 0, 0, 0, 0, 116, 115, 0,
	115, 115, 0, 157, 0, 0, 117, 111, 0, 116, 111, 0, 111, 0, 116, 115, 0, 0,
	117, 0, 439, 0, 0, 117, 0, 177, 116, 0, 0, 178, 0, 115, 0, 0, 0, 117, 0, 115,
	179, 0, 0, 177, 0, 116, 126, 116, 116, 136, 0, 209, 210, 113, 117, 0, 117,
	117, 0, 0, 150, 220, 116, 0, 115, 113, 0, 115, 0, 115, 154, 117, 178, 0, 0,
	0, 249, 0, 116, 0, 111, 179, 170, 0, 116, 0, 0, 117, 178, 0, 0, 114, 0, 117,
	198, 249, 0, 179, 0, 113, 0, 113, 113, 114, 0, 249, 249, 0, 114, 116, 0, 211,
	116, 0, 116, 0, 113, 0, 117, 0, 114, 117, 0, 117, 293, 0, 234, 0, 157, 0,
	250, 0, 113, 0, 0, 115, 0, 114, 113, 114, 114, 0, 248, 0, 0, 109, 0, 0, 249,
	283, 0, 126, 0, 0, 114, 0, 0, 109, 0, 289, 290, 248, 109, 113, 0, 0, 113, 0,
	113, 0, 114, 248, 248, 0, 0, 249, 114, 150, 0, 150, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 109, 0, 109, 109, 304, 305, 0, 110, 249, 362, 114, 312, 0, 114, 0,
	114, 0, 109, 0, 110, 0, 0, 0, 248, 110, 0, 0, 313, 0, 0, 0, 0, 0, 109, 372,
	0, 0, 0, 283, 239, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 248, 0, 0, 110, 0, 110,
	110, 390, 391, 0, 0, 0, 312, 0, 109, 293, 0, 109, 0, 109, 110, 0, 0, 0, 248,
	0, 0, 0, 313, 234, 0, 114, 0, 0, 0, 0, 110, 401, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	110, 0, 110, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 391, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 248, 0, 0, 0, 313, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 313,
}

var tmCheck = []int16{
	1, 8, 74, 10, 15, 77, 18, 1, 15, 16, 21, 12, 19, 18, 21, 22, 23, 24, 23, 18,
	12, 26, 18, 10, 161, 17, 10, 23, 15, 36, 91, 15, 64, 40, 41, 27, 23, 24, 15,
	46, 17, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 18, 80, 2, 3,
	139, 23, 81, 82, 83, 382, 80, 37, 10, 224, 225, 90, 91, 15, 93, 81, 18, 96,
	97, 98, 99, 10, 24, 200, 200, 51, 15, 93, 17, 18, 407, 110, 98, 410, 113, 24,
	38, 18, 161, 43, 42, 104, 23, 47, 123, 71, 17, 18, 127, 18, 129, 130, 255,
	42, 23, 432, 27, 87, 435, 91, 269, 127, 200, 129, 130, 144, 145, 146, 0, 148,
	183, 11, 449, 13, 14, 154, 155, 9, 144, 113, 20, 160, 161, 162, 163, 164,
	301, 166, 303, 202, 67, 170, 269, 269, 160, 35, 73, 10, 21, 212, 213, 224,
	15, 306, 183, 184, 185, 139, 140, 188, 23, 24, 191, 10, 15, 194, 17, 196, 15,
	10, 154, 200, 201, 202, 15, 191, 23, 24, 194, 201, 196, 269, 23, 24, 49, 214,
	170, 216, 10, 218, 200, 11, 255, 222, 200, 224, 225, 226, 326, 12, 20, 11,
	24, 232, 233, 18, 202, 11, 335, 335, 20, 76, 34, 226, 79, 35, 20, 230, 69,
	282, 81, 203, 28, 29, 383, 35, 255, 10, 301, 17, 303, 35, 93, 262, 320, 321,
	10, 98, 267, 27, 269, 24, 18, 306, 273, 56, 262, 335, 277, 110, 24, 34, 113,
	282, 382, 277, 383, 383, 21, 269, 34, 72, 0, 269, 97, 294, 127, 80, 129, 130,
	423, 9, 301, 10, 303, 338, 339, 306, 307, 97, 10, 310, 410, 144, 10, 15, 282,
	24, 268, 442, 319, 320, 321, 154, 10, 383, 267, 34, 24, 160, 24, 162, 10,
	164, 80, 166, 335, 15, 24, 170, 34, 10, 341, 342, 343, 344, 15, 403, 0, 10,
	200, 350, 17, 352, 15, 335, 10, 9, 17, 335, 191, 15, 27, 194, 10, 196, 399,
	48, 27, 15, 200, 52, 53, 372, 407, 56, 57, 10, 59, 378, 61, 62, 15, 10, 383,
	66, 336, 68, 15, 70, 423, 72, 17, 10, 75, 20, 395, 396, 15, 15, 399, 17, 435,
	383, 403, 184, 50, 383, 8, 442, 10, 214, 15, 216, 17, 15, 16, 2, 276, 19,
	419, 21, 22, 23, 423, 15, 214, 17, 216, 12, 201, 262, 15, 399, 78, 12, 36,
	378, 15, 201, 40, 41, 122, 442, 320, 321, 46, 163, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 8, 343, 10, 83, 335, 18, 18, 24, 16, 2, 268,
	19, 351, 21, 22, 23, 24, 218, 15, 18, 12, 15, 73, 89, 335, 277, 15, 99, 36,
	24, 18, 27, 40, 41, 277, 81, 27, 3, 46, 20, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 8, 18, 10, 46, 419, 336, 15, 15, 16, 15, 12, 344, 23,
	21, 22, 23, 24, 15, 15, 253, 15, 15, 15, 24, 15, 15, 0, 0, 36, 0, 78, 3, 40,
	41, 0, 188, 78, 307, 46, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 8, 267, 10, 350, 222, 201, 406, 201, 16, 277, 343, 276, 276, 21, 22,
	23, 24, 37, 154, 99, 282, 83, -1, -1, -1, -1, -1, -1, 36, -1, 163, 163, 40,
	41, -1, -1, -1, 45, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1, -1, 21, 22, 23, 24,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 40, 41, -1, -1,
	-1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8,
	-1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1, -1, 21, 22, 23, 24, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41, -1, -1, -1, -1, 46,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, 3, -1,
	-1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1,
	25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1,
	-1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0,
	-1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1,
	19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 0, 81, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 81, -1, -1, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1,
	-1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1,
	25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1,
	-1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 3,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41,
	-1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1,
	-1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1,
	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 2, 3, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1,
	43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	-1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 18, -1, -1, -1, -1, 23, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, 2, 3, 44, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, 41, -1, 43, -1, -1, -1, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 10, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 24, -1, 26, -1, -1, -1, -1, -1, -1, -1, 34, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1,
	-1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, -1, 37, 38, 39, -1, -1, 42, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1, -1,
	-1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1,
	-1, -1, 41, -1, -1, -1, -1, 46, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 27, -1, 29, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	-1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1, 17,
	18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, -1, 32, 33, 34, 35, -1,
	37, 38, 39, -1, -1, 42, 43, 44, -1, -1, 47, -1, -1, -1, 17, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	41, -1, -1, -1, -1, -1, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1,
	-1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 29,
	-1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, 2, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, -1, -1, -1, -1,
	-1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 32, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1,
	-1, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1,
	-1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 28, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 39, -1, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 24, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 15, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1,
	17, 18, 19, 20, -1, -1, -1, 81, 25, 26, 27, -1, -1, 30, -1, 32, 33, 34, 35,
	93, 37, 38, 39, -1, 98, -1, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1, 110, -1,
	-1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 129,
	130, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, 144, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 154, -1, -1, -1, -1, -1, 160, 161, 162, -1, 164, -1, 166,
	-1, -1, -1, 170, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, -1, 183, -1, 11, 12,
	13, 14, -1, -1, 191, 18, 19, 194, -1, 196, 37, -1, 25, 26, 27, 202, -1, 30,
	-1, 32, 33, -1, 35, -1, 37, 38, 39, -1, -1, -1, 43, 44, -1, -1, 47, -1, -1,
	224, 225, 226, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, 80, 81,
	-1, -1, 93, 85, -1, 87, -1, 98, -1, -1, -1, 93, -1, 81, -1, -1, 98, -1, -1,
	110, 262, -1, 113, -1, -1, -1, -1, -1, 110, 111, -1, 113, -1, -1, 81, -1,
	127, -1, 129, 130, 282, -1, -1, -1, 91, 127, 93, 129, 130, 131, -1, 98, -1,
	144, -1, -1, -1, -1, -1, 301, -1, 303, 144, 154, -1, -1, 113, -1, -1, 160,
	-1, -1, 154, -1, -1, 166, -1, -1, 160, 170, 127, -1, 129, 130, 166, -1, 168,
	-1, 170, 81, -1, -1, 174, -1, -1, -1, -1, 144, -1, -1, 191, 93, -1, 194, -1,
	196, 98, 154, -1, 191, -1, -1, 194, 160, 196, -1, -1, -1, 110, 166, -1, 113,
	-1, 170, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 129, 130, -1,
	-1, -1, -1, -1, 191, -1, -1, 194, -1, 196, -1, -1, 144, -1, -1, 202, -1, 399,
	-1, 241, -1, -1, 154, -1, 81, -1, -1, -1, 160, -1, 162, 262, 164, -1, 166,
	-1, 93, -1, 170, -1, 262, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	110, -1, -1, 113, -1, -1, 191, -1, -1, 194, -1, 196, -1, -1, -1, -1, 81, 127,
	-1, 129, 130, -1, 262, -1, -1, -1, -1, -1, 93, 269, -1, -1, -1, 98, 144, -1,
	-1, 277, -1, -1, -1, -1, 282, -1, 154, 110, -1, -1, 113, -1, 160, -1, 162,
	-1, 164, -1, 166, -1, -1, -1, 170, -1, 127, -1, 129, 130, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 262, -1, 144, -1, 191, -1, -1, 194, -1, 196, -1, -1,
	154, -1, -1, -1, -1, -1, 160, -1, 162, -1, 164, -1, 166, -1, -1, -1, 170, -1,
	81, -1, -1, -1, -1, -1, -1, -1, 390, -1, -1, -1, 93, -1, -1, -1, 407, 98, -1,
	191, -1, -1, 194, -1, 196, -1, -1, -1, -1, 110, -1, -1, 113, -1, -1, -1, 383,
	-1, -1, -1, -1, 432, -1, 434, 435, 262, 127, -1, 129, 130, -1, -1, 399, -1,
	-1, 81, 447, -1, 449, -1, 451, -1, -1, 144, -1, -1, 457, 93, -1, -1, -1, -1,
	98, 154, -1, -1, -1, -1, -1, 160, -1, -1, -1, -1, 110, 166, -1, 113, -1, 170,
	262, -1, -1, 385, 386, -1, -1, -1, -1, -1, 81, 127, -1, 129, 130, -1, 99, -1,
	-1, 81, 191, -1, 93, 194, -1, 196, -1, 98, 144, -1, -1, 93, -1, 415, -1, -1,
	98, -1, 154, 110, -1, -1, 113, -1, 160, -1, -1, -1, 110, -1, 166, 113, -1,
	-1, 170, -1, 127, 83, 129, 130, 90, -1, 145, 146, 81, 127, -1, 129, 130, -1,
	-1, 97, 155, 144, -1, 191, 93, -1, 194, -1, 196, 98, 144, 154, -1, -1, -1,
	183, -1, 160, -1, 262, 154, 110, -1, 166, -1, -1, 160, 170, -1, -1, 81, -1,
	166, 135, 202, -1, 170, -1, 127, -1, 129, 130, 93, -1, 212, 213, -1, 98, 191,
	-1, 148, 194, -1, 196, -1, 144, -1, 191, -1, 110, 194, -1, 196, 218, -1, 163,
	-1, 222, -1, 183, -1, 160, -1, -1, 262, -1, 127, 166, 129, 130, -1, 183, -1,
	-1, 81, -1, -1, 255, 202, -1, 188, -1, -1, 144, -1, -1, 93, -1, 212, 213,
	202, 98, 191, -1, -1, 194, -1, 196, -1, 160, 212, 213, -1, -1, 282, 166, 214,
	-1, 216, 262, -1, -1, -1, -1, -1, -1, -1, -1, 262, -1, 127, -1, 129, 130,
	232, 233, -1, 81, 306, 294, 191, 255, -1, 194, -1, 196, -1, 144, -1, 93, -1,
	-1, -1, 255, 98, -1, -1, 255, -1, -1, -1, -1, -1, 160, 319, -1, -1, -1, 282,
	166, -1, -1, -1, 262, -1, -1, -1, -1, -1, -1, 282, -1, -1, 127, -1, 129, 130,
	342, 343, -1, -1, -1, 306, -1, 191, 350, -1, 194, -1, 196, 144, -1, -1, -1,
	306, -1, -1, -1, 306, 307, -1, 262, -1, -1, -1, -1, 160, 372, -1, -1, -1, -1,
	166, -1, -1, -1, -1, -1, -1, -1, -1, 399, -1, -1, -1, -1, -1, -1, -1, -1,
	395, -1, -1, -1, -1, -1, -1, 191, -1, -1, 194, -1, 196, -1, -1, 423, -1, -1,
	-1, -1, -1, -1, -1, -1, 419, 262, -1, -1, -1, -1, -1, -1, -1, -1, 442, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 399, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 423, -1, -1, -1, -1,
	-1, -1, -1, -1, 262, -1, -1, 423, -1, -1, -1, 423, -1, -1, 442, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 442, -1, -1, -1, 442,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 5, 4, 5, 4, 4, 3, 2, 0, 2, 0, 6, 3, 3, 3, 4, 3, 3, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 3, 3, 3, 1, 8, 7, 7, 6, 7, 6, 6, 5,
	5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 4, 3, 3, 1, 1, 5, 4, 4, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 1, 1, 1, 1, 7, 5, 6, 4, 4, 4, 4,
	5, 5, 6, 4, 4, 5, 3, 1, 3, 1, 2, 1, 1, 2, 1, 3, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2,
	2, 1, 2, 1, 1, 0, 1, 3, 3, 3, 5, 4, 3, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 3, 5, 5, 2, 2, 4, 1, 4, 2, 1,
	3, 2, 1, 3, 3, 3, 1, 3, 1, 4, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 3, 3, 1, 3, 3, 1, 1, 4, 3, 3, 2, 1, 3, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 85, 86, 86,
	87, 87, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 104,
	104, 104, 104, 104, 105, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 111, 111, 112, 112, 112, 113, 113, 114, 115, 116, 116, 117, 117, 117,
	118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 121, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 131,
	131, 132, 132, 132, 132, 133, 134, 134, 135, 135, 135, 135, 136, 136, 136,
	136, 136, 137, 137, 138, 139, 139, 140, 141, 141, 141, 142, 142, 143, 143,
	143, 144, 145, 145, 145, 145, 145, 145, 145, 145, 146, 147, 147, 147, 147,
	148, 148, 148, 149, 149, 150, 151, 151, 151, 152, 153, 154, 154, 155, 155,
	156, 156, 156, 156, 157, 157, 158, 158, 159, 159, 159, 159, 160, 160, 160,
	161, 161, 161, 161, 161, 161, 161, 162, 162, 163, 163,
}

var tmRuleType = [...]NodeType{
	Identifier,           // identifier : ID
	Identifier,           // identifier : 'brackets'
	Identifier,           // identifier : 'inline'
	Identifier,           // identifier : 'prec'
	Identifier,           // identifier : 'shift'
	Identifier,           // identifier : 'input'
	Identifier,           // identifier : 'left'
	Identifier,           // identifier : 'right'
	Identifier,           // identifier : 'nonassoc'
	Identifier,           // identifier : 'generate'
	Identifier,           // identifier : 'assert'
	Identifier,           // identifier : 'empty'
	Identifier,           // identifier : 'nonempty'
	Identifier,           // identifier : 'global'
	Identifier,           // identifier : 'explicit'
	Identifier,           // identifier : 'lookahead'
	Identifier,           // identifier : 'param'
	Identifier,           // identifier : 'flag'
	Identifier,           // identifier : 'no-eoi'
	Identifier,           // identifier : 's'
	Identifier,           // identifier : 'x'
	Identifier,           // identifier : 'expect'
	Identifier,           // identifier : 'expect-rr'
	Identifier,           // identifier : 'class'
	Identifier,           // identifier : 'interface'
	Identifier,           // identifier : 'space'
	Identifier,           // identifier : 'extend'
	Identifier,           // identifier : 'inject'
	Identifier,           // identifier : 'layout'
	Identifier,           // identifier : 'language'
	Identifier,           // identifier : 'lalr'
	Identifier,           // identifier : 'lexer'
	Identifier,           // identifier : 'parser'
	Identifier,           // identifier_Keywords : ID
	Identifier,           // identifier_Keywords : 'brackets'
	Identifier,           // identifier_Keywords : 'inline'
	Identifier,           // identifier_Keywords : 'prec'
	Identifier,           // identifier_Keywords : 'shift'
	Identifier,           // identifier_Keywords : 'input'
	Identifier,           // identifier_Keywords : 'left'
	Identifier,           // identifier_Keywords : 'right'
	Identifier,           // identifier_Keywords : 'nonassoc'
	Identifier,           // identifier_Keywords : 'generate'
	Identifier,           // identifier_Keywords : 'assert'
	Identifier,           // identifier_Keywords : 'empty'
	Identifier,           // identifier_Keywords : 'nonempty'
	Identifier,           // identifier_Keywords : 'global'
	Identifier,           // identifier_Keywords : 'explicit'
	Identifier,           // identifier_Keywords : 'lookahead'
	Identifier,           // identifier_Keywords : 'param'
	Identifier,           // identifier_Keywords : 'flag'
	Identifier,           // identifier_Keywords : 'no-eoi'
	Identifier,           // identifier_Keywords : 's'
	Identifier,           // identifier_Keywords : 'x'
	Identifier,           // identifier_Keywords : 'expect'
	Identifier,           // identifier_Keywords : 'expect-rr'
	Identifier,           // identifier_Keywords : 'class'
	Identifier,           // identifier_Keywords : 'interface'
	Identifier,           // identifier_Keywords : 'space'
	Identifier,           // identifier_Keywords : 'extend'
	Identifier,           // identifier_Keywords : 'inject'
	Identifier,           // identifier_Keywords : 'layout'
	Identifier,           // identifier_Keywords : 'language'
	Identifier,           // identifier_Keywords : 'lalr'
	Identifier,           // identifier_Keywords : 'lexer'
	Identifier,           // identifier_Keywords : 'parser'
	Identifier,           // identifier_Keywords : 'true'
	Identifier,           // identifier_Keywords : 'false'
	Identifier,           // identifier_Keywords : 'separator'
	Identifier,           // identifier_Keywords : 'as'
	Identifier,           // identifier_Keywords : 'import'
	Identifier,           // identifier_Keywords : 'set'
	IntegerLiteral,       // integer_literal : icon
	StringLiteral,        // string_literal : scon
	BooleanLiteral,       // boolean_literal : 'true'
	BooleanLiteral,       // boolean_literal : 'false'
	0,                    // literal : string_literal
	0,                    // literal : integer_literal
	0,                    // literal : boolean_literal
	Pattern,              // pattern : regexp
	Command,              // command : code
	SyntaxProblem,        // syntax_problem : error
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section
	0,                    // file : header import__optlist option_optlist syntax_problem parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem
	0,                    // file : header import__optlist option_optlist lexer_section parser_section
	0,                    // file : header import__optlist option_optlist lexer_section
	0,                    // file : header import__optlist option_optlist parser_section
	0,                    // file : header import__optlist option_optlist
	0,                    // import__optlist : import__optlist import_
	0,                    // import__optlist :
	0,                    // option_optlist : option_optlist option
	0,                    // option_optlist :
	Header,               // header : 'language' identifier_Keywords '(' identifier_Keywords ')' ';'
	Header,               // header : 'language' identifier_Keywords ';'
	LexerSection,         // lexer_section : '::' .recoveryScope 'lexer' lexer_parts
	ParserSection,        // parser_section : '::' .recoveryScope 'parser' grammar_parts
	Import,               // import_ : 'import' identifier string_literal ';'
	Import,               // import_ : 'import' string_literal ';'
	Option,               // option : identifier '=' expression
	Symref,               // symref : identifier
	Symref,               // symref_Args : identifier args
	Symref,               // symref_Args : identifier
	RawType,              // rawType : code
	0,                    // lexer_parts : lexer_part
	0,                    // lexer_parts : lexer_parts lexer_part_OrSyntaxError
	0,                    // lexer_part : named_pattern
	0,                    // lexer_part : lexeme
	0,                    // lexer_part : lexer_directive
	0,                    // lexer_part : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : named_pattern
	0,                    // lexer_part_OrSyntaxError : lexeme
	0,                    // lexer_part_OrSyntaxError : lexer_directive
	0,                    // lexer_part_OrSyntaxError : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : syntax_problem
	NamedPattern,         // named_pattern : identifier '=' pattern
	StartConditionsScope, // start_conditions_scope : start_conditions '{' .recoveryScope lexer_parts '}'
	StartConditions,      // start_conditions : '<' '*' '>'
	StartConditions,      // start_conditions : '<' stateref_list_Comma_separated '>'
	0,                    // stateref_list_Comma_separated : stateref_list_Comma_separated ',' stateref
	0,                    // stateref_list_Comma_separated : stateref
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':'
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':'
	LexemeAttrs,          // lexeme_attrs : '(' lexeme_attribute ')'
	LexemeAttribute,      // lexeme_attribute : 'class'
	LexemeAttribute,      // lexeme_attribute : 'space'
	DirectiveBrackets,    // lexer_directive : '%' 'brackets' symref symref ';'
	InclusiveStartConds,  // lexer_directive : '%' 's' lexer_state_list_Comma_separated ';'
	ExclusiveStartConds,  // lexer_directive : '%' 'x' lexer_state_list_Comma_separated ';'
	0,                    // lexer_state_list_Comma_separated : lexer_state_list_Comma_separated ',' lexer_state
	0,                    // lexer_state_list_Comma_separated : lexer_state
	Stateref,             // stateref : identifier
	LexerState,           // lexer_state : identifier
	0,                    // grammar_parts : grammar_part
	0,                    // grammar_parts : grammar_parts grammar_part_OrSyntaxError
	0,                    // grammar_part : nonterm
	0,                    // grammar_part : template_param
	0,                    // grammar_part : directive
	0,                    // grammar_part_OrSyntaxError : nonterm
	0,                    // grammar_part_OrSyntaxError : template_param
	0,                    // grammar_part_OrSyntaxError : directive
	0,                    // grammar_part_OrSyntaxError : syntax_problem
	Nonterm,              // nonterm : identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier rawType ':' rules ';'
	Nonterm,              // nonterm : identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier ':' rules ';'
	Assoc,                // assoc : 'left'
	Assoc,                // assoc : 'right'
	Assoc,                // assoc : 'nonassoc'
	ParamModifier,        // param_modifier : 'lookahead'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier ';'
	TemplateParam,        // template_param : '%' param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_type identifier ';'
	DirectivePrio,        // directive : '%' assoc references ';'
	DirectiveInput,       // directive : '%' 'input' inputref_list_Comma_separated ';'
	DirectiveInterface,   // directive : '%' 'interface' identifier_list_Comma_separated ';'
	DirectiveAssert,      // directive : '%' 'assert' 'empty' rhsSet ';'
	DirectiveAssert,      // directive : '%' 'assert' 'nonempty' rhsSet ';'
	DirectiveSet,         // directive : '%' 'generate' identifier '=' rhsSet ';'
	DirectiveExpect,      // directive : '%' 'expect' integer_literal ';'
	DirectiveExpectRR,    // directive : '%' 'expect-rr' integer_literal ';'
	DirectiveInject,      // directive : '%' 'inject' symref reportClause ';'
	0,                    // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0,                    // identifier_list_Comma_separated : identifier
	0,                    // inputref_list_Comma_separated : inputref_list_Comma_separated ',' inputref
	0,                    // inputref_list_Comma_separated : inputref
	Inputref,             // inputref : symref 'no-eoi'
	Inputref,             // inputref : symref
	0,                    // references : symref
	0,                    // references : references symref
	0,                    // rules : rule0
	0,                    // rules : rules '|' rule0
	Rule,                 // rule0 : predicate rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsParts rhsSuffix
	Rule,                 // rule0 : predicate rhsParts reportClause
	Rule,                 // rule0 : predicate rhsParts
	Rule,                 // rule0 : predicate rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsSuffix
	Rule,                 // rule0 : predicate reportClause
	Rule,                 // rule0 : predicate
	Rule,                 // rule0 : rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : rhsParts rhsSuffix
	Rule,                 // rule0 : rhsParts reportClause
	Rule,                 // rule0 : rhsParts
	Rule,                 // rule0 : rhsSuffix reportClause
	Rule,                 // rule0 : rhsSuffix
	Rule,                 // rule0 : reportClause
	Rule,                 // rule0 :
	0,                    // rule0 : syntax_problem
	Predicate,            // predicate : '[' predicate_expression ']'
	RhsSuffix,            // rhsSuffix : '%' 'prec' symref
	RhsSuffix,            // rhsSuffix : '%' 'shift' symref
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated reportAs
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated
	ReportClause,         // reportClause : '->' identifier reportAs
	ReportClause,         // reportClause : '->' identifier
	ReportAs,             // reportAs : 'as' identifier
	0,                    // rhsParts : rhsPart
	0,                    // rhsParts : rhsParts rhsPart_OrSyntaxError
	0,                    // rhsPart : rhsAssignment
	0,                    // rhsPart : command
	0,                    // rhsPart : rhsStateMarker
	0,                    // rhsPart : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : rhsAssignment
	0,                    // rhsPart_OrSyntaxError : command
	0,                    // rhsPart_OrSyntaxError : rhsStateMarker
	0,                    // rhsPart_OrSyntaxError : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : syntax_problem
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate_list_And_separated '&' lookahead_predicate
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate
	RhsLookahead,         // rhsLookahead : '(?=' lookahead_predicate_list_And_separated ')'
	LookaheadPredicate,   // lookahead_predicate : '!' symref
	LookaheadPredicate,   // lookahead_predicate : symref
	StateMarker,          // rhsStateMarker : '.' identifier
	0,                    // rhsAssignment : rhsOptional
	RhsAssignment,        // rhsAssignment : identifier '=' rhsOptional
	RhsPlusAssignment,    // rhsAssignment : identifier '+=' rhsOptional
	0,                    // rhsOptional : rhsCast
	RhsOptional,          // rhsOptional : rhsCast '?'
	0,                    // rhsCast : rhsPrimary
	RhsCast,              // rhsCast : rhsPrimary 'as' symref_Args
	RhsAsLiteral,         // rhsCast : rhsPrimary 'as' literal
	ListSeparator,        // listSeparator : 'separator' references
	RhsSymbol,            // rhsPrimary : symref_Args
	RhsNested,            // rhsPrimary : '(' .recoveryScope rules ')'
	RhsPlusList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '+'
	RhsStarList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '*'
	RhsPlusQuantifier,    // rhsPrimary : rhsPrimary '+'
	RhsStarQuantifier,    // rhsPrimary : rhsPrimary '*'
	RhsIgnored,           // rhsPrimary : '$' '(' .recoveryScope rules ')'
	0,                    // rhsPrimary : rhsSet
	RhsSet,               // rhsSet : 'set' '(' .recoveryScope setExpression ')'
	SetSymbol,            // setPrimary : identifier symref_Args
	SetSymbol,            // setPrimary : symref_Args
	SetCompound,          // setPrimary : '(' setExpression ')'
	SetComplement,        // setPrimary : '~' setPrimary
	0,                    // setExpression : setPrimary
	SetOr,                // setExpression : setExpression '|' setExpression
	SetAnd,               // setExpression : setExpression '&' setExpression
	0,                    // nonterm_param_list_Comma_separated : nonterm_param_list_Comma_separated ',' nonterm_param
	0,                    // nonterm_param_list_Comma_separated : nonterm_param
	NontermParams,        // nonterm_params : '<' nonterm_param_list_Comma_separated '>'
	0,                    // nonterm_param : param_ref
	InlineParameter,      // nonterm_param : identifier identifier '=' param_value
	InlineParameter,      // nonterm_param : identifier identifier
	ParamRef,             // param_ref : identifier
	SymrefArgs,           // args : '<' argument_list_Comma_separatedopt '>'
	0,                    // argument_list_Comma_separated : argument_list_Comma_separated ',' argument
	0,                    // argument_list_Comma_separated : argument
	0,                    // argument_list_Comma_separatedopt : argument_list_Comma_separated
	0,                    // argument_list_Comma_separatedopt :
	ArgumentVal,          // argument : param_ref ':' param_value
	ArgumentVal,          // argument : param_ref
	ArgumentTrue,         // argument : '+' param_ref
	ArgumentFalse,        // argument : '~' param_ref
	ParamType,            // param_type : 'flag'
	ParamType,            // param_type : 'param'
	0,                    // param_value : literal
	0,                    // param_value : param_ref
	0,                    // predicate_primary : param_ref
	PredicateNot,         // predicate_primary : '!' param_ref
	PredicateEq,          // predicate_primary : param_ref '==' literal
	PredicateNotEq,       // predicate_primary : param_ref '!=' literal
	0,                    // predicate_expression : predicate_primary
	PredicateAnd,         // predicate_expression : predicate_expression '&&' predicate_expression
	PredicateOr,          // predicate_expression : predicate_expression '||' predicate_expression
	0,                    // expression : literal
	0,                    // expression : symref_Args
	Array,                // expression : '[' expression_list_Comma_separated ',' ']'
	Array,                // expression : '[' expression_list_Comma_separated ']'
	Array,                // expression : '[' ',' ']'
	Array,                // expression : '[' ']'
	0,                    // expression : syntax_problem
	0,                    // expression_list_Comma_separated : expression_list_Comma_separated ',' expression
	0,                    // expression_list_Comma_separated : expression
	0,                    // rawTypeopt : rawType
	0,                    // rawTypeopt :
}

// set(follow ERROR) = REM, COLONCOLON, OR, SEMICOLON, DOT, COMMA, RBRACK, LPAREN, LPARENQUESTASSIGN, MINUSGT, RPAREN, RBRACE, LT, DOLLAR, ERROR, ID, SEPARATOR, SET, ASSERT, BRACKETS, CLASS, EMPTY, EXPECT, EXPECTMINUSRR, EXPLICIT, EXTEND, FLAG, GENERATE, GLOBAL, INJECT, INLINE, INPUT, INTERFACE, LALR, LANGUAGE, LAYOUT, LEFT, LEXER, LOOKAHEAD, NOMINUSEOI, NONASSOC, NONEMPTY, PARAM, PARSER, PREC, RIGHT, CHAR_S, SHIFT, SPACE, CHAR_X, CODE
var afterErr = []token.Type{
	8, 9, 10, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 36, 40, 41, 45, 46, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
}
