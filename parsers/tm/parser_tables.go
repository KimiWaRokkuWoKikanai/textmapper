// generated by Textmapper; DO NOT EDIT

package tm

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/tm/token"
)

var recoveryScopeStates = map[int]bool{
	108: true,
	152: true,
	187: true,
	188: true,
	240: true,
	381: true,
}

var tmNonterminals = [...]string{
	"identifier",
	"identifier_Keywords",
	"integer_literal",
	"string_literal",
	"boolean_literal",
	"literal",
	"pattern",
	"command",
	"syntax_problem",
	"file",
	"import__optlist",
	"option_optlist",
	"header",
	"lexer_section",
	"parser_section",
	"import_",
	"option",
	"symref",
	"symref_Args",
	"rawType",
	"lexer_parts",
	"lexer_part",
	"lexer_part_OrSyntaxError",
	"named_pattern",
	"start_conditions_scope",
	"start_conditions",
	"stateref_list_Comma_separated",
	"lexeme",
	"lexeme_attrs",
	"lexeme_attribute",
	"lexer_directive",
	"lexer_state_list_Comma_separated",
	"stateref",
	"lexer_state",
	"grammar_parts",
	"grammar_part",
	"grammar_part_OrSyntaxError",
	"nonterm",
	"assoc",
	"param_modifier",
	"template_param",
	"directive",
	"identifier_list_Comma_separated",
	"inputref_list_Comma_separated",
	"inputref",
	"references",
	"rules",
	"rule0",
	"predicate",
	"rhsSuffix",
	"reportClause",
	"reportAs",
	"rhsParts",
	"rhsPart",
	"rhsPart_OrSyntaxError",
	"lookahead_predicate_list_And_separated",
	"rhsLookahead",
	"lookahead_predicate",
	"rhsStateMarker",
	"rhsAnnotated",
	"rhsAssignment",
	"rhsOptional",
	"rhsCast",
	"listSeparator",
	"rhsPrimary",
	"rhsSet",
	"setPrimary",
	"setExpression",
	"annotation_list",
	"annotations",
	"annotation",
	"nonterm_param_list_Comma_separated",
	"nonterm_params",
	"nonterm_param",
	"param_ref",
	"args",
	"argument_list_Comma_separated",
	"argument_list_Comma_separatedopt",
	"argument",
	"param_type",
	"param_value",
	"predicate_primary",
	"predicate_expression",
	"expression",
	"expression_list_Comma_separated",
	"rawTypeopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmDefGoto = []int32{
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
}

var tmGoto = []int32{
	-1, 355, 5179, 130, 3815, 4085, -281, 3864, 3960, 626, 627, 547, 631, 326,
	30, 550, 571, 1797, 1880, -12, 144, 223, 163, -103, -87, -83, 327, -70, -313,
	218, -60, -270, 172, -147, 438, 439, 356, 159, 363, 364, 156, 206, 166, 286,
	78, 217, 5253, 53, 5267, 4889, 1978, 314, 5152, 5213, 145, 577, 4956, 417,
	5085, 5098, 4861, 4317, 4441, 506, 4505, 4168, -183, 13, 4533, 4678, 4263,
	599, 445, 453, 1438, 175, 498, 500, 339, 215, -137, 131, 178, -82, 532, -98,
}

var tmDefAct = []int32{
	-1, -1, -1, 91, -1, 0, 10, 1, 23, 11, 21, 22, 14, -1, 17, 9, 13, 27, 2, 5,
	24, 30, 29, 28, 6, 31, 15, 18, 8, 12, 16, 32, 3, 7, 19, 4, 25, 20, -1, -1,
	-1, 279, 33, 69, 67, 70, 68, 71, 66, 43, 34, 56, 44, 54, 55, 47, 59, 50, 42,
	46, 60, 35, 38, 57, 63, 62, 61, 39, 64, 48, 51, 41, 45, 49, 65, 36, 40, 52,
	37, 58, 53, -1, -1, 81, 26, -1, 283, -1, -1, -1, -1, 104, -1, -1, -1, 278,
	-1, 95, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 103, 237,
	225, 262, -1, 207, -1, -1, 223, -1, 234, 239, 238, 236, 251, 253, 256, 258,
	269, -1, -1, -1, -1, 285, 287, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	73, -1, -1, -1, -1, -1, -1, 88, 92, 72, -1, 75, 74, 103, 77, 76, 78, 311,
	317, 312, 281, -1, -1, -1, -1, 250, -1, 290, -1, 308, -1, -1, -1, -1, 101,
	249, -1, 246, -1, -1, -1, -1, -1, 102, -1, 177, -1, 215, -1, 221, 241, 244,
	-1, 219, 235, 243, 242, 240, 257, 267, 266, -1, 252, -1, -1, 231, -1, -1,
	286, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1,
	-1, -1, -1, 84, -1, 86, -1, 316, 319, -1, 179, -1, 227, 228, 305, -1, -1, -1,
	226, -1, 263, -1, -1, 248, 247, -1, -1, -1, -1, -1, 272, 275, -1, 254, -1,
	-1, -1, -1, -1, 293, 255, 208, 213, -1, 211, 217, 260, 259, 200, -1, 233, -1,
	284, 175, -1, 176, 173, -1, -1, -1, 169, -1, -1, -1, -1, -1, -1, -1, 94, 98,
	-1, -1, -1, -1, 105, 107, 110, -1, 108, 109, -1, -1, 153, 155, 156, 157, 100,
	82, 315, -1, 314, 178, 306, 307, -1, -1, 205, -1, -1, 245, 268, -1, 274, 271,
	-1, 270, -1, 298, 299, -1, -1, 291, 209, -1, 229, 302, 303, 288, 174, 171,
	-1, 172, 167, -1, 168, 165, -1, -1, -1, -1, -1, -1, -1, 151, -1, 121, -1,
	320, -1, 115, 106, 111, 114, 112, 113, -1, -1, -1, -1, -1, 183, 300, -1, 184,
	-1, -1, -1, 180, 185, 182, 301, 181, -1, -1, -1, 161, 154, 158, 159, 160,
	313, 318, 206, 265, 264, 273, -1, -1, 296, 292, 199, 170, 166, 163, -1, 164,
	-1, 152, -1, 150, -1, 118, -1, 119, 79, 116, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 202, -1, -1, -1, -1, 162, -1, 147, -1, 148, 120, -1, -1, 140,
	117, -1, -1, -1, 196, 197, -1, -1, 203, 191, -1, 192, 190, -1, -1, 189, 146,
	149, 143, 145, 144, -1, -1, 138, -1, -1, 130, 193, 194, -1, 198, 201, -1,
	187, -1, 142, 134, -1, 136, -1, 128, -1, 195, -1, 188, 132, 124, -1, 126,
	186, 122, -1, -1, -1, -1,
}

const tmActionBase = -82

var tmAction = []int32{
	-58, 3381, 1810, -82, 3421, -82, -82, -82, -82, -82, -82, -82, -82, 2376,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -4, 2436, 3872, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -14, 2516, -82, -82, 2234, -82, 9, 441,
	3872, 3872, -82, 155, 61, 99, -82, 10, -82, 1810, 3461, 2858, -82, 1888, 441,
	95, -66, 3872, 3509, 514, 3557, 181, 282, -82, 4198, -82, -82, -82, 256, -82,
	806, 14, -82, 587, -82, -82, -82, -82, -82, -82, 3050, 3637, -82, 2917, 85,
	3084, 87, -82, -82, 441, 425, 441, 441, 320, 466, 441, 351, 467, 177, 462,
	-82, 197, 423, 109, 515, 290, 368, -82, -82, -82, 1047, -82, -82, 4915, -82,
	-82, -82, -82, -82, -82, -82, 361, 441, 3872, 3872, -82, 3872, -82, 133, -82,
	196, 263, 660, 3872, -82, -82, 267, -82, 514, 3143, 2917, 2970, 2917, -82,
	-6, -82, 101, -82, 733, -82, -82, -82, 105, -82, -82, -82, -82, -82, -82,
	-82, -82, 2556, -82, 3872, 3872, -82, 186, 3872, -82, 373, 441, 383, 386,
	441, 510, 441, 390, 441, 516, 441, 441, 384, 521, 517, 525, -82, 3215, 3287,
	1888, 385, -82, 469, -82, 524, -82, -82, 147, -82, 393, -82, -82, -82, 91,
	91, 3509, -82, 3509, -82, 3872, 522, -82, -82, 3557, 348, 3143, 3143, 2626,
	-82, -82, 102, -82, 3872, 3872, 187, 278, 520, -82, -82, -82, -82, 139, -82,
	-82, -82, -82, -82, 68, -82, 2556, -82, -82, 394, -82, -82, 396, 441, 400,
	-82, 403, 441, 404, 410, 441, 530, 441, -82, -82, 168, 3671, 230, 2314, -82,
	-82, -82, 3712, -82, -82, 261, 2706, -82, -82, -82, -82, -82, -82, -82, 1447,
	-82, -82, -82, -82, 239, 272, -82, 3768, 332, -82, -82, 227, -82, -82, 3143,
	-82, 3143, -82, -82, 2556, 3338, -82, -82, 3872, -82, -82, -82, -82, -82,
	-82, 413, -82, -82, 414, -82, -82, 420, 441, 424, 3872, 3872, 3872, 526, -82,
	395, -82, 468, -82, 534, -82, -82, -82, -82, -82, -82, 3215, 357, 182, 553,
	553, -82, -82, 3872, -82, 3872, 3872, 3872, -82, -82, -82, -82, -82, 3872,
	-31, 3872, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 231, 325,
	-82, -82, -82, -82, -82, -82, 426, -82, 3872, -82, 431, -82, 437, -82, 3872,
	-82, -82, -82, 1127, 2778, 539, 513, 513, 546, 583, 593, 584, 6, 444, -82,
	450, 3833, 3872, 313, -82, 591, -82, 3872, -82, -82, 180, 887, -82, -82,
	1207, 597, 598, -82, -82, 513, 601, -82, -82, 3872, -82, -82, 456, 2556, -82,
	-82, -82, -82, -82, -82, 594, 1287, -82, 1527, 968, -82, -82, -82, 602, -82,
	-82, 2556, -82, 605, -82, -82, 1608, -82, 1368, -82, 1689, -82, 606, -82,
	-82, -82, 1770, -82, -82, -82, 622, 625, -82, -82,
}

const tmTableLen = 5669

var tmTable = []int16{
	38, -99, -107, 85, 224, 267, -4, -100, -174, 224, -108, -175, 87, -109, -90,
	-110, -111, -91, 224, -91, 169, 204, -92, 204, 222, -389, 92, -105, -146,
	222, -112, -6, -91, -91, -85, -7, -92, -91, 222, 96, -113, -398, -8, -9, -10,
	-11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -114,
	-467, -93, 244, 230, -142, 267, 338, 142, 230, 145, -351, 230, 113, 133, 134,
	-93, 431, 230, -151, -160, 232, 424, 426, 150, 153, 232, 162, 113, 232, -218,
	174, 176, 113, 183, 232, -215, 214, -342, -173, -219, 218, 214, -143, 113,
	456, 218, 113, -91, -214, -91, 214, -343, -215, -91, 218, 156, 113, 311, 215,
	-162, 230, -344, 113, -163, 113, 113, 118, 481, 113, 304, 483, -253, -254,
	312, 210, 353, 455, 313, 304, 210, 322, 118, 267, 162, 267, 509, 118, -91,
	210, -327, 314, 494, -328, 304, 498, 113, 183, 183, -140, 176, 315, -237,
	482, -91, -93, 113, 183, -238, 504, 239, 241, 113, 265, 162, 176, 162, 118,
	113, 118, 118, -231, 113, 118, -289, -151, -91, 268, -189, 289, 297, -347,
	377, -255, 414, 162, 374, 284, 286, 289, 297, 134, -256, -367, 113, 425, 425,
	113, 378, 113, 118, 113, 313, 113, 113, 151, -477, -257, 164, -437, 308, 38,
	162, -342, 178, 379, 118, 276, -374, 407, -368, -478, 277, -369, 321, 380,
	310, -413, 176, -438, 176, 276, 183, -93, -479, 310, 183, -344, 265, 265,
	162, -344, -195, 203, 323, 176, 176, -196, 118, -195, -257, 118, 337, 118,
	311, 118, 233, 118, 118, 309, 434, 179, 176, -258, 192, 164, 85, -262, 309,
	113, 312, -348, 373, 113, 313, -154, 113, -263, 113, -190, 474, 294, 369,
	309, 308, -385, -93, 314, 382, -386, -387, -388, 38, -389, -390, -391, -392,
	315, -393, -394, 162, -473, 203, -395, -474, -396, 377, -397, 183, -398, 491,
	277, -399, 192, -224, 265, 164, 265, 203, -91, 176, 176, 378, 118, 416, 277,
	313, 118, 500, 412, 118, 413, 118, 81, -195, 277, -411, -412, 113, 379, 183,
	423, 423, 164, 87, -228, 373, -195, -338, 380, -91, 321, -248, -242, 285,
	309, 308, 164, 164, -195, 178, 83, 178, 439, -291, 183, 183, 284, 320, -195,
	-242, 319, -195, 183, -293, 447, -195, -294, -303, -195, -195, -298, -195,
	-91, -329, -356, -195, -357, -430, -195, -195, -359, 118, 164, -360, -362,
	-195, 183, -431, -195, -195, -363, 155, 369, -419, -420, -195, 330, 308, 331,
	-195, -421, -195, -93, -236, -423, 192, -450, 321, -221, 183, 470, -452, 214,
	-453, -107, 423, 224, -454, 148, -453, 164, 224, -108, 310, -468, -109, -469,
	-110, -111, -91, -470, 183, -351, -491, 443, 176, -492, 376, 404, 333, 164,
	403, -112, -6, 371, 238, -85, -7, 94, -226, -230, -234, -113, 176, -8, -9,
	-10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39,
	-114, -107, 405, 224, 433, 186, -239, -296, 275, -108, 400, -306, -109, -300,
	-110, -111, -91, 224, -305, -307, 147, -238, 136, -326, 488, -336, -349,
	-365, -432, -112, -6, -434, -429, -85, -7, -160, -460, 444, -113, -113, -463,
	-8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-39, -114, -107, 376, 220, -464, 350, 453, 164, 220, -108, 310, -465, -475,
	-91, -110, -111, -91, 220, -486, -487, 446, 445, -489, -501, -494, 164, -503,
	-508, -512, -112, -6, -513, 508, -85, -7, 100, 82, 3, 101, -113, 370, -8, -9,
	-10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39,
	-114, -107, 288, 220, 157, 478, 402, 317, 318, -108, 442, 335, 398, 399,
	-110, -111, -91, 220, 415, 185, 258, 273, 135, 274, 245, 0, 0, 0, 0, -112,
	-6, 0, 0, -85, -7, 0, 0, 0, -259, -113, 0, -8, -9, -10, -11, -12, -13, -14,
	-86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -114, -107, 0, 212, 0, 0,
	0, 0, 212, -108, 0, 0, 0, 0, -110, -111, -91, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -112, -6, 0, 0, -85, -7, 0, 0, 0, 0, -113, 0, -8, -9, -10, -11, -12,
	-13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -114, -107, 0,
	216, 0, 0, 0, 0, 216, -108, 0, 0, 0, 0, -110, -111, -91, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -112, -6, 0, 0, 0, -7, 0, 0, 0, 0, -113, 0, -8, -9, -10,
	-11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -114,
	139, 0, 0, -160, 0, 0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -456,
	0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 139, 0, 0, 0,
	0, 0, 0, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, -114, 129, 0, 0, -160, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -456, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, -114, -151, -160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -244, 0, -161, -245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -85, -7, 0, -162, 0, 0, 0, -163, -8, -9, -10, -11,
	-12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, 141, 0, 0,
	0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -456, 0, 0, 0, 141,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 131, -432, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-456, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 131, 0,
	0, 0, 0, 0, 0, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 135, -432, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -456, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, -114, 125, 0, 0, 0, 0, 0, 0, 0,
	125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -456, 0, 0, 0, 125, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, -114, -151,
	-160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, -408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, -7, 0, -162, 0, 0, 0, -163,
	-8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-39, 137, 137, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0,
	0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, -114, 133, 0, 0, 0, 0, 250, 0, 0, 133, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 133, 0, 0, 0, 0, 137, 0, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, -114, 127, 0, 177, 0, 177, 0, 0,
	0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 344, 0, 0, 0, 0, 127, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, -114,
	123, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 352, 272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0,
	0, 0, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, -114, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68,
	-69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -151,
	-160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, -161, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, -85, -7, 0, -162, 0, 0, 0,
	-163, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -39, 116, 248, 249, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 168, 116, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 93, 0, 116, 0, 116, 116, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 332,
	0, 0, 0, 184, 0, 0, 116, 0, 0, 0, 104, 121, 116, 266, 116, 139, 116, 143,
	116, 146, 0, 0, 116, 0, 0, 0, 121, 0, 0, 0, 0, 121, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 196, 198, 116, 202, 0, 116, 0, 116, 0, 116, 0, 116, 116, 0, 0, 0, 0, 0,
	0, 121, 168, 121, 121, 223, 0, 121, 227, 0, 231, 0, 0, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 266, 339, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 422, 0, 0, 121, 0, 0, 0, 0, 0, 121, 0, 278, 116, 280, 0, 0,
	116, 281, 0, 116, 0, 116, 0, 0, 0, 440, 441, 0, 0, 0, 0, 0, 0, 332, 0, 121,
	0, 0, 121, 0, 121, 0, 121, 168, 121, 121, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 266, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 116, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 348, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 0, 0, 0, 282, 282, 121, 0, 0, 282, 121, 0, 0, 121, 282, 121, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 96, 0, 0, 0, 0, 0, 0, 0, -308, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -309, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, -7, 0, 0, 0,
	0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -39, 26, 0, 0, 0, 0, 26, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -7, 464, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -39, 26, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, -6, 0, 0, 0, 280, 0, 0, 0, 0, 280, 0, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 93, -151, -160, -101, 0, 0, 0, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 0, -7, 0, -162, 0, 0, 0, -163,
	-8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-39, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, -192, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12,
	-13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, 97, 0, 0, 0, 0,
	0, 0, 0, -318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -6, 0, 0, -85, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -459, -309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -85, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14,
	-86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	-154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -85, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14,
	-86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, -7, 0, 0, 0, 0, -113, 0, -8, -9, -10,
	-11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, 295, 0,
	-272, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10,
	-11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -1, -1,
	-1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0,
	0, 0, -1, -1, -1, -1, -1, -1, -209, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, -1,
	-1, -1, 0, 0, -1, 0, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, -1, -8, -9, -10, -11, -12, -13,
	-14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -266, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9,
	-10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39,
	-308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13,
	-14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -39, -272, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0,
	-7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, -39, -6, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10,
	-11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -85,
	-7, -151, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, -39, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12,
	-13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -177, 0, 0, 0, 0,
	0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -39, -184, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0,
	0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -39, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1,
	0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -210, -211, -1, 0, -1, -1, -1,
	-1, 0, 0, -1, -1, 0, 0, -212, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, -1,
	-8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-39, -383, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86,
	-16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -8, -9, -10, -11, -12, -13, -14,
	-86, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0,
	-8, -9, -10, -11, -12, -13, -14, -86, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-39, -7, 0, 0, 0, 165, 0, 0, -8, -9, -10, -11, -12, -13, -14, -86, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -39, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 114, 0, 0, 0, 0, 114, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 114, 114, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 0, 0, 115, 0, 0, 114, 165, 0, 0, 0, 0,
	114, 0, 0, 154, 199, 167, 115, 0, 0, 165, 165, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 114, 0, 0, 114, 0, 114, 0, 114, 0, 114, 114, 0, 0, 0, 0,
	115, 0, 115, 115, 165, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 165, 200, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 115, 0, 0, 0, 200, 114, 0, 165, 0, 114, 0, 0,
	114, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 115, 0, 115, 0, 115,
	166, 115, 115, 0, 0, 0, 0, 0, 0, 0, 167, -1, -1, -1, -1, -1, -1, -1, -1, 0,
	-1, 0, -1, -191, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -192, -1, 0,
	114, -193, 0, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, 166, -1, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 131, 0, 115, 0, 0, 115, 0, 115, 41, 0, 0, 0, 0,
	375, 0, 131, 0, 0, 0, 0, 131, 401, 0, -1, 0, 0, 0, 0, 0, 167, 165, 131, 0, 0,
	131, 0, 0, 0, 0, 282, 0, 0, 0, 0, 131, 0, 95, 0, 165, 0, 131, 0, 131, 131, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 480, 0, 0, 166, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 329, 0, 131, 0, 0, 0, 493, 0, 495, 497, 0, 0, 131, 0, 41, 0, 0, 0,
	131, 0, 131, 502, 131, 503, 131, 505, 0, 0, 131, 41, 0, 507, 0, 0, 41, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 41, 0, 131, 0, 0, 131, 0, 131, 375, 131,
	0, 131, 131, 0, 0, 0, 41, 0, 41, 41, 128, 0, 41, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 128, 0, 0, 0, 0, 351, 0, 0, 0, 41, 0, 128, 0, 0,
	128, 0, 0, 0, 0, 41, 0, 0, 0, 0, 128, 41, 0, 0, 0, 0, 128, 41, 128, 128, 0,
	41, 128, 131, 0, 0, 0, 131, 0, 0, 131, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 41, 0, 41, 128, 41, 0, 41, 41, 0, 0, 0, 0, 0, 128, 41, 0, 0, 0, 0,
	128, 0, 269, 0, 276, 0, 128, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 131, 0, 0, 39, 0, 128, 0, 0, 128, 0, 128, 0, 128, 129, 128,
	128, 0, 0, 129, 0, 0, 0, 0, 0, 0, 351, 41, 0, 0, 129, 41, 0, 129, 41, 0, 41,
	0, 0, 0, 0, 0, 0, 129, 351, 0, 0, 0, 0, 129, 41, 129, 129, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 460, 0, 0, 0, 130, 0, 0,
	128, 129, 130, 0, 128, 0, 0, 128, 0, 128, 39, 129, 0, 130, 0, 41, 130, 129,
	0, 129, 486, 129, 0, 129, 0, 39, 130, 129, 0, 0, 39, 0, 130, 0, 130, 130, 0,
	0, 130, 0, 0, 39, 0, 0, 39, 0, 0, 0, 0, 129, 0, 0, 129, 0, 129, 0, 129, 0,
	129, 129, 39, 0, 39, 39, 0, 130, 39, 0, 40, 128, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 130, 0, 130, 0, 130, 0, 130, 0, 0, 0, 130, 0, 39, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 0, 0, 0, 0, 39, 0, 0, 0, 130, 0, 39, 130, 0, 130, 39, 130, 0,
	130, 130, 129, 0, 0, 0, 129, 0, 0, 129, 0, 129, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	0, 39, 0, 39, 0, 39, 0, 39, 39, 0, 0, 0, 132, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 130,
	132, 0, 0, 130, 129, 0, 130, 0, 130, 0, 0, 0, 0, 0, 0, 0, 132, 0, 132, 132,
	0, 0, 132, 0, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 39, 0, 39, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 39, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 132, 0,
	0, 130, 0, 0, 132, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 132, 0, 0, 132, 0, 132, 0, 132, 0, 132, 132, 0, 0, 0, 0,
	0, 0, 40, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0,
	-1, -1, 0, 0, 0, 0, 0, -1, -192, -1, 0, 0, -1, 0, -1, -1, 127, -1, 0, 0, -1,
	-1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 127, 0, 0, 0, 0, 127, 0, 0, 132, 0, 0, 0,
	132, 120, 0, 132, 127, 132, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 120, 211, 0, 40,
	-1, 120, 0, 127, 0, 127, 127, 0, 0, 127, 0, 0, 195, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 120, 120, 0, 127, 120, 0, 0, 0, 0, 0,
	0, 0, 132, 127, 0, 124, 0, 0, 0, 127, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 124,
	120, 0, 0, 0, 124, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 124, 120, 0, 204, 0, 127,
	0, 120, 127, 0, 127, 279, 127, 0, 127, 127, 0, 0, 0, 124, 0, 124, 124, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 120, 0, 120, 0, 120, 0, 120, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 204, 0, 127, 0, 0, 0, 127, 0, 0, 127, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 124, 0, 0, 124, 0, 124, 0, 124, 120, 124, 124, 126,
	120, 125, 0, 120, 0, 120, 125, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 125, 0, 126,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 206, 0, 0, 125, 127, 125, 125, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 126, 0, 126, 126, 122, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 120, 0, 124, 122, 125, 124, 0, 124, 181, 0, 0, 0, 0, 0, 205, 0, 0,
	126, 0, 197, 125, 0, 0, 0, 0, 0, 125, 206, 0, 163, 205, 0, 0, 126, 0, 0, 0,
	0, 122, 126, 122, 122, 0, 206, 122, 0, 0, 0, 0, 123, 0, 0, 125, 0, 0, 125, 0,
	125, 0, 125, 0, 125, 125, 0, 123, 126, 0, 124, 126, 123, 126, 122, 126, 0,
	126, 126, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 163, 122, 0, 117, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 123, 0, 123, 123, 119, 170, 123, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 122, 0, 0, 122, 119, 122, 0, 122, 125, 122, 122, 0, 125, 123, 0,
	125, 0, 125, 163, 0, 218, 126, 220, 221, 0, 126, 225, 0, 126, 123, 126, 0, 0,
	0, 119, 123, 119, 119, 0, 0, 119, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 163, 163, 123, 0, 0, 123, 0, 123, 119, 123, 262, 123, 123, 0,
	0, 0, 122, 0, 125, 0, 122, 0, 0, 122, 119, 122, 0, 0, 0, 0, 119, 126, 0, 0,
	0, 0, 163, 0, 0, 0, 0, 0, 290, 0, 0, 293, 0, 295, 0, 297, 0, 299, 300, 0, 0,
	0, 119, 0, 0, 119, 0, 119, 0, 119, 0, 119, 119, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 123, 0, 0, 0, 123, 0, 0, 123, 122, 123, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 0, 0, 0, 359,
	0, 0, 362, 0, 364, 0, 0, 0, 0, 119, 0, 437, 438, 119, 0, 0, 119, 0, 119, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 0, 0, 163,
}

var tmCheck = []int16{
	1, 15, 8, 4, 10, 188, 64, 21, 74, 15, 16, 77, 13, 19, 18, 21, 22, 23, 24, 23,
	102, 15, 26, 17, 10, 56, 38, 18, 18, 15, 36, 37, 23, 23, 40, 41, 26, 23, 24,
	40, 46, 72, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 69, 80,
	159, 10, 18, 263, 264, 94, 15, 96, 17, 18, 88, 89, 90, 80, 372, 24, 2, 3, 10,
	366, 367, 99, 100, 15, 102, 103, 18, 17, 106, 107, 108, 109, 24, 42, 10, 10,
	18, 27, 10, 15, 18, 119, 432, 15, 122, 23, 38, 23, 24, 24, 42, 23, 24, 100,
	132, 235, 134, 43, 147, 34, 138, 47, 140, 141, 88, 455, 144, 11, 458, 13, 14,
	235, 10, 287, 432, 235, 20, 15, 237, 103, 340, 159, 342, 1, 108, 23, 24, 17,
	235, 479, 20, 35, 482, 171, 172, 173, 18, 175, 235, 67, 458, 23, 80, 181,
	182, 73, 496, 154, 155, 187, 188, 189, 190, 191, 138, 193, 140, 141, 18, 197,
	144, 12, 2, 23, 188, 21, 17, 17, 18, 309, 11, 345, 210, 308, 212, 213, 27,
	27, 216, 20, 49, 219, 366, 367, 222, 309, 224, 171, 226, 309, 228, 229, 99,
	50, 35, 102, 51, 235, 236, 237, 10, 107, 309, 187, 10, 12, 325, 76, 65, 193,
	79, 18, 309, 11, 24, 253, 71, 255, 24, 257, 80, 78, 20, 261, 34, 263, 264,
	265, 34, 10, 122, 238, 270, 271, 15, 219, 10, 35, 222, 263, 224, 381, 226,
	150, 228, 229, 11, 382, 107, 287, 24, 113, 159, 0, 24, 20, 294, 381, 17, 308,
	298, 381, 9, 301, 34, 303, 21, 451, 27, 307, 35, 309, 48, 80, 381, 313, 52,
	53, 54, 317, 56, 57, 58, 59, 381, 61, 62, 325, 12, 181, 66, 15, 68, 433, 70,
	333, 72, 471, 10, 75, 162, 18, 340, 210, 342, 197, 23, 345, 346, 433, 294,
	349, 24, 433, 298, 489, 340, 301, 342, 303, 2, 10, 34, 28, 29, 363, 433, 365,
	366, 367, 237, 0, 18, 382, 10, 24, 433, 23, 18, 15, 9, 212, 235, 381, 251,
	252, 10, 253, 0, 255, 388, 15, 390, 391, 392, 236, 10, 9, 236, 10, 398, 15,
	400, 10, 15, 18, 10, 10, 15, 10, 23, 15, 15, 10, 15, 17, 10, 10, 15, 363,
	287, 15, 15, 10, 422, 27, 10, 10, 15, 100, 428, 15, 15, 10, 253, 433, 255,
	10, 15, 10, 80, 15, 15, 265, 15, 236, 18, 445, 446, 15, 133, 17, 8, 451, 10,
	15, 98, 17, 325, 15, 16, 235, 15, 19, 17, 21, 22, 23, 15, 467, 17, 12, 391,
	471, 15, 309, 317, 257, 345, 317, 36, 37, 307, 154, 40, 41, 38, 18, 18, 24,
	46, 489, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 317, 10,
	381, 109, 12, 18, 190, 16, 316, 15, 19, 18, 21, 22, 23, 24, 18, 15, 96, 73,
	90, 20, 467, 24, 27, 18, 81, 36, 37, 18, 27, 40, 41, 3, 18, 392, 46, 46, 15,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 433, 10, 15, 285,
	428, 471, 15, 16, 381, 12, 15, 23, 21, 22, 23, 24, 15, 15, 399, 398, 15, 15,
	24, 489, 15, 15, 0, 36, 37, 0, 0, 40, 41, 82, 3, 0, 82, 46, 307, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 216, 10, 100, 454, 317, 236,
	236, 16, 391, 261, 316, 316, 21, 22, 23, 24, 346, 109, 181, 190, 90, 190,
	159, -1, -1, -1, -1, 36, 37, -1, -1, 40, 41, -1, -1, -1, 45, 46, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1,
	15, 16, -1, -1, -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 36, 37, -1, -1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1,
	-1, -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36,
	37, -1, -1, -1, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 19, 20, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, 43, -1, -1,
	-1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1,
	-1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1,
	-1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	81, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 0, 81, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 90, -1, -1, -1, -1, -1, -1, 8,
	9, -1, -1, -1, -1, -1, -1, -1, -1, 107, -1, -1, -1, -1, -1, -1, 25, 26, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1,
	-1, 175, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 190, -1, -1,
	-1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41,
	-1, -1, -1, -1, 216, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, 253, -1, 255, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 270, 271, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	287, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1,
	345, 346, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 2, 3, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 109, 19, -1, 471, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 489, 40, 41, -1, 43, -1, -1, -1, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, 172, 173, -1, -1, -1,
	-1, -1, -1, -1, -1, 182, -1, -1, 102, 103, -1, -1, -1, -1, 108, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 132, -1, -1, -1, 38, -1, 138, -1, 140, 141, -1, -1, 144, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 171, -1, -1, 257, -1, -1, -1, 261, -1, -1, 181, -1, -1, -1, 87,
	88, 187, 188, 189, 92, 191, 94, 193, 96, -1, -1, 197, -1, -1, -1, 103, -1,
	-1, -1, -1, 108, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, 119, 120, 219, 122,
	-1, 222, -1, 224, -1, 226, -1, 228, 229, -1, -1, -1, -1, -1, -1, 138, 237,
	140, 141, 142, -1, 144, 145, -1, 147, -1, -1, -1, -1, 333, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 263, 264, 265, -1, -1, -1, 171, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 181, -1, -1, 365, -1, -1, 187, -1, -1, -1, -1, -1,
	193, -1, 195, 294, 197, -1, -1, 298, 201, -1, 301, -1, 303, -1, -1, -1, 390,
	391, -1, -1, -1, -1, -1, -1, 398, -1, 219, -1, -1, 222, -1, 224, -1, 226,
	325, 228, 229, 230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 422, 340, -1,
	342, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 445, 363, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 279, -1,
	-1, -1, -1, -1, -1, 467, -1, -1, -1, -1, -1, 36, 37, 294, -1, -1, 41, 298,
	-1, -1, 301, 46, 303, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	-1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 26, 363, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 18, -1, -1, -1, -1, 23, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 41, 440, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 36, 37, -1, -1, -1, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, 2, 3, 44, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, 41, -1, 43, -1, -1, -1,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 10, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, 26, -1, -1, -1, -1, -1, -1, -1,
	34, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 37, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 21, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41, -1, -1, -1, -1, 46, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 27, -1, 29, -1, -1, -1, 33,
	-1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12,
	13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, -1, -1, 38, 39, -1, -1, 42, 43, 44, -1, -1, 47, -1, -1, -1,
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 81, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33,
	-1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, 41,
	-1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	29, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 37, -1, -1, -1, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 40,
	41, 2, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 32, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, -1, -1, -1, -1, -1,
	-1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1,
	17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, -1, 32, 33, 34, 35,
	-1, -1, 38, 39, -1, -1, 42, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 41, -1, -1, -1, -1, -1, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 39, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, 102, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 4, -1, -1, 103, -1, -1, -1, -1, 108, -1, 159, -1, -1,
	-1, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 138, -1, 140, 141, -1, -1, 144, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181, -1, -1, 88, -1, -1,
	187, 237, -1, -1, -1, -1, 193, -1, -1, 100, 197, 102, 103, -1, -1, 251, 252,
	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, 219, -1, -1,
	222, -1, 224, -1, 226, -1, 228, 229, -1, -1, -1, -1, 138, -1, 140, 141, 287,
	-1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, 325,
	181, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, 193, -1, -1, -1, 197, 294,
	-1, 345, -1, 298, -1, -1, 301, -1, 303, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 219, -1, -1, 222, -1, 224, -1, 226, 102, 228, 229, -1, -1, -1, -1,
	-1, -1, -1, 237, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1,
	17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, -1, 363, 30, -1, 32, 33, 34, 35,
	-1, -1, 38, 39, -1, -1, -1, 43, 44, -1, 159, 47, -1, -1, -1, -1, -1, -1, -1,
	-1, 294, -1, 88, -1, 298, -1, -1, 301, -1, 303, 1, -1, -1, -1, -1, 309, -1,
	103, -1, -1, -1, -1, 108, 317, -1, 81, -1, -1, -1, -1, -1, 325, 471, 119, -1,
	-1, 122, -1, -1, -1, -1, 210, -1, -1, -1, -1, 132, -1, 39, -1, 489, -1, 138,
	-1, 140, 141, -1, -1, 144, -1, -1, -1, -1, -1, -1, 455, -1, -1, 237, 363, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251, 252, -1, 171, -1, -1, -1,
	479, -1, 481, 482, -1, -1, 181, -1, 88, -1, -1, -1, 187, -1, 189, 494, 191,
	496, 193, 498, -1, -1, 197, 103, -1, 504, -1, -1, 108, 287, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 119, -1, -1, 122, -1, 219, -1, -1, 222, -1, 224, 433,
	226, -1, 228, 229, -1, -1, -1, 138, -1, 140, 141, 88, -1, 144, -1, -1, 325,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 103, -1, -1, -1, -1, 108, -1, -1, -1, -1,
	345, -1, -1, -1, 171, -1, 119, -1, -1, 122, -1, -1, -1, -1, 181, -1, -1, -1,
	-1, 132, 187, -1, -1, -1, -1, 138, 193, 140, 141, -1, 197, 144, 294, -1, -1,
	-1, 298, -1, -1, 301, -1, 303, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 219,
	-1, -1, 222, -1, 224, 171, 226, -1, 228, 229, -1, -1, -1, -1, -1, 181, 236,
	-1, -1, -1, -1, 187, -1, 189, -1, 191, -1, 193, -1, -1, -1, 197, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, 363, -1, -1, 1, -1, 219,
	-1, -1, 222, -1, 224, -1, 226, 103, 228, 229, -1, -1, 108, -1, -1, -1, -1,
	-1, -1, 471, 294, -1, -1, 119, 298, -1, 122, 301, -1, 303, -1, -1, -1, -1,
	-1, -1, 132, 489, -1, -1, -1, -1, 138, 317, 140, 141, -1, -1, 144, -1, -1,
	-1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, 435, 436, -1, -1,
	-1, 103, -1, -1, 294, 171, 108, -1, 298, -1, -1, 301, -1, 303, 88, 181, -1,
	119, -1, 363, 122, 187, -1, 189, 463, 191, -1, 193, -1, 103, 132, 197, -1,
	-1, 108, -1, 138, -1, 140, 141, -1, -1, 144, -1, -1, 119, -1, -1, 122, -1,
	-1, -1, -1, 219, -1, -1, 222, -1, 224, -1, 226, -1, 228, 229, 138, -1, 140,
	141, -1, 171, 144, -1, 1, 363, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, -1,
	187, -1, 189, -1, 191, -1, 193, -1, -1, -1, 197, -1, 171, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 181, -1, -1, -1, -1, -1, 187, -1, -1, -1, 219, -1, 193, 222,
	-1, 224, 197, 226, -1, 228, 229, 294, -1, -1, -1, 298, -1, -1, 301, -1, 303,
	-1, -1, -1, -1, -1, -1, -1, 219, -1, -1, 222, -1, 224, -1, 226, -1, 228, 229,
	-1, -1, -1, 88, -1, -1, 236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103,
	-1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, -1, 294,
	122, -1, -1, 298, 363, -1, 301, -1, 303, -1, -1, -1, -1, -1, -1, -1, 138, -1,
	140, 141, -1, -1, 144, -1, -1, -1, -1, 294, -1, -1, -1, 298, -1, -1, 301, -1,
	303, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 171, 317, -1, -1, -1,
	-1, -1, -1, -1, -1, 181, -1, -1, -1, -1, -1, 187, -1, -1, 363, -1, -1, 193,
	-1, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 363, 219, -1, -1, 222, -1, 224, -1, 226, -1, 228, 229,
	-1, -1, -1, -1, -1, -1, 236, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, 11, 12, 13,
	14, -1, -1, -1, 18, 19, -1, -1, -1, -1, -1, 25, 26, 27, -1, -1, 30, -1, 32,
	33, 88, 35, -1, -1, 38, 39, -1, -1, -1, 43, 44, -1, -1, 47, -1, 103, -1, -1,
	-1, -1, 108, -1, -1, 294, -1, -1, -1, 298, 88, -1, 301, 119, 303, -1, 122,
	-1, -1, -1, -1, -1, -1, -1, -1, 103, 132, -1, 317, 81, 108, -1, 138, -1, 140,
	141, -1, -1, 144, -1, -1, 119, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 138, -1, 140, 141, -1, 171, 144, -1, -1, -1, -1,
	-1, -1, -1, 363, 181, -1, 88, -1, -1, -1, 187, -1, -1, -1, -1, -1, 193, -1,
	-1, -1, 197, 103, 171, -1, -1, -1, 108, -1, -1, -1, -1, -1, 181, -1, -1, -1,
	-1, 119, 187, -1, 122, -1, 219, -1, 193, 222, -1, 224, 197, 226, -1, 228,
	229, -1, -1, -1, 138, -1, 140, 141, -1, -1, 144, -1, -1, -1, -1, -1, -1, -1,
	219, -1, -1, 222, -1, 224, -1, 226, -1, 228, 229, -1, -1, -1, -1, -1, -1, -1,
	-1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, -1, 187,
	-1, -1, -1, -1, -1, 193, -1, -1, -1, 197, -1, 294, -1, -1, -1, 298, -1, -1,
	301, -1, 303, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, 219, -1, -1, 222, -1,
	224, -1, 226, 294, 228, 229, 88, 298, 103, -1, 301, -1, 303, 108, -1, -1, -1,
	-1, -1, -1, -1, 103, -1, -1, 119, -1, 108, 122, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 119, -1, -1, 122, -1, -1, 138, 363, 140, 141, -1, -1, 144, -1, -1,
	-1, -1, -1, -1, 138, -1, 140, 141, 88, -1, 144, -1, -1, -1, -1, -1, -1, -1,
	294, -1, 363, -1, 298, 103, 171, 301, -1, 303, 108, -1, -1, -1, -1, -1, 181,
	-1, -1, 171, -1, 119, 187, -1, -1, -1, -1, -1, 193, 181, -1, 102, 197, -1,
	-1, 187, -1, -1, -1, -1, 138, 193, 140, 141, -1, 197, 144, -1, -1, -1, -1,
	88, -1, -1, 219, -1, -1, 222, -1, 224, -1, 226, -1, 228, 229, -1, 103, 219,
	-1, 363, 222, 108, 224, 171, 226, -1, 228, 229, -1, -1, -1, -1, 119, -1, -1,
	-1, -1, -1, 159, 187, -1, 88, -1, -1, -1, 193, -1, -1, -1, -1, -1, 138, -1,
	140, 141, 88, 103, 144, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, 103,
	219, -1, -1, 222, 108, 224, -1, 226, 294, 228, 229, -1, 298, 171, -1, 301,
	-1, 303, 210, -1, 138, 294, 140, 141, -1, 298, 144, -1, 301, 187, 303, -1,
	-1, -1, 138, 193, 140, 141, -1, -1, 144, -1, -1, -1, -1, 237, -1, -1, -1, -1,
	-1, -1, -1, 171, -1, -1, -1, -1, -1, 251, 252, 219, -1, -1, 222, -1, 224,
	171, 226, 187, 228, 229, -1, -1, -1, 294, -1, 363, -1, 298, -1, -1, 301, 187,
	303, -1, -1, -1, -1, 193, 363, -1, -1, -1, -1, 287, -1, -1, -1, -1, -1, 219,
	-1, -1, 222, -1, 224, -1, 226, -1, 228, 229, -1, -1, -1, 219, -1, -1, 222,
	-1, 224, -1, 226, -1, 228, 229, -1, -1, -1, -1, -1, -1, -1, 325, -1, -1, 294,
	-1, -1, -1, 298, -1, -1, 301, 363, 303, -1, -1, -1, -1, -1, -1, -1, 345, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 294, -1, -1, -1, 298, -1, -1, 301, -1, 303, -1, -1, -1, -1, 294, -1,
	384, 385, 298, -1, -1, 301, -1, 303, -1, -1, -1, -1, -1, 363, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 363, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 363, -1, -1, -1, 455, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 471, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 482, -1, -1, -1, -1, -1, -1, 489,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 5, 4, 5, 4, 4, 3, 2, 0, 2, 0, 6, 3, 3, 3, 4, 3, 3, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 3, 3, 3, 1, 8, 7, 7, 6, 7, 6, 6, 5,
	5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 4, 3, 3, 1, 1, 1, 5, 4, 4, 3, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 1, 1,
	1, 1, 1, 1, 7, 5, 6, 4, 4, 4, 4, 5, 5, 6, 4, 4, 5, 3, 1, 3, 1, 2, 1, 1, 2, 1,
	3, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0, 1, 3, 3, 3, 5, 4, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 2, 1, 2, 1, 2, 1, 3, 3, 1, 2, 1, 3,
	3, 2, 1, 3, 5, 5, 2, 2, 4, 1, 4, 2, 1, 3, 2, 1, 3, 3, 2, 1, 1, 4, 2, 2, 3, 1,
	3, 1, 4, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 3, 1, 3, 3, 1,
	1, 4, 3, 3, 2, 1, 3, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 85, 86, 86,
	87, 87, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 104,
	104, 104, 104, 104, 105, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 111, 111, 111, 112, 112, 112, 113, 113, 114, 115, 116, 116, 117, 117,
	117, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122,
	122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 125,
	125, 126, 126, 127, 127, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 131, 131, 132, 132, 132,
	132, 133, 134, 134, 135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137,
	138, 139, 139, 140, 141, 141, 142, 142, 142, 143, 143, 144, 144, 144, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 147, 148, 148, 148, 148, 149, 149,
	149, 150, 150, 151, 152, 152, 152, 153, 153, 154, 155, 155, 155, 156, 157,
	158, 158, 159, 159, 160, 160, 160, 160, 161, 161, 162, 162, 163, 163, 163,
	163, 164, 164, 164, 165, 165, 165, 165, 165, 165, 165, 166, 166, 167, 167,
}

var tmRuleType = [...]NodeType{
	Identifier,           // identifier : ID
	Identifier,           // identifier : 'brackets'
	Identifier,           // identifier : 'inline'
	Identifier,           // identifier : 'prec'
	Identifier,           // identifier : 'shift'
	Identifier,           // identifier : 'input'
	Identifier,           // identifier : 'left'
	Identifier,           // identifier : 'right'
	Identifier,           // identifier : 'nonassoc'
	Identifier,           // identifier : 'generate'
	Identifier,           // identifier : 'assert'
	Identifier,           // identifier : 'empty'
	Identifier,           // identifier : 'nonempty'
	Identifier,           // identifier : 'global'
	Identifier,           // identifier : 'explicit'
	Identifier,           // identifier : 'lookahead'
	Identifier,           // identifier : 'param'
	Identifier,           // identifier : 'flag'
	Identifier,           // identifier : 'no-eoi'
	Identifier,           // identifier : 's'
	Identifier,           // identifier : 'x'
	Identifier,           // identifier : 'expect'
	Identifier,           // identifier : 'expect-rr'
	Identifier,           // identifier : 'class'
	Identifier,           // identifier : 'interface'
	Identifier,           // identifier : 'space'
	Identifier,           // identifier : 'extend'
	Identifier,           // identifier : 'inject'
	Identifier,           // identifier : 'layout'
	Identifier,           // identifier : 'language'
	Identifier,           // identifier : 'lalr'
	Identifier,           // identifier : 'lexer'
	Identifier,           // identifier : 'parser'
	Identifier,           // identifier_Keywords : ID
	Identifier,           // identifier_Keywords : 'brackets'
	Identifier,           // identifier_Keywords : 'inline'
	Identifier,           // identifier_Keywords : 'prec'
	Identifier,           // identifier_Keywords : 'shift'
	Identifier,           // identifier_Keywords : 'input'
	Identifier,           // identifier_Keywords : 'left'
	Identifier,           // identifier_Keywords : 'right'
	Identifier,           // identifier_Keywords : 'nonassoc'
	Identifier,           // identifier_Keywords : 'generate'
	Identifier,           // identifier_Keywords : 'assert'
	Identifier,           // identifier_Keywords : 'empty'
	Identifier,           // identifier_Keywords : 'nonempty'
	Identifier,           // identifier_Keywords : 'global'
	Identifier,           // identifier_Keywords : 'explicit'
	Identifier,           // identifier_Keywords : 'lookahead'
	Identifier,           // identifier_Keywords : 'param'
	Identifier,           // identifier_Keywords : 'flag'
	Identifier,           // identifier_Keywords : 'no-eoi'
	Identifier,           // identifier_Keywords : 's'
	Identifier,           // identifier_Keywords : 'x'
	Identifier,           // identifier_Keywords : 'expect'
	Identifier,           // identifier_Keywords : 'expect-rr'
	Identifier,           // identifier_Keywords : 'class'
	Identifier,           // identifier_Keywords : 'interface'
	Identifier,           // identifier_Keywords : 'space'
	Identifier,           // identifier_Keywords : 'extend'
	Identifier,           // identifier_Keywords : 'inject'
	Identifier,           // identifier_Keywords : 'layout'
	Identifier,           // identifier_Keywords : 'language'
	Identifier,           // identifier_Keywords : 'lalr'
	Identifier,           // identifier_Keywords : 'lexer'
	Identifier,           // identifier_Keywords : 'parser'
	Identifier,           // identifier_Keywords : 'true'
	Identifier,           // identifier_Keywords : 'false'
	Identifier,           // identifier_Keywords : 'separator'
	Identifier,           // identifier_Keywords : 'as'
	Identifier,           // identifier_Keywords : 'import'
	Identifier,           // identifier_Keywords : 'set'
	IntegerLiteral,       // integer_literal : icon
	StringLiteral,        // string_literal : scon
	BooleanLiteral,       // boolean_literal : 'true'
	BooleanLiteral,       // boolean_literal : 'false'
	0,                    // literal : string_literal
	0,                    // literal : integer_literal
	0,                    // literal : boolean_literal
	Pattern,              // pattern : regexp
	Command,              // command : code
	SyntaxProblem,        // syntax_problem : error
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section
	0,                    // file : header import__optlist option_optlist syntax_problem parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem
	0,                    // file : header import__optlist option_optlist lexer_section parser_section
	0,                    // file : header import__optlist option_optlist lexer_section
	0,                    // file : header import__optlist option_optlist parser_section
	0,                    // file : header import__optlist option_optlist
	0,                    // import__optlist : import__optlist import_
	0,                    // import__optlist :
	0,                    // option_optlist : option_optlist option
	0,                    // option_optlist :
	Header,               // header : 'language' identifier_Keywords '(' identifier_Keywords ')' ';'
	Header,               // header : 'language' identifier_Keywords ';'
	LexerSection,         // lexer_section : '::' .recoveryScope 'lexer' lexer_parts
	ParserSection,        // parser_section : '::' .recoveryScope 'parser' grammar_parts
	Import,               // import_ : 'import' identifier string_literal ';'
	Import,               // import_ : 'import' string_literal ';'
	Option,               // option : identifier '=' expression
	Symref,               // symref : identifier
	Symref,               // symref_Args : identifier args
	Symref,               // symref_Args : identifier
	RawType,              // rawType : code
	0,                    // lexer_parts : lexer_part
	0,                    // lexer_parts : lexer_parts lexer_part_OrSyntaxError
	0,                    // lexer_part : named_pattern
	0,                    // lexer_part : lexeme
	0,                    // lexer_part : lexer_directive
	0,                    // lexer_part : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : named_pattern
	0,                    // lexer_part_OrSyntaxError : lexeme
	0,                    // lexer_part_OrSyntaxError : lexer_directive
	0,                    // lexer_part_OrSyntaxError : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : syntax_problem
	NamedPattern,         // named_pattern : identifier '=' pattern
	StartConditionsScope, // start_conditions_scope : start_conditions '{' .recoveryScope lexer_parts '}'
	StartConditions,      // start_conditions : '<' '*' '>'
	StartConditions,      // start_conditions : '<' stateref_list_Comma_separated '>'
	0,                    // stateref_list_Comma_separated : stateref_list_Comma_separated ',' stateref
	0,                    // stateref_list_Comma_separated : stateref
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':'
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':'
	LexemeAttrs,          // lexeme_attrs : '(' lexeme_attribute ')'
	LexemeAttribute,      // lexeme_attribute : 'class'
	LexemeAttribute,      // lexeme_attribute : 'space'
	LexemeAttribute,      // lexeme_attribute : 'layout'
	DirectiveBrackets,    // lexer_directive : '%' 'brackets' symref symref ';'
	InclusiveStartConds,  // lexer_directive : '%' 's' lexer_state_list_Comma_separated ';'
	ExclusiveStartConds,  // lexer_directive : '%' 'x' lexer_state_list_Comma_separated ';'
	0,                    // lexer_state_list_Comma_separated : lexer_state_list_Comma_separated ',' lexer_state
	0,                    // lexer_state_list_Comma_separated : lexer_state
	Stateref,             // stateref : identifier
	LexerState,           // lexer_state : identifier
	0,                    // grammar_parts : grammar_part
	0,                    // grammar_parts : grammar_parts grammar_part_OrSyntaxError
	0,                    // grammar_part : nonterm
	0,                    // grammar_part : template_param
	0,                    // grammar_part : directive
	0,                    // grammar_part_OrSyntaxError : nonterm
	0,                    // grammar_part_OrSyntaxError : template_param
	0,                    // grammar_part_OrSyntaxError : directive
	0,                    // grammar_part_OrSyntaxError : syntax_problem
	Nonterm,              // nonterm : annotations identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : annotations identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : annotations identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : annotations identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : annotations identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : annotations identifier rawType ':' rules ';'
	Nonterm,              // nonterm : annotations identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : annotations identifier ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier rawType ':' rules ';'
	Nonterm,              // nonterm : identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier ':' rules ';'
	Assoc,                // assoc : 'left'
	Assoc,                // assoc : 'right'
	Assoc,                // assoc : 'nonassoc'
	ParamModifier,        // param_modifier : 'explicit'
	ParamModifier,        // param_modifier : 'global'
	ParamModifier,        // param_modifier : 'lookahead'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier ';'
	TemplateParam,        // template_param : '%' param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_type identifier ';'
	DirectivePrio,        // directive : '%' assoc references ';'
	DirectiveInput,       // directive : '%' 'input' inputref_list_Comma_separated ';'
	DirectiveInterface,   // directive : '%' 'interface' identifier_list_Comma_separated ';'
	DirectiveAssert,      // directive : '%' 'assert' 'empty' rhsSet ';'
	DirectiveAssert,      // directive : '%' 'assert' 'nonempty' rhsSet ';'
	DirectiveSet,         // directive : '%' 'generate' identifier '=' rhsSet ';'
	DirectiveExpect,      // directive : '%' 'expect' integer_literal ';'
	DirectiveExpectRR,    // directive : '%' 'expect-rr' integer_literal ';'
	DirectiveInject,      // directive : '%' 'inject' symref reportClause ';'
	0,                    // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0,                    // identifier_list_Comma_separated : identifier
	0,                    // inputref_list_Comma_separated : inputref_list_Comma_separated ',' inputref
	0,                    // inputref_list_Comma_separated : inputref
	Inputref,             // inputref : symref 'no-eoi'
	Inputref,             // inputref : symref
	0,                    // references : symref
	0,                    // references : references symref
	0,                    // rules : rule0
	0,                    // rules : rules '|' rule0
	Rule,                 // rule0 : predicate rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsParts rhsSuffix
	Rule,                 // rule0 : predicate rhsParts reportClause
	Rule,                 // rule0 : predicate rhsParts
	Rule,                 // rule0 : predicate rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsSuffix
	Rule,                 // rule0 : predicate reportClause
	Rule,                 // rule0 : predicate
	Rule,                 // rule0 : rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : rhsParts rhsSuffix
	Rule,                 // rule0 : rhsParts reportClause
	Rule,                 // rule0 : rhsParts
	Rule,                 // rule0 : rhsSuffix reportClause
	Rule,                 // rule0 : rhsSuffix
	Rule,                 // rule0 : reportClause
	Rule,                 // rule0 :
	0,                    // rule0 : syntax_problem
	Predicate,            // predicate : '[' predicate_expression ']'
	RhsSuffix,            // rhsSuffix : '%' 'prec' symref
	RhsSuffix,            // rhsSuffix : '%' 'shift' symref
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated reportAs
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated
	ReportClause,         // reportClause : '->' identifier reportAs
	ReportClause,         // reportClause : '->' identifier
	ReportAs,             // reportAs : 'as' identifier
	0,                    // rhsParts : rhsPart
	0,                    // rhsParts : rhsParts rhsPart_OrSyntaxError
	0,                    // rhsPart : rhsAnnotated
	0,                    // rhsPart : command
	0,                    // rhsPart : rhsStateMarker
	0,                    // rhsPart : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : rhsAnnotated
	0,                    // rhsPart_OrSyntaxError : command
	0,                    // rhsPart_OrSyntaxError : rhsStateMarker
	0,                    // rhsPart_OrSyntaxError : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : syntax_problem
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate_list_And_separated '&' lookahead_predicate
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate
	RhsLookahead,         // rhsLookahead : '(?=' lookahead_predicate_list_And_separated ')'
	LookaheadPredicate,   // lookahead_predicate : '!' symref
	LookaheadPredicate,   // lookahead_predicate : symref
	StateMarker,          // rhsStateMarker : '.' identifier
	0,                    // rhsAnnotated : rhsAssignment
	RhsAnnotated,         // rhsAnnotated : annotations rhsAssignment
	0,                    // rhsAssignment : rhsOptional
	RhsAssignment,        // rhsAssignment : identifier '=' rhsOptional
	RhsPlusAssignment,    // rhsAssignment : identifier '+=' rhsOptional
	0,                    // rhsOptional : rhsCast
	RhsOptional,          // rhsOptional : rhsCast '?'
	0,                    // rhsCast : rhsPrimary
	RhsCast,              // rhsCast : rhsPrimary 'as' symref_Args
	RhsAsLiteral,         // rhsCast : rhsPrimary 'as' literal
	ListSeparator,        // listSeparator : 'separator' references
	RhsSymbol,            // rhsPrimary : symref_Args
	RhsNested,            // rhsPrimary : '(' .recoveryScope rules ')'
	RhsPlusList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '+'
	RhsStarList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '*'
	RhsPlusQuantifier,    // rhsPrimary : rhsPrimary '+'
	RhsStarQuantifier,    // rhsPrimary : rhsPrimary '*'
	RhsIgnored,           // rhsPrimary : '$' '(' .recoveryScope rules ')'
	0,                    // rhsPrimary : rhsSet
	RhsSet,               // rhsSet : 'set' '(' .recoveryScope setExpression ')'
	SetSymbol,            // setPrimary : identifier symref_Args
	SetSymbol,            // setPrimary : symref_Args
	SetCompound,          // setPrimary : '(' setExpression ')'
	SetComplement,        // setPrimary : '~' setPrimary
	0,                    // setExpression : setPrimary
	SetOr,                // setExpression : setExpression '|' setExpression
	SetAnd,               // setExpression : setExpression '&' setExpression
	0,                    // annotation_list : annotation_list annotation
	0,                    // annotation_list : annotation
	Annotations,          // annotations : annotation_list
	AnnotationImpl,       // annotation : '@' identifier '=' expression
	AnnotationImpl,       // annotation : '@' identifier
	0,                    // annotation : '@' syntax_problem
	0,                    // nonterm_param_list_Comma_separated : nonterm_param_list_Comma_separated ',' nonterm_param
	0,                    // nonterm_param_list_Comma_separated : nonterm_param
	NontermParams,        // nonterm_params : '<' nonterm_param_list_Comma_separated '>'
	0,                    // nonterm_param : param_ref
	InlineParameter,      // nonterm_param : identifier identifier '=' param_value
	InlineParameter,      // nonterm_param : identifier identifier
	ParamRef,             // param_ref : identifier
	SymrefArgs,           // args : '<' argument_list_Comma_separatedopt '>'
	0,                    // argument_list_Comma_separated : argument_list_Comma_separated ',' argument
	0,                    // argument_list_Comma_separated : argument
	0,                    // argument_list_Comma_separatedopt : argument_list_Comma_separated
	0,                    // argument_list_Comma_separatedopt :
	ArgumentVal,          // argument : param_ref ':' param_value
	ArgumentVal,          // argument : param_ref
	ArgumentTrue,         // argument : '+' param_ref
	ArgumentFalse,        // argument : '~' param_ref
	ParamType,            // param_type : 'flag'
	ParamType,            // param_type : 'param'
	0,                    // param_value : literal
	0,                    // param_value : param_ref
	0,                    // predicate_primary : param_ref
	PredicateNot,         // predicate_primary : '!' param_ref
	PredicateEq,          // predicate_primary : param_ref '==' literal
	PredicateNotEq,       // predicate_primary : param_ref '!=' literal
	0,                    // predicate_expression : predicate_primary
	PredicateAnd,         // predicate_expression : predicate_expression '&&' predicate_expression
	PredicateOr,          // predicate_expression : predicate_expression '||' predicate_expression
	0,                    // expression : literal
	0,                    // expression : symref_Args
	Array,                // expression : '[' expression_list_Comma_separated ',' ']'
	Array,                // expression : '[' expression_list_Comma_separated ']'
	Array,                // expression : '[' ',' ']'
	Array,                // expression : '[' ']'
	0,                    // expression : syntax_problem
	0,                    // expression_list_Comma_separated : expression_list_Comma_separated ',' expression
	0,                    // expression_list_Comma_separated : expression
	0,                    // rawTypeopt : rawType
	0,                    // rawTypeopt :
}

// set(follow ERROR) = REM, COLONCOLON, OR, SEMICOLON, DOT, COMMA, RBRACK, LPAREN, LPARENQUESTASSIGN, MINUSGT, RPAREN, RBRACE, LT, DOLLAR, ATSIGN, ERROR, ID, SEPARATOR, SET, ASSERT, BRACKETS, CLASS, EMPTY, EXPECT, EXPECTMINUSRR, EXPLICIT, EXTEND, FLAG, GENERATE, GLOBAL, INJECT, INLINE, INPUT, INTERFACE, LALR, LANGUAGE, LAYOUT, LEFT, LEXER, LOOKAHEAD, NOMINUSEOI, NONASSOC, NONEMPTY, PARAM, PARSER, PREC, RIGHT, CHAR_S, SHIFT, SPACE, CHAR_X, CODE
var afterErr = []token.Type{
	8, 9, 10, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 36, 37, 40, 41, 45, 46, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
}
