// generated by Textmapper; DO NOT EDIT

package tm

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/tm/token"
)

var recoveryScopeStates = map[int]bool{
	107: true,
	152: true,
	184: true,
	185: true,
	238: true,
	403: true,
}

var tmNonterminals = [...]string{
	"identifier",
	"identifier_Keywords",
	"integer_literal",
	"string_literal",
	"boolean_literal",
	"literal",
	"pattern",
	"command",
	"syntax_problem",
	"file",
	"import__optlist",
	"option_optlist",
	"header",
	"lexer_section",
	"parser_section",
	"import_",
	"option",
	"symref",
	"symref_Args",
	"rawType",
	"lexer_parts",
	"lexer_part",
	"lexer_part_OrSyntaxError",
	"named_pattern",
	"start_conditions_scope",
	"start_conditions",
	"stateref_list_Comma_separated",
	"lexeme",
	"lexeme_attrs",
	"lexeme_attribute",
	"lexer_directive",
	"lexer_state_list_Comma_separated",
	"stateref",
	"lexer_state",
	"grammar_parts",
	"grammar_part",
	"grammar_part_OrSyntaxError",
	"nonterm",
	"nonterm_alias",
	"assoc",
	"param_modifier",
	"template_param",
	"directive",
	"identifier_list_Comma_separated",
	"inputref_list_Comma_separated",
	"inputref",
	"references",
	"rules",
	"rule0",
	"predicate",
	"rhsSuffix",
	"reportClause",
	"reportAs",
	"rhsParts",
	"rhsPart",
	"rhsPart_OrSyntaxError",
	"lookahead_predicate_list_And_separated",
	"rhsLookahead",
	"lookahead_predicate",
	"rhsStateMarker",
	"rhsAssignment",
	"rhsOptional",
	"rhsCast",
	"rhsAlias",
	"listSeparator",
	"rhsPrimary",
	"rhsSet",
	"setPrimary",
	"setExpression",
	"nonterm_param_list_Comma_separated",
	"nonterm_params",
	"nonterm_param",
	"param_ref",
	"args",
	"argument_list_Comma_separated",
	"argument_list_Comma_separatedopt",
	"argument",
	"param_type",
	"param_value",
	"predicate_primary",
	"predicate_expression",
	"expression",
	"expression_list_Comma_separated",
	"rawTypeopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmDefGoto = []int32{
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
}

var tmGoto = []int32{
	-1, 38, 4265, 3155, -154, -147, -133, 1174, 1904, 658, 659, 581, 661, 472,
	21, 586, 570, 27, 455, 91, 201, 208, -122, -85, -63, -32, 351, -31, -323,
	182, -30, 196, -39, -162, 435, 436, 353, 113, 43, 352, 356, -207, 47, 185,
	269, 168, 218, 5870, 5697, 5745, 4312, 324, 347, 5405, 5416, 242, 574, 4323,
	438, 4501, 4617, 3199, 3210, 3388, 500, 3504, 2493, -53, -28, 601, 142, 454,
	66, -27, 501, 502, 399, 267, -145, 137, 141, 24, 355, -26,
}

var tmDefAct = []int32{
	-1, -1, -1, 91, 0, 10, 1, 23, 11, 21, 22, 14, -1, 17, 9, 13, 27, -1, 5, 24,
	30, 29, 28, 6, 31, 15, 18, 8, 12, 16, 32, 3, 7, 19, 4, 25, 20, -1, 33, 69,
	67, 70, 68, 71, 66, 43, 34, 56, 44, 54, 55, 47, 59, 50, 42, 46, 60, 35, 38,
	57, 63, 62, 61, 39, 64, 48, 51, 41, 45, 49, 65, 36, 40, 52, 37, 58, 53, -1,
	-1, 26, 2, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, 95, -1, -1, -1, 90,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, 80, 103, 245,
	233, 269, -1, 215, -1, -1, 231, -1, 242, 247, 246, 244, 259, 262, 264, 266,
	276, -1, -1, -1, -1, 286, 288, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	73, -1, -1, -1, -1, -1, -1, 88, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 258, -1, 291, -1, 309, -1, -1, -1, -1, 101, 257, -1, 254, -1, -1,
	-1, -1, -1, 102, -1, 176, -1, 223, -1, 229, 249, 252, -1, 227, 243, 251, 250,
	248, 263, -1, -1, 274, 273, 189, -1, -1, 239, -1, -1, 287, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, 84, -1,
	86, 180, -1, -1, -1, 188, -1, -1, -1, -1, -1, -1, -1, 235, 236, 306, -1, -1,
	-1, 234, -1, 270, -1, -1, 256, 255, -1, -1, -1, -1, -1, 279, 282, -1, 103,
	260, -1, -1, -1, -1, -1, 294, 261, 216, 221, -1, 219, 225, 265, -1, 208, -1,
	241, -1, 285, 174, -1, 172, -1, -1, -1, 175, 168, -1, -1, -1, -1, -1, -1, -1,
	94, 98, -1, -1, -1, -1, 105, 107, 110, -1, 108, 109, -1, -1, 152, 154, 155,
	156, 72, -1, 75, 74, 77, 76, 78, 312, 318, 313, 100, 82, 178, -1, 179, 186,
	-1, 187, 184, -1, -1, -1, 307, 308, -1, -1, 213, -1, -1, 253, 275, -1, 281,
	278, -1, 277, -1, 299, 300, -1, -1, 292, 217, 267, -1, 237, 303, 304, 289,
	173, 170, -1, 171, 166, -1, 164, -1, -1, -1, 167, -1, -1, -1, -1, 150, -1,
	121, -1, 321, -1, 115, 106, 111, 114, 112, 113, -1, -1, -1, -1, -1, 301, -1,
	-1, -1, -1, 190, 193, 192, 302, 191, -1, -1, -1, 160, 153, 157, 158, 159, -1,
	317, 320, -1, 177, 185, 182, -1, 183, 214, 272, 271, 280, -1, -1, 297, 293,
	207, 169, 165, 162, -1, 163, -1, 151, -1, 149, -1, 118, -1, 119, 79, 116, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, -1, -1, -1, 316, -1, 315,
	181, 161, -1, 146, -1, 147, 120, -1, -1, 140, 117, -1, -1, -1, 204, 205, -1,
	-1, 211, 199, -1, 200, 198, -1, -1, 197, 314, 319, 145, 148, 143, 144, -1,
	-1, 138, -1, -1, 130, 201, 202, -1, 206, 209, -1, 195, -1, 142, 134, -1, 136,
	-1, 128, -1, 203, -1, 196, 132, 124, -1, 126, 194, 122, -1, -1, -1, -1,
}

const tmActionBase = -82

var tmAction = []int32{
	-59, 5369, 2248, -82, -82, -82, -82, -82, -82, -82, -82, -82, 2793, -82, -82,
	-82, -82, 2856, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, 7, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, 16, 3020, -82, -82, 5, -16, 804, 2248, 5408, 5408, -82, 138, 172, -17,
	131, -82, 2248, 4877, 3764, -82, 804, 277, 61, 804, 313, 251, 217, 53, 5408,
	4954, 884, 5002, 234, -82, 330, -82, 5744, -82, -82, -82, 322, -82, 1176,
	184, -82, 957, -82, -82, -82, -82, -82, 3852, 4099, 5082, -82, 325, -6, 4133,
	73, -82, -82, 804, 383, 804, 362, 571, 804, 804, 366, 254, 572, 567, -82,
	590, 579, 56, 584, 382, 390, -82, -82, 408, 804, 582, 804, 432, 804, 583,
	804, 804, 433, 585, 5408, 5408, -82, 5408, -82, 78, -82, 304, 143, 1030,
	5408, -82, -82, 450, -82, 884, 4192, 3886, 3939, 3886, -82, -2, -82, 207,
	-82, 1103, -82, -82, -82, 239, -82, -82, -82, -82, -82, -82, 5408, 2248, -82,
	-82, -82, 5408, 5408, -82, 259, 5408, -82, 442, 804, 445, 804, 587, 804, 451,
	463, 804, 588, 804, 459, 589, 804, 594, 597, -82, 4264, 5116, 2705, 449, -82,
	540, -82, -82, 478, 804, 488, -82, 494, 804, 495, 496, 804, 599, 804, -82,
	-82, -82, 108, 108, 4954, -82, 4954, -82, 5408, 578, -82, -82, 5002, 149,
	4192, 4192, 3090, -82, -82, 320, 743, -82, 5408, 5408, 332, 469, 592, -82,
	-82, -82, -82, 255, -82, -82, -82, 595, -82, 102, -82, 3130, -82, -82, 497,
	-82, 509, 804, 511, -82, -82, 513, 804, 517, 804, 605, 804, 519, -82, -82,
	-34, 5168, 17, 2940, -82, -82, -82, 5209, -82, -82, 237, 4019, -82, -82, -82,
	-82, -82, 1554, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 520,
	-82, -82, 521, -82, -82, 527, 804, 529, -82, -82, 308, 357, -82, 5265, 112,
	-82, -82, 369, -82, -82, 4192, -82, 4192, -82, -82, 3130, 4315, -82, -82,
	-82, 5408, -82, -82, -82, -82, -82, -82, 539, -82, -82, 546, -82, 548, 804,
	549, -82, 5408, 5408, 5408, 598, -82, 530, -82, 543, -82, 610, -82, -82, -82,
	-82, -82, -82, 4264, 283, 32, 627, 627, -82, 5408, 5408, 5408, 5408, -82,
	-82, -82, -82, -82, 5408, 461, 5408, -82, -82, -82, -82, -82, 612, -82, -82,
	552, -82, -82, -82, 550, -82, -82, -82, -82, -82, 416, 429, -82, -82, -82,
	-82, -82, -82, 561, -82, 5408, -82, 183, -82, 299, -82, 5408, -82, -82, -82,
	1665, 3202, 616, 596, 596, 620, 623, 632, 624, 26, 477, -82, 498, 5330, 5408,
	566, -82, 2116, -82, -82, -82, 631, -82, 5408, -82, -82, 532, 1381, -82, -82,
	1745, 633, 635, -82, -82, 596, 636, -82, -82, 5408, -82, -82, 568, 3130, -82,
	-82, -82, -82, -82, -82, -82, 628, 1825, -82, 2204, 1475, -82, -82, -82, 638,
	-82, -82, 3130, -82, 639, -82, -82, 2333, -82, 1906, -82, 2414, -82, 640,
	-82, -82, -82, 2495, -82, -82, -82, 656, 657, -82, -82,
}

const tmTableLen = 6255

var tmTable = []int16{
	37, -145, -102, -86, 240, -4, -106, -87, 232, 240, -88, 81, 240, 232, -107,
	-389, 82, -108, 240, -109, -110, -87, 232, -99, -86, -85, -86, 325, -87,
	-396, -87, -94, -212, -88, -111, 322, -213, -95, -112, -6, 77, 212, -390,
	212, -113, -391, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, -114, -163, 89, 333, 113, -464, 133, 134, 189, -89,
	334, 305, -216, -257, -258, 150, 153, -498, 113, -89, 305, 113, -217, 333,
	333, -465, 171, 173, 113, 180, 349, 350, -151, -329, 238, 305, 541, 424, 156,
	238, 113, -373, 238, 113, 132, -235, 98, 101, 238, -171, 88, -236, -172, 148,
	271, 213, 146, 181, 487, 113, 333, 113, -438, -439, 113, 113, -213, 373, 167,
	375, 316, -146, -86, -331, 137, -192, -87, -332, -140, 272, 113, -192, 113,
	-87, 113, 513, 113, 113, 515, -262, 180, 180, 317, 173, 174, -359, 333, 237,
	239, 113, 180, 91, 141, 334, 145, 113, 269, 273, 173, 273, 526, 113, -142,
	530, 398, 113, 230, -87, 252, 253, -483, 230, -484, 318, 319, 320, 273, 536,
	263, -87, 230, 289, 291, -89, 333, 134, 271, 359, 113, 222, 113, 373, 113,
	441, 222, 113, 103, 113, 452, 452, 113, 399, -87, 222, 313, 37, 273, -168,
	-86, 227, 254, 358, -87, 113, 189, 175, 288, 113, 189, 176, 113, 226, 113,
	400, -89, 277, 226, -186, 173, 338, 173, 337, 180, 458, -87, 226, 180, 218,
	269, 269, 273, -167, 218, -294, -228, 393, 173, 173, 290, -87, -87, 218, 137,
	326, 318, 401, 402, -407, 290, 396, 353, -408, -409, 173, 181, -410, -411,
	-161, -412, 113, -413, -414, -87, 322, 113, -415, 113, -416, 113, -417, 271,
	-418, 271, 391, -419, 313, -485, -259, -484, 404, 316, 311, 507, 37, 333,
	174, -260, 174, 486, 273, 311, 334, -363, -165, -192, 439, -89, 440, -87,
	-193, 398, -261, 317, 364, 365, -261, -364, -211, 113, 324, 333, 298, -368,
	-187, 428, 180, -365, 373, 514, 523, 374, 298, 269, 90, 269, -89, 200, 173,
	173, 333, 310, 425, 443, 318, 319, 320, 373, 399, 532, 310, 461, -363, -221,
	435, 85, 113, -226, -87, 180, 450, 450, -87, 87, -154, 310, -440, 175, 290,
	175, 400, 351, -240, 352, -219, 313, -365, 395, 99, 102, 121, 466, 180, 180,
	289, 139, 142, 449, 147, 484, 180, -192, 474, 200, 121, 160, -242, 121, 164,
	283, 168, 318, 401, 402, 121, 374, 277, 314, 423, 200, 467, 468, 284, 283,
	315, -192, 193, 195, 353, 199, -246, 180, 83, -365, -251, -192, 284, 391,
	-192, -87, -296, -240, 313, -298, -192, 121, 284, 121, 220, -302, 121, 121,
	225, 228, 180, 501, -192, -266, 273, 480, -307, -303, 354, 212, 450, -87,
	121, -267, 121, -369, 121, -192, 121, 121, 250, -499, -341, -500, 395, 295,
	180, -192, 435, 505, 173, 199, -343, -192, -192, -192, -192, 121, -344, -346,
	-347, -378, -501, 121, -373, 283, -410, 285, -192, 173, -192, 286, -192,
	-379, 468, -381, -192, -382, -192, -192, -192, -384, -418, -388, -432, -433,
	-192, 116, -192, 136, 121, -434, 121, -436, 121, 183, -457, 121, -192, 121,
	306, 116, 121, -446, 116, -192, -458, -192, -192, -192, -447, 116, -448,
	-450, -480, 121, 155, 374, -478, 121, -192, -479, 121, 116, 121, -481, 116,
	-504, 470, -523, -505, -510, -524, 451, 453, 280, 374, 420, -223, -231, -232,
	-151, 116, -234, 116, -237, 471, 116, 116, -244, -248, -357, -253, 460, -300,
	-305, -309, 369, -311, -511, 315, -312, -236, 116, -372, 116, -349, 116,
	-370, 116, 116, 121, -386, -459, -456, 236, 121, -461, 121, -329, 121, -477,
	116, -491, -494, 472, 372, -495, 116, 270, 116, -113, 116, -496, 116, -508,
	-87, -518, 116, -519, -521, -526, -533, -535, -540, -544, -545, 540, 95, 287,
	3, 78, 392, 96, 157, 520, 510, 293, 322, 323, 121, 116, 418, 116, 422, 116,
	419, 262, 116, 469, 116, 182, 429, 116, 0, 473, 135, 278, 279, 336, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 116, 0, 356, 116, 0, 116, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 270, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 116, -1, -1, -1, -1, 116, 0,
	116, -1, 116, 0, 0, 0, 442, 0, -1, -189, -1, 0, 0, -1, 0, -1, -1, 0, -1, 0,
	-1, -1, -1, 336, 0, 0, -1, -1, 0, 0, -1, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0, 232, 0, 270, 0, 270, 232, -107, 0,
	0, -108, -1, -109, -110, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, -111, 0,
	0, 0, -112, -6, 0, 0, 0, 0, -113, 0, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -114, 0, 0, 0, 0, 0, 0, 0, -106,
	0, 232, 0, 0, 0, 0, 0, -107, 0, 0, -108, 0, -109, -110, -87, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, -112, -6, 0, 0, 0, 0, -113, 336, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-114, -106, 0, 228, 0, 0, 0, 0, 228, -107, 0, 0, 0, 0, -109, -110, -87, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, -112, -6, 0, 0, 0, 0, -113,
	0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -114, -106, 0, 228, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, -109, -110,
	-87, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, -112, -6, 0, 0, 0,
	-263, -113, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -114, -106, 0, 220, 0, 0, 0, 0, 220, -107, 0, 0, 0, 0,
	-109, -110, -87, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, -112,
	-6, 0, 0, 0, 0, -113, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -114, -106, 0, 224, 0, 0, 0, 0, 224, -107, 0,
	0, 0, 0, -109, -110, -87, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0,
	0, 0, -6, 0, 0, 0, 0, -113, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 114, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 114,
	0, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 114, 0,
	114, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, -329, 0, 0, 0, 0, 139, 139, 114, 0, 114, 0, 114, 0, 0, 114, 0, 114, 0,
	-487, 114, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 114, 139,
	139, 114, 0, 114, 0, 0, 0, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 129, 0, 114, -329, 114, 0, 114, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -487, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	129, 0, 0, 0, 0, 114, 0, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, -114, -151, -329, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -428, 0, -330, -429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -112, -6, 0, -331, 0, 0, 0, -332, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 525, -487,
	527, 529, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 534, 0, 535, 0, 537, 141, 141,
	0, 0, 0, 539, 0, 0, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 131, -459, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -487, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 135, -459, 0, 0, 0, 0, 0,
	0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -487, 0, 0, 0, 135, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, -114,
	125, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -487, 0,
	0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0,
	0, 0, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, -114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 115, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 115, 0, 0, 115, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 115, 0, 115, 0, 115, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, -329,
	0, 115, 0, 115, 0, 115, 0, 0, 115, 0, 115, 0, 0, 115, 0, -330, -506, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 115, 0, 0, 115, 0, 115, -112, -6, 0,
	-331, 0, 0, 0, -332, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, 0, 0, 0, 0, 0, 0, 115, 0, 137, 0, 0, 115, 0, 115, 0,
	115, 137, 137, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 0, 0, 421, 0, 0, 137, 137, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 115, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	-114, 0, 0, 0, 115, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50,
	-51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65,
	-66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 133, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0,
	0, 0, 335, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, -114, 127, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 127, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, -114, 123, 0, 0, 0, 0, 0, 0, 0, 123,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, -114, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 131, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 131, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 131, 0, 131, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 131, 0, 131, 0, 131, 0, 131, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, -329, 0, 131, 0, 131, 0, 131, 0,
	0, 131, 0, 131, 0, 0, 131, 0, -330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 131, 0, 0, 131, 0, 131, -112, -6, 0, -331, 0, 0, 0, -332, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 131, 0, 131, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	26, 0, 0, 0, 26, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, 0, 0, 131, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, 26, 2, 2, 0, 131, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 2, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, -313, 96, 0, 0, 0, 0, 0, 490, 491, 0, 0, 0, 0, 0, 0, 0, 0, 0, -314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, -6, 0, 0, 0, 0, 0, 518, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 93, 0, 0, -96, 0, 0, 0, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, -189, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, -6,
	-151, -329, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, 0, -6, 0, -331, 0, 0, 0, -332, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -490, -314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -112, -6, 0, 0, 0, 0, 0, 151, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 127, 0, 0, 127, 0, 0, 0, 0, 0, 231, 127, 128, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 128, 127, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 128,
	0, 0, 0, 0, 127, 0, 127, 0, 0, 127, 127, 0, 0, 0, 0, 128, 0, 128, 0, 0, 128,
	128, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 127, 0, 0, 0, 128, 0, 128, 0, 128,
	0, 128, 128, 127, 0, 0, 0, 0, 0, 127, 0, 274, 0, 281, 128, 127, 332, 0, 0,
	127, 128, 0, 128, 0, 128, 0, 128, 0, 0, 0, 128, 0, 0, 0, 0, 0, 332, 332, 0,
	0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 127, 0, 127, 0, 128, 127, 128, 0, 128, 0,
	0, 128, 0, 128, 0, 0, 128, 0, 127, 0, 0, 0, 127, 0, 332, 127, 0, 127, 0, 128,
	0, 0, 0, 128, 0, 0, 128, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 129, 0, 0, 129, 0, 0, 0, 0, 0, 0, 129, 0, 127,
	0, 0, 0, 0, 127, 0, 127, 0, 127, 129, 128, 0, 129, 0, 0, 128, 0, 128, 0, 128,
	0, 0, 0, 332, 0, 0, 0, 0, 129, 0, 129, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 129, 0, 129, 0, 129, 0, 129, 129, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 129, 0, 129, 0, 129, 0, 129, 0, 0, 0, 129,
	127, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 130, 0, 0, 130,
	129, 0, 129, 0, 129, 0, 130, 129, 0, 129, 0, 0, 129, 0, 0, 0, 0, 0, 130, 0,
	0, 130, 0, 0, 0, 129, 332, 0, 0, 129, 0, 0, 129, 0, 129, 0, 0, 130, 0, 130,
	0, 0, 130, 130, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 130, 0, 130, 0,
	130, 0, 130, 130, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 130, 0, 0, 0, 129, 0,
	130, 0, 130, 129, 130, 129, 130, 129, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 130, 0, 130, 0, 0, 130, 0,
	130, 0, 0, 130, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 130, 0,
	0, 130, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 129, -154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, -112, -6, 0, 130, 0, 130, 0, 130, -7, -8, -9, -10, -11, -12,
	-13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 0, 0, 0, 0, 0, 0, 0,
	130, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1,
	-1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -206, -1, -1, -1, -1, 130, -1,
	-1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, -6, 0, 0, 0, 0, -113, -1, -7,
	-8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	296, 0, -277, 0, 0, 0, -278, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7,
	-8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	97, 0, 0, 0, 0, 0, 0, 0, -323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, -6, 0, 0, 0, 0, 0, 0,
	-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1,
	-1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1,
	0, 0, -207, -1, -1, 0, 0, -1, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, -1, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0,
	0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -277, 0, 0,
	0, -278, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 120, 0, 0, 120, 0, 0, 0, 0, 0, 0, 120, 124, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 124, 192, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 201, 0, 0, 0, 0, 120, 0, 120, 0, 0, 120, 120, 0, 0, 0, 0, 124, 0, 124, 0,
	0, 124, 124, 0, 0, 0, 120, 0, 120, 0, 120, 0, 120, 120, 0, 0, 0, 124, 0, 124,
	0, 124, 0, 124, 124, 198, 0, 0, 0, 0, 0, 120, 0, 0, 0, 331, 201, 120, 0, 0,
	0, 284, 124, 0, 0, 0, 0, 0, 124, 0, 0, 0, 201, 0, 0, 331, 331, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 120, 0, 120, 0, 0, 120, 0, 120, 0, 124, 120, 124, 0, 124, 0, 0,
	124, 0, 124, 0, 0, 124, 0, 120, 0, 0, 331, 120, 0, 0, 120, 0, 120, 0, 124, 0,
	0, 0, 124, 0, 0, 124, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 125, 0, 0, 125, 0, 0, 0, 0, 0, 0, 125, 0, 120, 0,
	0, 0, 0, 120, 0, 120, 0, 120, 125, 124, 0, 202, 0, 0, 124, 0, 124, 0, 124,
	331, 0, 0, 0, 0, 0, 0, 0, 125, 0, 125, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 125, 0, 125, 0, 125, 0, 125, 125, 0, 0, 124, 464, 465,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 125, 0, 0, 0, 202,
	120, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 126, 0, 0, 126,
	125, 0, 125, 0, 125, 0, 126, 125, 0, 125, 0, 0, 125, 0, 0, 0, 0, 0, 126, 0,
	0, 203, 0, 331, 0, 125, 0, 0, 0, 125, 0, 0, 125, 511, 125, 0, 0, 126, 0, 126,
	0, 0, 126, 126, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 126, 528,
	126, 0, 126, 126, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 125, 0,
	126, 0, 0, 125, 0, 125, 126, 125, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 126, 0, 126, 0, 0, 126, 0, 126, 0,
	0, 126, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 126, 0, 0, 126,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, -6, 0, 126, 0, 126, 0, 126, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0,
	0, 0, 0, -6, 0, 0, 0, 0, 0, 126, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -181, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1,
	0, 0, -1, -1, -208, -1, 0, 0, 0, 0, -1, -1, -1, -209, -210, -1, 0, -1, -1,
	-1, -1, 0, -1, -1, -1, 0, 0, -323, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0,
	-1, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7,
	-8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-405, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 178, 123, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 123, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 122, 0, 0, 122, 122, 0, 0, 0, 0, 123, 0, 123, 0, 0,
	123, 123, 0, 0, 0, 122, 0, 122, 0, 122, 0, 122, 122, 0, 0, 0, 123, 0, 123, 0,
	123, 0, 123, 123, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 122,
	0, 122, 0, 0, 122, 0, 122, 0, 123, 122, 123, 0, 123, 0, 0, 123, 0, 123, 0, 0,
	123, 0, 122, 0, 0, 0, 122, 0, 0, 122, 0, 122, 0, 123, 0, 0, 0, 123, 0, 0,
	123, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 122, 0, 122, 0,
	122, 0, 123, 0, 0, 0, 0, 123, 0, 123, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, 0, -1,
	-188, -1, -1, 0, 0, -1, -1, 123, -1, 0, 0, 0, 0, -1, -189, -1, 0, 0, -190, 0,
	-1, -1, -1, -1, 118, -1, -1, -1, 0, 0, 0, -1, -1, 122, 0, -1, 0, 0, 118, 0,
	0, 118, 0, 0, 123, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -1, 0, 0, 119, 0, 0, 0, 0, 0, 0, 118, 0, 118, 0, 0, 118, 118,
	119, 0, 0, 119, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 118, 0, 118, 0, 118, 0, 118,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 119, 0, 119,
	0, 282, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 119, 0,
	119, 0, 119, 119, 0, 0, 118, 0, 118, 0, 118, 0, 0, 118, 0, 118, 0, 0, 118, 0,
	0, 119, 0, 0, 0, 0, 0, 119, 0, 0, 0, 118, 0, 0, 0, 118, 0, 0, 118, 0, 118, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 119, 0, 119, 158, 0, 119, 162,
	119, 0, 0, 119, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 119, 0,
	0, 119, 118, 119, 0, 0, 0, 118, 0, 118, 0, 118, 0, 0, 0, 216, 0, 218, 0, 0,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 243, 0, 245, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 119, 118, 0, 0, 0, 119, 0, 119, 0, 119, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 295, 0, 297, 0, 299, 119, 0, 302, 0, 304, 0, 0, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 343, 0, 0, 346, 0, 348, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	381, 0, 383, 0, 385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 447,
}

var tmCheck = []int16{
	1, 18, 18, 19, 10, 64, 8, 23, 10, 15, 26, 12, 18, 15, 16, 49, 17, 19, 24, 21,
	22, 23, 24, 18, 19, 18, 19, 234, 23, 12, 23, 15, 38, 26, 36, 18, 42, 21, 40,
	41, 2, 15, 76, 17, 46, 79, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 18, 37, 235, 83, 51, 85, 86, 113, 80, 235, 11, 17, 13, 14, 94, 95,
	69, 97, 80, 20, 100, 27, 255, 256, 71, 105, 106, 107, 108, 255, 256, 2, 3,
	10, 35, 1, 322, 95, 15, 119, 17, 18, 122, 84, 67, 81, 82, 24, 74, 37, 73, 77,
	93, 185, 134, 91, 108, 459, 138, 292, 140, 28, 29, 143, 144, 42, 292, 103,
	292, 233, 18, 19, 43, 86, 10, 23, 47, 18, 185, 159, 10, 161, 23, 163, 486,
	165, 166, 489, 24, 169, 170, 233, 172, 106, 24, 328, 154, 155, 178, 179, 37,
	89, 328, 91, 184, 185, 186, 187, 188, 511, 190, 18, 514, 314, 194, 10, 23,
	169, 170, 15, 15, 17, 233, 233, 233, 205, 528, 179, 23, 24, 210, 211, 80,
	366, 214, 267, 268, 217, 10, 219, 366, 221, 366, 15, 224, 82, 226, 388, 389,
	229, 314, 23, 24, 233, 234, 235, 18, 19, 146, 172, 267, 23, 242, 269, 106,
	206, 246, 273, 106, 249, 10, 251, 314, 80, 187, 15, 21, 257, 236, 259, 235,
	261, 394, 23, 24, 265, 10, 267, 268, 269, 18, 15, 12, 18, 312, 275, 276, 17,
	23, 23, 24, 214, 234, 314, 314, 314, 48, 27, 313, 261, 52, 53, 292, 265, 56,
	57, 18, 59, 298, 61, 62, 23, 18, 303, 66, 305, 68, 307, 70, 361, 72, 363,
	312, 75, 314, 15, 11, 17, 318, 403, 11, 482, 322, 476, 257, 20, 259, 459,
	328, 20, 476, 10, 18, 10, 361, 80, 363, 23, 15, 460, 35, 403, 275, 276, 35,
	24, 20, 347, 234, 502, 17, 18, 21, 328, 354, 34, 502, 489, 502, 292, 27, 361,
	37, 363, 80, 122, 366, 367, 521, 11, 322, 371, 403, 403, 403, 521, 460, 521,
	20, 404, 10, 18, 354, 0, 384, 18, 23, 387, 388, 389, 23, 0, 9, 35, 24, 257,
	210, 259, 460, 257, 9, 259, 18, 403, 34, 313, 81, 82, 83, 409, 410, 411, 412,
	88, 89, 387, 91, 455, 418, 10, 420, 178, 97, 98, 15, 100, 101, 10, 103, 460,
	460, 460, 107, 366, 367, 233, 322, 194, 410, 411, 10, 24, 233, 10, 119, 120,
	418, 122, 15, 449, 0, 34, 18, 10, 24, 455, 10, 23, 15, 9, 460, 15, 10, 138,
	34, 140, 141, 15, 143, 144, 145, 146, 472, 473, 10, 24, 476, 449, 18, 15,
	261, 133, 482, 23, 159, 34, 161, 17, 163, 10, 165, 166, 167, 15, 15, 17, 404,
	27, 498, 10, 472, 476, 502, 178, 15, 10, 10, 10, 10, 184, 15, 15, 15, 15, 15,
	190, 17, 192, 56, 194, 10, 521, 10, 198, 10, 15, 498, 15, 10, 15, 10, 10, 10,
	15, 72, 15, 15, 15, 10, 83, 10, 86, 217, 15, 219, 15, 221, 108, 17, 224, 10,
	226, 227, 97, 229, 15, 100, 10, 27, 10, 10, 10, 15, 107, 15, 15, 15, 242, 95,
	502, 17, 246, 10, 20, 249, 119, 251, 15, 122, 12, 411, 12, 15, 50, 15, 388,
	389, 187, 521, 321, 18, 18, 24, 2, 138, 15, 140, 12, 412, 143, 144, 18, 18,
	24, 18, 403, 18, 18, 18, 284, 15, 78, 403, 15, 73, 159, 20, 161, 18, 163, 27,
	165, 166, 298, 18, 81, 27, 154, 303, 18, 305, 3, 307, 20, 178, 18, 15, 418,
	290, 15, 184, 185, 186, 46, 188, 12, 190, 15, 23, 15, 194, 15, 15, 24, 15,
	15, 15, 0, 0, 0, 78, 205, 0, 3, 312, 78, 95, 498, 485, 214, 234, 234, 347,
	217, 321, 219, 322, 221, 321, 178, 224, 411, 226, 108, 328, 229, -1, 419, 86,
	187, 187, 235, -1, -1, -1, -1, -1, -1, 242, -1, -1, -1, 246, -1, 265, 249,
	-1, 251, -1, 384, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 267,
	268, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, 298, 11, 12, 13, 14, 303, -1, 305, 18,
	307, -1, -1, -1, 367, -1, 25, 26, 27, -1, -1, 30, -1, 32, 33, -1, 35, -1, 37,
	38, 39, 328, -1, -1, 43, 44, -1, -1, 47, 467, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 347, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, -1, 361, -1, 363,
	15, 16, -1, -1, 19, 81, 21, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 384, 36, -1, -1, -1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10,
	-1, -1, -1, -1, -1, 16, -1, -1, 19, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 40, 41, -1, -1, -1, -1, 46, 476, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1,
	-1, 15, 16, -1, -1, -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 36, -1, -1, -1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, -1, 16,
	-1, -1, -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	36, -1, -1, -1, 40, 41, -1, -1, -1, 45, 46, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1,
	-1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1, -1, 21, 22,
	23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41,
	-1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 100,
	-1, -1, -1, -1, -1, -1, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119,
	-1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138,
	-1, 140, -1, -1, 143, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 178, -1, -1, -1, -1, -1, 184, -1, -1, -1, -1, -1, 190, -1, -1,
	-1, 194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 3, -1,
	-1, -1, -1, 8, 9, 217, -1, 219, -1, 221, -1, -1, 224, -1, 226, -1, 21, 229,
	-1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, 242, -1, -1, -1, 246, 40, 41,
	249, -1, 251, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298, -1, -1, 0, -1, 303, 3, 305,
	-1, 307, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1,
	-1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1,
	-1, -1, -1, 347, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	2, 3, 384, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 19, 20,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 486, -1, -1, -1, -1, 0, -1, -1, -1, -1,
	-1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 511, 21, 513, 514,
	-1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, 526, -1, 528, -1, 530, 40, 41,
	-1, -1, -1, 536, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	0, 81, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 0, 81, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 95, -1, 97, -1, -1, 100, -1, -1, -1, -1, -1, -1, 107, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, 161, -1, 163, -1,
	165, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1,
	-1, 184, -1, -1, -1, -1, -1, 190, -1, -1, -1, 194, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, 217, -1, 219,
	-1, 221, -1, -1, 224, -1, 226, -1, -1, 229, -1, 19, 20, -1, -1, 235, -1, -1,
	-1, -1, -1, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1, 251, 40, 41, -1, 43,
	-1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, -1,
	-1, -1, -1, -1, 298, -1, 0, -1, -1, 303, -1, 305, -1, 307, 8, 9, -1, -1, -1,
	-1, 314, -1, -1, -1, -1, -1, -1, -1, 322, -1, -1, 25, 26, -1, 328, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, 347, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, -1, -1, -1, 384, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, -1,
	-1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 460, -1, -1, -1, -1,
	-1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, 476, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8,
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 100, -1, -1, -1, -1, -1,
	-1, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, -1, 140, -1, -1,
	143, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1,
	161, -1, 163, -1, 165, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 178,
	-1, -1, -1, -1, -1, 184, -1, 186, -1, 188, -1, 190, -1, -1, -1, 194, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1,
	217, -1, 219, -1, 221, -1, -1, 224, -1, 226, -1, -1, 229, -1, 19, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1, 251, 40,
	41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, -1, -1, -1, -1, -1, -1, 298, -1, -1, -1, -1, 303, -1, 305, -1, 307, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 19, -1, -1, -1, 23, -1, -1, 26, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1,
	347, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 18, 19, -1, 384,
	-1, 23, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1,
	462, 463, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, 494, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, 44, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 10, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 24, -1, 26, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1,
	-1, -1, -1, -1, 41, 2, 3, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, -1, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, 94, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, 97, -1, -1,
	100, -1, -1, -1, -1, -1, 150, 107, 97, -1, -1, 100, -1, -1, -1, -1, -1, -1,
	107, 119, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1, -1,
	-1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1, -1, -1, 138, -1, 140, -1, -1,
	143, 144, -1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, -1, 159,
	-1, 161, -1, 163, -1, 165, 166, 178, -1, -1, -1, -1, -1, 184, -1, 186, -1,
	188, 178, 190, 235, -1, -1, 194, 184, -1, 186, -1, 188, -1, 190, -1, -1, -1,
	194, -1, -1, -1, -1, -1, 255, 256, -1, -1, -1, -1, 217, -1, 219, -1, 221, -1,
	-1, 224, -1, 226, -1, 217, 229, 219, -1, 221, -1, -1, 224, -1, 226, -1, -1,
	229, -1, 242, -1, -1, -1, 246, -1, 292, 249, -1, 251, -1, 242, -1, -1, -1,
	246, -1, -1, 249, -1, 251, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 328, -1, 97, -1, -1, 100, -1, -1, -1, -1,
	-1, -1, 107, -1, 298, -1, -1, -1, -1, 303, -1, 305, -1, 307, 119, 298, -1,
	122, -1, -1, 303, -1, 305, -1, 307, -1, -1, -1, 366, -1, -1, -1, -1, 138, -1,
	140, -1, -1, 143, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	347, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, 347, -1, -1, -1, -1, -1,
	-1, -1, -1, 178, -1, -1, -1, -1, -1, 184, -1, 186, -1, 188, -1, 190, -1, -1,
	-1, 194, 384, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, 384, -1, -1, -1, -1,
	-1, -1, 97, -1, -1, 100, 217, -1, 219, -1, 221, -1, 107, 224, -1, 226, -1,
	-1, 229, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1, -1, -1, 242, 476, -1, -1,
	246, -1, -1, 249, -1, 251, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1,
	-1, -1, -1, -1, -1, -1, 502, -1, -1, -1, -1, -1, 159, -1, 161, -1, 163, -1,
	165, 166, -1, -1, -1, -1, -1, 521, -1, -1, -1, -1, -1, 178, -1, -1, -1, 298,
	-1, 184, -1, 186, 303, 188, 305, 190, 307, -1, -1, 194, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 217, -1,
	219, -1, 221, -1, -1, 224, -1, 226, -1, -1, 229, -1, 347, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1, 251, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 384, 9, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 298, -1, 40, 41, -1, 303, -1, 305, -1, 307, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, -1, -1, -1, -1, -1, -1, 347, 0,
	1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1,
	-1, -1, -1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 384, 37, 38, 39, -1,
	-1, 42, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41, -1, -1, -1,
	-1, 46, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 27, -1, 29,
	-1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1,
	-1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1,
	-1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3,
	4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1,
	-1, 25, 26, 27, 28, 29, 30, -1, 32, 33, 34, 35, -1, 37, 38, 39, -1, -1, 42,
	43, 44, -1, -1, 47, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1,
	81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 21, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1,
	-1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 29, -1, -1, -1, 33, -1, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1,
	-1, 97, -1, -1, 100, -1, -1, -1, -1, -1, -1, 107, 97, -1, -1, 100, -1, -1,
	-1, -1, -1, -1, 107, 119, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, 119, -1,
	-1, 122, -1, -1, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1, -1, -1, 138,
	-1, 140, -1, -1, 143, 144, -1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166,
	-1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166, 178, -1, -1, -1, -1, -1,
	184, -1, -1, -1, 235, 178, 190, -1, -1, -1, 194, 184, -1, -1, -1, -1, -1,
	190, -1, -1, -1, 194, -1, -1, 255, 256, -1, -1, -1, -1, -1, -1, -1, 217, -1,
	219, -1, 221, -1, -1, 224, -1, 226, -1, 217, 229, 219, -1, 221, -1, -1, 224,
	-1, 226, -1, -1, 229, -1, 242, -1, -1, 292, 246, -1, -1, 249, -1, 251, -1,
	242, -1, -1, -1, 246, -1, -1, 249, -1, 251, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 83, -1, -1, -1, -1, -1, -1, -1, -1, 328, -1, -1, -1, -1, 97, -1, -1, 100,
	-1, -1, -1, -1, -1, -1, 107, -1, 298, -1, -1, -1, -1, 303, -1, 305, -1, 307,
	119, 298, -1, 122, -1, -1, 303, -1, 305, -1, 307, 366, -1, -1, -1, -1, -1,
	-1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 347, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, 347, 406,
	407, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1, 184, -1, -1, -1, -1,
	-1, 190, -1, -1, -1, 194, 384, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, 384,
	-1, -1, -1, -1, -1, -1, 97, -1, -1, 100, 217, -1, 219, -1, 221, -1, 107, 224,
	-1, 226, -1, -1, 229, -1, -1, -1, -1, -1, 119, -1, -1, 122, -1, 476, -1, 242,
	-1, -1, -1, 246, -1, -1, 249, 486, 251, -1, -1, 138, -1, 140, -1, -1, 143,
	144, -1, -1, -1, -1, -1, 502, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, 161,
	514, 163, -1, 165, 166, -1, -1, 521, -1, -1, -1, -1, -1, -1, -1, -1, 178, -1,
	-1, -1, 298, -1, 184, -1, -1, 303, -1, 305, 190, 307, -1, -1, 194, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 217, -1, 219, -1, 221, -1, -1, 224, -1, 226, -1, -1, 229, -1, 347, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1,
	251, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 384, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 298, -1, -1, 41, -1, 303, -1, 305, -1,
	307, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, -1, -1, -1, -1,
	-1, -1, 347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1,
	-1, 384, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, -1, -1, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14,
	-1, -1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, -1, 32, 33,
	34, 35, -1, 37, 38, 39, -1, -1, 8, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 41, -1, -1, -1, -1, -1, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 39,
	-1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 83, -1, -1, 97, -1, -1, 100, -1, -1, -1, -1, -1, -1, 107, 97, -1,
	-1, 100, -1, -1, -1, -1, -1, -1, 107, 119, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 119, -1, -1, -1, -1, -1, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1,
	-1, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1, -1, 159, -1, 161, -1,
	163, -1, 165, 166, -1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1,
	-1, -1, -1, -1, 184, -1, -1, -1, -1, -1, 190, -1, -1, -1, -1, 184, -1, -1,
	-1, -1, -1, 190, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	217, -1, 219, -1, 221, -1, -1, 224, -1, 226, -1, 217, 229, 219, -1, 221, -1,
	-1, 224, -1, 226, -1, -1, 229, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1,
	251, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1, 251, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298, -1, -1, -1, -1, 303, -1, 305,
	-1, 307, -1, 298, -1, -1, -1, -1, 303, -1, 305, -1, 307, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5,
	6, 7, 347, 9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 347, 20, -1, -1, -1, -1,
	25, 26, 27, -1, -1, 30, -1, 32, 33, 34, 35, 83, 37, 38, 39, -1, -1, -1, 43,
	44, 384, -1, 47, -1, -1, 97, -1, -1, 100, -1, -1, 384, -1, -1, -1, 107, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	81, -1, -1, 83, -1, -1, -1, -1, -1, -1, 138, -1, 140, -1, -1, 143, 144, 97,
	-1, -1, 100, -1, -1, -1, -1, -1, -1, 107, -1, -1, -1, 159, -1, 161, -1, 163,
	-1, 165, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 184, -1, 138, -1, 140, -1, 190, 143, 144, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, 217, -1,
	219, -1, 221, -1, -1, 224, -1, 226, -1, -1, 229, -1, -1, 184, -1, -1, -1, -1,
	-1, 190, -1, -1, -1, 242, -1, -1, -1, 246, -1, -1, 249, -1, 251, -1, -1, -1,
	-1, 83, -1, -1, -1, -1, -1, -1, -1, -1, 217, -1, 219, -1, 221, 97, -1, 224,
	100, 226, -1, -1, 229, -1, -1, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, 242,
	-1, -1, -1, 246, -1, -1, 249, 298, 251, -1, -1, -1, 303, -1, 305, -1, 307,
	-1, -1, -1, 138, -1, 140, -1, -1, 143, 144, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 159, -1, 161, -1, 163, -1, 165, 166, -1, -1, -1, -1,
	-1, -1, 298, 347, -1, -1, -1, 303, -1, 305, -1, 307, -1, 184, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 384, -1, -1, -1, -1, -1, 217, -1, 219, -1, 221, 347, -1, 224, -1,
	226, -1, -1, 229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 242, -1,
	-1, -1, 246, -1, -1, 249, -1, 251, -1, -1, -1, -1, -1, -1, -1, 384, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 298, -1,
	-1, -1, -1, 303, -1, 305, -1, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 347, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 384,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 5, 4, 5, 4, 4, 3, 2, 0, 2, 0, 6, 3, 3, 3, 4, 3, 3, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 3, 3, 3, 1, 8, 7, 7, 6, 7, 6, 6, 5,
	5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 4, 3, 3, 1, 1, 5, 4, 4, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4, 7, 6, 6, 5, 8,
	7, 7, 6, 7, 6, 6, 5, 3, 1, 1, 1, 1, 7, 5, 6, 4, 4, 4, 4, 5, 5, 6, 4, 4, 5, 3,
	1, 3, 1, 2, 1, 1, 2, 1, 3, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0, 1,
	3, 3, 3, 5, 4, 3, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	3, 3, 1, 2, 1, 3, 1, 4, 2, 1, 3, 5, 5, 2, 2, 4, 1, 4, 2, 1, 3, 2, 1, 3, 3, 3,
	1, 3, 1, 4, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 3, 1, 3, 3,
	1, 1, 4, 3, 3, 2, 1, 3, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 85, 86, 86,
	87, 87, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 104,
	104, 104, 104, 104, 105, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 111, 111, 112, 112, 112, 113, 113, 114, 115, 116, 116, 117, 117, 117,
	118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 121, 121, 121, 122, 123, 123, 123, 123, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 131, 132, 132, 133, 133, 133, 133, 134, 135, 135, 136, 136, 136,
	136, 137, 137, 137, 137, 137, 138, 138, 139, 140, 140, 141, 142, 142, 142,
	143, 143, 144, 144, 145, 145, 146, 147, 147, 147, 147, 147, 147, 147, 147,
	148, 149, 149, 149, 149, 150, 150, 150, 151, 151, 152, 153, 153, 153, 154,
	155, 156, 156, 157, 157, 158, 158, 158, 158, 159, 159, 160, 160, 161, 161,
	161, 161, 162, 162, 162, 163, 163, 163, 163, 163, 163, 163, 164, 164, 165,
	165,
}

var tmRuleType = [...]NodeType{
	Identifier,           // identifier : ID
	Identifier,           // identifier : 'brackets'
	Identifier,           // identifier : 'inline'
	Identifier,           // identifier : 'prec'
	Identifier,           // identifier : 'shift'
	Identifier,           // identifier : 'input'
	Identifier,           // identifier : 'left'
	Identifier,           // identifier : 'right'
	Identifier,           // identifier : 'nonassoc'
	Identifier,           // identifier : 'generate'
	Identifier,           // identifier : 'assert'
	Identifier,           // identifier : 'empty'
	Identifier,           // identifier : 'nonempty'
	Identifier,           // identifier : 'global'
	Identifier,           // identifier : 'explicit'
	Identifier,           // identifier : 'lookahead'
	Identifier,           // identifier : 'param'
	Identifier,           // identifier : 'flag'
	Identifier,           // identifier : 'no-eoi'
	Identifier,           // identifier : 's'
	Identifier,           // identifier : 'x'
	Identifier,           // identifier : 'expect'
	Identifier,           // identifier : 'expect-rr'
	Identifier,           // identifier : 'class'
	Identifier,           // identifier : 'interface'
	Identifier,           // identifier : 'space'
	Identifier,           // identifier : 'extend'
	Identifier,           // identifier : 'inject'
	Identifier,           // identifier : 'layout'
	Identifier,           // identifier : 'language'
	Identifier,           // identifier : 'lalr'
	Identifier,           // identifier : 'lexer'
	Identifier,           // identifier : 'parser'
	Identifier,           // identifier_Keywords : ID
	Identifier,           // identifier_Keywords : 'brackets'
	Identifier,           // identifier_Keywords : 'inline'
	Identifier,           // identifier_Keywords : 'prec'
	Identifier,           // identifier_Keywords : 'shift'
	Identifier,           // identifier_Keywords : 'input'
	Identifier,           // identifier_Keywords : 'left'
	Identifier,           // identifier_Keywords : 'right'
	Identifier,           // identifier_Keywords : 'nonassoc'
	Identifier,           // identifier_Keywords : 'generate'
	Identifier,           // identifier_Keywords : 'assert'
	Identifier,           // identifier_Keywords : 'empty'
	Identifier,           // identifier_Keywords : 'nonempty'
	Identifier,           // identifier_Keywords : 'global'
	Identifier,           // identifier_Keywords : 'explicit'
	Identifier,           // identifier_Keywords : 'lookahead'
	Identifier,           // identifier_Keywords : 'param'
	Identifier,           // identifier_Keywords : 'flag'
	Identifier,           // identifier_Keywords : 'no-eoi'
	Identifier,           // identifier_Keywords : 's'
	Identifier,           // identifier_Keywords : 'x'
	Identifier,           // identifier_Keywords : 'expect'
	Identifier,           // identifier_Keywords : 'expect-rr'
	Identifier,           // identifier_Keywords : 'class'
	Identifier,           // identifier_Keywords : 'interface'
	Identifier,           // identifier_Keywords : 'space'
	Identifier,           // identifier_Keywords : 'extend'
	Identifier,           // identifier_Keywords : 'inject'
	Identifier,           // identifier_Keywords : 'layout'
	Identifier,           // identifier_Keywords : 'language'
	Identifier,           // identifier_Keywords : 'lalr'
	Identifier,           // identifier_Keywords : 'lexer'
	Identifier,           // identifier_Keywords : 'parser'
	Identifier,           // identifier_Keywords : 'true'
	Identifier,           // identifier_Keywords : 'false'
	Identifier,           // identifier_Keywords : 'separator'
	Identifier,           // identifier_Keywords : 'as'
	Identifier,           // identifier_Keywords : 'import'
	Identifier,           // identifier_Keywords : 'set'
	IntegerLiteral,       // integer_literal : icon
	StringLiteral,        // string_literal : scon
	BooleanLiteral,       // boolean_literal : 'true'
	BooleanLiteral,       // boolean_literal : 'false'
	0,                    // literal : string_literal
	0,                    // literal : integer_literal
	0,                    // literal : boolean_literal
	Pattern,              // pattern : regexp
	Command,              // command : code
	SyntaxProblem,        // syntax_problem : error
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section
	0,                    // file : header import__optlist option_optlist syntax_problem parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem
	0,                    // file : header import__optlist option_optlist lexer_section parser_section
	0,                    // file : header import__optlist option_optlist lexer_section
	0,                    // file : header import__optlist option_optlist parser_section
	0,                    // file : header import__optlist option_optlist
	0,                    // import__optlist : import__optlist import_
	0,                    // import__optlist :
	0,                    // option_optlist : option_optlist option
	0,                    // option_optlist :
	Header,               // header : 'language' identifier_Keywords '(' identifier_Keywords ')' ';'
	Header,               // header : 'language' identifier_Keywords ';'
	LexerSection,         // lexer_section : '::' .recoveryScope 'lexer' lexer_parts
	ParserSection,        // parser_section : '::' .recoveryScope 'parser' grammar_parts
	Import,               // import_ : 'import' identifier string_literal ';'
	Import,               // import_ : 'import' string_literal ';'
	Option,               // option : identifier '=' expression
	Symref,               // symref : identifier
	Symref,               // symref_Args : identifier args
	Symref,               // symref_Args : identifier
	RawType,              // rawType : code
	0,                    // lexer_parts : lexer_part
	0,                    // lexer_parts : lexer_parts lexer_part_OrSyntaxError
	0,                    // lexer_part : named_pattern
	0,                    // lexer_part : lexeme
	0,                    // lexer_part : lexer_directive
	0,                    // lexer_part : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : named_pattern
	0,                    // lexer_part_OrSyntaxError : lexeme
	0,                    // lexer_part_OrSyntaxError : lexer_directive
	0,                    // lexer_part_OrSyntaxError : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : syntax_problem
	NamedPattern,         // named_pattern : identifier '=' pattern
	StartConditionsScope, // start_conditions_scope : start_conditions '{' .recoveryScope lexer_parts '}'
	StartConditions,      // start_conditions : '<' '*' '>'
	StartConditions,      // start_conditions : '<' stateref_list_Comma_separated '>'
	0,                    // stateref_list_Comma_separated : stateref_list_Comma_separated ',' stateref
	0,                    // stateref_list_Comma_separated : stateref
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':'
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':'
	LexemeAttrs,          // lexeme_attrs : '(' lexeme_attribute ')'
	LexemeAttribute,      // lexeme_attribute : 'class'
	LexemeAttribute,      // lexeme_attribute : 'space'
	DirectiveBrackets,    // lexer_directive : '%' 'brackets' symref symref ';'
	InclusiveStartConds,  // lexer_directive : '%' 's' lexer_state_list_Comma_separated ';'
	ExclusiveStartConds,  // lexer_directive : '%' 'x' lexer_state_list_Comma_separated ';'
	0,                    // lexer_state_list_Comma_separated : lexer_state_list_Comma_separated ',' lexer_state
	0,                    // lexer_state_list_Comma_separated : lexer_state
	Stateref,             // stateref : identifier
	LexerState,           // lexer_state : identifier
	0,                    // grammar_parts : grammar_part
	0,                    // grammar_parts : grammar_parts grammar_part_OrSyntaxError
	0,                    // grammar_part : nonterm
	0,                    // grammar_part : template_param
	0,                    // grammar_part : directive
	0,                    // grammar_part_OrSyntaxError : nonterm
	0,                    // grammar_part_OrSyntaxError : template_param
	0,                    // grammar_part_OrSyntaxError : directive
	0,                    // grammar_part_OrSyntaxError : syntax_problem
	Nonterm,              // nonterm : identifier nonterm_params nonterm_alias rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params nonterm_alias rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params nonterm_alias reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params nonterm_alias ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_alias rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_alias rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_alias reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_alias ':' rules ';'
	Nonterm,              // nonterm : identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier rawType ':' rules ';'
	Nonterm,              // nonterm : identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier nonterm_alias reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier nonterm_alias ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params nonterm_alias reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params nonterm_alias ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_alias reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_alias ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier ':' rules ';'
	NontermAlias,         // nonterm_alias : '[' identifier_Keywords ']'
	Assoc,                // assoc : 'left'
	Assoc,                // assoc : 'right'
	Assoc,                // assoc : 'nonassoc'
	ParamModifier,        // param_modifier : 'lookahead'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier ';'
	TemplateParam,        // template_param : '%' param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_type identifier ';'
	DirectivePrio,        // directive : '%' assoc references ';'
	DirectiveInput,       // directive : '%' 'input' inputref_list_Comma_separated ';'
	DirectiveInterface,   // directive : '%' 'interface' identifier_list_Comma_separated ';'
	DirectiveAssert,      // directive : '%' 'assert' 'empty' rhsSet ';'
	DirectiveAssert,      // directive : '%' 'assert' 'nonempty' rhsSet ';'
	DirectiveSet,         // directive : '%' 'generate' identifier '=' rhsSet ';'
	DirectiveExpect,      // directive : '%' 'expect' integer_literal ';'
	DirectiveExpectRR,    // directive : '%' 'expect-rr' integer_literal ';'
	DirectiveInject,      // directive : '%' 'inject' symref reportClause ';'
	0,                    // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0,                    // identifier_list_Comma_separated : identifier
	0,                    // inputref_list_Comma_separated : inputref_list_Comma_separated ',' inputref
	0,                    // inputref_list_Comma_separated : inputref
	Inputref,             // inputref : symref 'no-eoi'
	Inputref,             // inputref : symref
	0,                    // references : symref
	0,                    // references : references symref
	0,                    // rules : rule0
	0,                    // rules : rules '|' rule0
	Rule,                 // rule0 : predicate rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsParts rhsSuffix
	Rule,                 // rule0 : predicate rhsParts reportClause
	Rule,                 // rule0 : predicate rhsParts
	Rule,                 // rule0 : predicate rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsSuffix
	Rule,                 // rule0 : predicate reportClause
	Rule,                 // rule0 : predicate
	Rule,                 // rule0 : rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : rhsParts rhsSuffix
	Rule,                 // rule0 : rhsParts reportClause
	Rule,                 // rule0 : rhsParts
	Rule,                 // rule0 : rhsSuffix reportClause
	Rule,                 // rule0 : rhsSuffix
	Rule,                 // rule0 : reportClause
	Rule,                 // rule0 :
	0,                    // rule0 : syntax_problem
	Predicate,            // predicate : '[' predicate_expression ']'
	RhsSuffix,            // rhsSuffix : '%' 'prec' symref
	RhsSuffix,            // rhsSuffix : '%' 'shift' symref
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated reportAs
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated
	ReportClause,         // reportClause : '->' identifier reportAs
	ReportClause,         // reportClause : '->' identifier
	ReportAs,             // reportAs : 'as' identifier
	0,                    // rhsParts : rhsPart
	0,                    // rhsParts : rhsParts rhsPart_OrSyntaxError
	0,                    // rhsPart : rhsAssignment
	0,                    // rhsPart : command
	0,                    // rhsPart : rhsStateMarker
	0,                    // rhsPart : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : rhsAssignment
	0,                    // rhsPart_OrSyntaxError : command
	0,                    // rhsPart_OrSyntaxError : rhsStateMarker
	0,                    // rhsPart_OrSyntaxError : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : syntax_problem
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate_list_And_separated '&' lookahead_predicate
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate
	RhsLookahead,         // rhsLookahead : '(?=' lookahead_predicate_list_And_separated ')'
	LookaheadPredicate,   // lookahead_predicate : '!' symref
	LookaheadPredicate,   // lookahead_predicate : symref
	StateMarker,          // rhsStateMarker : '.' identifier
	0,                    // rhsAssignment : rhsOptional
	RhsAssignment,        // rhsAssignment : identifier '=' rhsOptional
	RhsPlusAssignment,    // rhsAssignment : identifier '+=' rhsOptional
	0,                    // rhsOptional : rhsCast
	RhsOptional,          // rhsOptional : rhsCast '?'
	0,                    // rhsCast : rhsAlias
	RhsCast,              // rhsCast : rhsAlias 'as' symref_Args
	0,                    // rhsAlias : rhsPrimary
	RhsAlias,             // rhsAlias : rhsPrimary '[' identifier_Keywords ']'
	ListSeparator,        // listSeparator : 'separator' references
	RhsSymbol,            // rhsPrimary : symref_Args
	RhsNested,            // rhsPrimary : '(' .recoveryScope rules ')'
	RhsPlusList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '+'
	RhsStarList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '*'
	RhsPlusQuantifier,    // rhsPrimary : rhsPrimary '+'
	RhsStarQuantifier,    // rhsPrimary : rhsPrimary '*'
	RhsIgnored,           // rhsPrimary : '$' '(' .recoveryScope rules ')'
	0,                    // rhsPrimary : rhsSet
	RhsSet,               // rhsSet : 'set' '(' .recoveryScope setExpression ')'
	SetSymbol,            // setPrimary : identifier symref_Args
	SetSymbol,            // setPrimary : symref_Args
	SetCompound,          // setPrimary : '(' setExpression ')'
	SetComplement,        // setPrimary : '~' setPrimary
	0,                    // setExpression : setPrimary
	SetOr,                // setExpression : setExpression '|' setExpression
	SetAnd,               // setExpression : setExpression '&' setExpression
	0,                    // nonterm_param_list_Comma_separated : nonterm_param_list_Comma_separated ',' nonterm_param
	0,                    // nonterm_param_list_Comma_separated : nonterm_param
	NontermParams,        // nonterm_params : '<' nonterm_param_list_Comma_separated '>'
	0,                    // nonterm_param : param_ref
	InlineParameter,      // nonterm_param : identifier identifier '=' param_value
	InlineParameter,      // nonterm_param : identifier identifier
	ParamRef,             // param_ref : identifier
	SymrefArgs,           // args : '<' argument_list_Comma_separatedopt '>'
	0,                    // argument_list_Comma_separated : argument_list_Comma_separated ',' argument
	0,                    // argument_list_Comma_separated : argument
	0,                    // argument_list_Comma_separatedopt : argument_list_Comma_separated
	0,                    // argument_list_Comma_separatedopt :
	ArgumentVal,          // argument : param_ref ':' param_value
	ArgumentVal,          // argument : param_ref
	ArgumentTrue,         // argument : '+' param_ref
	ArgumentFalse,        // argument : '~' param_ref
	ParamType,            // param_type : 'flag'
	ParamType,            // param_type : 'param'
	0,                    // param_value : literal
	0,                    // param_value : param_ref
	0,                    // predicate_primary : param_ref
	PredicateNot,         // predicate_primary : '!' param_ref
	PredicateEq,          // predicate_primary : param_ref '==' literal
	PredicateNotEq,       // predicate_primary : param_ref '!=' literal
	0,                    // predicate_expression : predicate_primary
	PredicateAnd,         // predicate_expression : predicate_expression '&&' predicate_expression
	PredicateOr,          // predicate_expression : predicate_expression '||' predicate_expression
	0,                    // expression : literal
	0,                    // expression : symref_Args
	Array,                // expression : '[' expression_list_Comma_separated ',' ']'
	Array,                // expression : '[' expression_list_Comma_separated ']'
	Array,                // expression : '[' ',' ']'
	Array,                // expression : '[' ']'
	0,                    // expression : syntax_problem
	0,                    // expression_list_Comma_separated : expression_list_Comma_separated ',' expression
	0,                    // expression_list_Comma_separated : expression
	0,                    // rawTypeopt : rawType
	0,                    // rawTypeopt :
}

// set(follow ERROR) = REM, COLONCOLON, OR, SEMICOLON, DOT, COMMA, RBRACK, LPAREN, LPARENQUESTASSIGN, MINUSGT, RPAREN, RBRACE, LT, DOLLAR, ERROR, ID, SEPARATOR, SET, ASSERT, BRACKETS, CLASS, EMPTY, EXPECT, EXPECTMINUSRR, EXPLICIT, EXTEND, FLAG, GENERATE, GLOBAL, INJECT, INLINE, INPUT, INTERFACE, LALR, LANGUAGE, LAYOUT, LEFT, LEXER, LOOKAHEAD, NOMINUSEOI, NONASSOC, NONEMPTY, PARAM, PARSER, PREC, RIGHT, CHAR_S, SHIFT, SPACE, CHAR_X, CODE
var afterErr = []token.Type{
	8, 9, 10, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 36, 40, 41, 45, 46, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
}
