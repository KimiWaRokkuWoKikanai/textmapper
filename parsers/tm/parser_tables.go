// generated by Textmapper; DO NOT EDIT

package tm

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/tm/token"
)

var recoveryScopeStates = map[int]bool{
	98:  true,
	137: true,
	160: true,
	161: true,
	205: true,
	335: true,
}

var tmNonterminals = [...]string{
	"identifier",
	"identifier_Keywords",
	"integer_literal",
	"string_literal",
	"boolean_literal",
	"literal",
	"pattern",
	"command",
	"syntax_problem",
	"file",
	"import__optlist",
	"option_optlist",
	"header",
	"lexer_section",
	"parser_section",
	"import_",
	"option",
	"symref",
	"symref_Args",
	"rawType",
	"lexer_parts",
	"lexer_part",
	"lexer_part_OrSyntaxError",
	"named_pattern",
	"start_conditions_scope",
	"start_conditions",
	"stateref_list_Comma_separated",
	"lexeme",
	"lexeme_attrs",
	"lexeme_attribute",
	"lexer_directive",
	"lexer_state_list_Comma_separated",
	"stateref",
	"lexer_state",
	"grammar_parts",
	"grammar_part",
	"grammar_part_OrSyntaxError",
	"nonterm",
	"assoc",
	"param_modifier",
	"template_param",
	"directive",
	"identifier_list_Comma_separated",
	"inputref_list_Comma_separated",
	"inputref",
	"references",
	"rules",
	"rule0",
	"predicate",
	"rhsSuffix",
	"reportClause",
	"reportAs",
	"rhsParts",
	"rhsPart",
	"rhsPart_OrSyntaxError",
	"lookahead_predicate_list_And_separated",
	"rhsLookahead",
	"lookahead_predicate",
	"rhsStateMarker",
	"rhsAssignment",
	"rhsOptional",
	"rhsCast",
	"listSeparator",
	"rhsPrimary",
	"rhsSet",
	"setPrimary",
	"setExpression",
	"nonterm_param_list_Comma_separated",
	"nonterm_params",
	"nonterm_param",
	"param_ref",
	"args",
	"argument_list_Comma_separated",
	"argument_list_Comma_separatedopt",
	"argument",
	"param_type",
	"param_value",
	"predicate_primary",
	"predicate_expression",
	"expression",
	"expression_list_Comma_separated",
	"rawTypeopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmDefGoto = []int32{
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1,
}

var tmGoto = []int32{
	-1, 410, -181, 3847, 3299, 3577, -129, 3516, 3603, 590, 627, 513, 593, 178,
	119, 553, 541, 3582, 3365, 40, 238, 242, 105, -62, -60, -50, 366, -23, -301,
	226, -19, -218, 128, -22, 435, 436, 362, 114, 368, 369, 216, 225, 140, 293,
	82, 146, 4099, 12, 4075, 3871, 3523, 325, 3814, 4022, 182, 547, 3925, 335,
	3980, 4015, 167, 3727, 494, 3801, 3657, -137, 66, 566, 610, 322, 3975, 163,
	487, 489, 321, 228, -138, -93, 133, 86, 374, 239,
}

var tmDefAct = []int32{
	-1, -1, -1, 91, 0, 10, 1, 23, 11, 21, 22, 14, -1, 17, 9, 13, 27, 2, 5, 24,
	30, 29, 28, 6, 31, 15, 18, 8, 12, 16, 32, 3, 7, 19, 4, 25, 20, -1, 33, 69,
	67, 70, 68, 71, 66, 43, 34, 56, 44, 54, 55, 47, 59, 50, 42, 46, 60, 35, 38,
	57, 63, 62, 61, 39, 64, 48, 51, 41, 45, 49, 65, 36, 40, 52, 37, 58, 53, -1,
	-1, 26, -1, -1, -1, -1, 104, -1, -1, -1, 95, -1, -1, -1, 90, -1, -1, -1, -1,
	-1, -1, -1, -1, 81, -1, 80, 103, 229, 217, 252, -1, 199, -1, -1, 215, -1,
	226, 231, 230, 228, 243, 246, 248, 259, -1, -1, -1, 269, 271, -1, -1, -1, -1,
	-1, -1, -1, 73, -1, -1, -1, -1, -1, -1, 88, 92, -1, -1, -1, -1, 242, -1, 274,
	-1, 292, -1, -1, -1, -1, 101, 241, -1, 238, -1, -1, -1, -1, -1, 102, -1, 169,
	-1, 207, -1, 213, 233, 236, -1, 211, 227, 235, 234, 232, 247, 257, 256, -1,
	-1, -1, 223, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1,
	-1, 84, -1, 86, 171, -1, 219, 220, 289, -1, -1, -1, 218, -1, 253, -1, -1,
	240, 239, -1, -1, -1, -1, -1, 262, 265, -1, 103, 244, -1, -1, -1, -1, -1,
	277, 245, 200, 205, -1, 203, 209, 72, 75, 74, 77, 76, 78, 250, 249, 192, -1,
	225, -1, 268, 167, -1, 168, 165, -1, -1, -1, 94, 98, -1, -1, -1, -1, 105,
	107, 110, -1, 108, 109, -1, -1, 153, 155, 156, 157, -1, 295, 301, 296, 100,
	82, 170, 290, 291, -1, -1, 197, -1, -1, 237, 258, -1, 264, 261, -1, 260, -1,
	282, 283, -1, -1, 275, 201, -1, 221, 286, 287, 272, 166, 163, -1, 164, -1,
	-1, -1, -1, 151, -1, 121, -1, 304, -1, 115, 106, 111, 114, 112, 113, -1, -1,
	-1, -1, -1, 175, 284, -1, 176, -1, -1, -1, 172, 177, 174, 285, 173, -1, -1,
	-1, 161, 154, 158, 159, 160, -1, 300, 303, -1, 198, 255, 254, 263, -1, -1,
	280, 276, 191, 162, -1, 152, -1, 150, -1, 118, -1, 119, 79, 116, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 194, -1, -1, -1, -1, 299, -1, 298, -1, 147,
	-1, 148, 120, -1, -1, 140, 117, -1, -1, -1, 188, 189, -1, -1, 195, 183, -1,
	184, 182, -1, -1, 181, 297, 302, 146, 149, 143, 145, 144, -1, -1, 138, -1,
	-1, 130, 185, 186, -1, 190, 193, -1, 179, -1, 142, 134, -1, 136, -1, 128, -1,
	187, -1, 180, 132, 124, -1, 126, 178, 122, -1, -1, -1, -1,
}

const tmActionBase = -82

var tmAction = []int32{
	-58, 3303, 1769, -82, -82, -82, -82, -82, -82, -82, -82, -82, 1989, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, 4, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -8, 2070, -82, 336, 400, 3342, 3342, -82, 337, 20, 112, -82, 1769, 2915,
	2332, -82, 400, 67, 97, 3342, 2963, 473, 3011, 263, -82, 318, -82, 3422, -82,
	-82, -82, 355, -82, 765, -5, -82, 546, -82, -82, -82, -82, -82, 2412, 2659,
	-82, 76, 2693, 169, -82, -82, 400, 330, 400, 400, 354, 395, 394, -82, 498,
	486, 237, 493, 185, 236, -82, -82, 365, 400, 3342, 3342, -82, 3342, -82, 135,
	-82, 156, 16, 619, 3342, -82, -82, 308, -82, 473, 2752, 2446, 2499, 2446,
	-82, -7, -82, 13, -82, 692, -82, -82, -82, 109, -82, -82, -82, -82, -82, -82,
	-82, -82, 2110, 3342, 3342, -82, 8, 3342, -82, 371, 400, 372, 375, 400, 488,
	400, 496, 497, -82, 2824, 3050, 1847, 292, -82, 442, -82, -82, 384, -82, -82,
	-82, 73, 73, 2963, -82, 2963, -82, 3342, 492, -82, -82, 3011, 347, 2752,
	2752, 2180, -82, -82, 188, 3539, -82, 3342, 3342, 187, 329, 490, -82, -82,
	-82, -82, 165, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 89,
	-82, 2110, -82, -82, 388, -82, -82, 391, 400, 392, -82, -82, 203, 3102, 161,
	1927, -82, -82, -82, 3143, -82, -82, 181, 2579, -82, -82, -82, -82, 1006,
	-82, -82, -82, -82, -82, -82, -82, -82, 191, 251, -82, 3199, 50, -82, -82,
	279, -82, -82, 2752, -82, 2752, -82, -82, 2110, 2875, -82, -82, 3342, -82,
	-82, -82, -82, -82, -82, 399, -82, 3342, 3342, 3342, 491, -82, 361, -82, 439,
	-82, 537, -82, -82, -82, -82, -82, -82, 2824, 312, 360, 555, 555, -82, -82,
	3342, -82, 3342, 3342, 3342, -82, -82, -82, -82, -82, 3342, 80, 3342, -82,
	-82, -82, -82, -82, 539, -82, -82, 408, -82, -82, -82, -82, 304, 316, -82,
	-82, -82, -82, 3342, -82, 415, -82, 418, -82, 3342, -82, -82, -82, 1086,
	2252, 542, 517, 517, 549, 550, 554, 548, 201, 422, -82, 428, 3264, 3342, 470,
	-82, 1406, -82, 557, -82, 3342, -82, -82, 213, 846, -82, -82, 1166, 559, 561,
	-82, -82, 517, 564, -82, -82, 3342, -82, -82, 476, 2110, -82, -82, -82, -82,
	-82, -82, -82, -82, 556, 1246, -82, 1486, 927, -82, -82, -82, 568, -82, -82,
	2110, -82, 569, -82, -82, 1567, -82, 1327, -82, 1648, -82, 570, -82, -82,
	-82, 1729, -82, -82, -82, 588, 589, -82, -82,
}

const tmTableLen = 4421

var tmTable = []int16{
	37, -97, 247, 216, 151, 214, -4, -90, 216, -98, 214, 80, -99, -91, -100,
	-101, -84, 216, -84, 214, -257, 247, -83, 206, 228, 273, -168, -84, 206,
	-102, -85, 247, 247, -103, -6, 273, -84, 206, -131, -104, -219, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -105,
	247, -136, -246, 85, -367, -368, 104, 122, 123, 410, -86, -146, 224, 228,
	299, 135, 138, 224, 104, 109, 224, 147, 149, 104, 156, 222, 224, 247, 376,
	378, 222, 109, -312, 222, 437, 104, 109, 439, 104, 222, -186, 465, -247, 314,
	-187, 210, -248, 151, 187, 151, 210, 247, 104, 131, 104, 104, -132, -187,
	-84, 210, 450, -84, -343, 454, 271, 109, 272, 109, 109, 104, 156, 156, 288,
	149, -214, -215, 273, 460, -352, 104, 156, 288, 109, 389, 390, 104, 226, 230,
	149, 230, 228, 104, 228, -216, 370, 104, 288, -147, 109, -328, -148, 202,
	-217, 274, 239, 305, 202, 275, 230, 252, 254, 85, -190, 123, -84, 202, 104,
	-218, -86, 104, -139, 104, -191, 383, -303, 268, 37, 230, 294, 109, 281,
	-308, 109, 331, 109, 332, 141, 294, -304, 149, 281, 149, 196, 156, 196, 273,
	247, 156, -305, 226, 226, 230, -218, 229, 435, -339, 152, 149, 149, -340,
	-341, -342, 87, -343, -344, -345, -346, -86, -347, -348, 247, -207, 333,
	-349, 118, -350, 334, -351, -321, -352, 149, 409, -353, 452, 204, 206, 118,
	104, 293, -433, 247, 118, 323, 165, 268, 140, -421, 293, 336, 271, 109, 272,
	37, 118, -434, -322, 118, 230, -323, 438, -162, 273, 293, 447, 286, -303,
	298, -435, 83, 156, 118, 176, 118, 118, 377, 377, 226, -207, 226, -369, -202,
	149, 149, 456, 327, 372, -203, 118, 274, -305, 266, 279, 275, 203, 156, 375,
	375, 118, 287, 331, 253, 332, 267, 118, 266, 231, 305, 238, -223, 118, 268,
	273, 176, 118, -305, -163, 267, 391, -224, 156, 156, 252, -309, 291, -193,
	292, 267, 156, 176, 399, -95, -129, 278, -168, 118, -84, -84, 118, 333, 118,
	294, -168, 334, 368, 362, 369, -169, -299, -196, 156, 330, -168, 327, -84,
	-382, 323, -209, -168, -168, 430, 268, -168, -259, -261, -383, 165, -262,
	357, -86, 165, -168, 325, 156, 424, -168, -290, 230, -168, -168, -317, 375,
	125, -318, -320, -97, -168, 216, -389, 77, -198, -375, 216, -98, 280, -199,
	-99, 156, -100, -101, -84, 149, -403, 281, 395, -404, 118, -406, -390, -407,
	-408, 159, -407, -102, -422, 269, -423, -103, -6, 270, -424, 149, -312, -104,
	186, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -105, -97, -427, 216, 237, -428, 396, 428, -447, -98, 330, -448,
	-99, 358, -100, -101, -84, 216, 397, 133, -136, -201, 359, 444, 354, -204,
	-264, 328, 407, -102, 256, -266, -267, -103, -6, -203, -297, -310, -381,
	-104, -384, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -105, -97, -386, 212, 296, -246, -402, -414, 212, -98,
	-104, -417, -418, -419, -100, -101, -84, 212, -84, -431, 385, -442, 386,
	-443, 270, 311, -445, -450, 398, -102, -457, -459, -464, -103, -6, -468,
	-469, 464, 91, -104, 3, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -105, -97, 371, 212, 78, 92, 142, 324, 434,
	-98, 277, 278, 394, 356, -100, -101, -84, 212, 352, 353, 158, 87, 219, 124,
	235, 0, 236, 0, 0, -102, 363, 0, 0, -103, -6, 0, 0, 0, -220, -104, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-105, -97, 0, 204, 0, 0, 0, 0, 204, -98, 0, 0, 0, 0, -100, -101, -84, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -103, -6, 0, 0, 0, 0, -104, 0,
	-7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -105, -97, 0, 208, 0, 0, 0, 0, 208, -98, 0, 0, 0, 0, -100, -101, -84,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, -6, 0, 0, 0, 0, -104,
	0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -105, 139, 0, 0, -246, 0, 0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -410, 0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 139, 0, 0, 0, 0, 0, 0, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, -105, 129, 0, 0, -246, 0, 0, 0, 0, 129,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -410, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, -105, -136, -246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -362, 0, -284, -363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, -247, 0, 0, 0, -248, -7,
	-8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	141, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -410, 0,
	0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0,
	0, 0, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 131, -384, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -410, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	131, 0, 0, 0, 0, 0, 0, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 135, -384, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -410, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, -105, 125, 0, 0, 0, 0, 0,
	0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -410, 0, 0, 0, 125, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	-105, -136, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -284, -429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, -247, 0,
	0, 0, -248, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, 137, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	137, 0, 0, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, -105, 133, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, -105, 127, 0, 0, 0, 0, 0,
	0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, -105,
	123, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0,
	0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, -105, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51,
	-52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66,
	-67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -136, -246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, -247, 0, 0, 0, -248, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 96, 0, 0, 0,
	0, 0, 0, 0, -268, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	26, 0, 0, 0, 0, 26, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6,
	0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, 26, 93, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 93, -136, -246, -92, 0, 0, 0, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 0, -6, 0, -247, 0, 0, 0, -248, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, -165, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-413, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, 0, 0, 0, 0,
	0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, 89, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, 0, 0,
	0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0,
	0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -182, -1, -1, -1, -1,
	0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, -6, 0, 0, 0, 0, -104,
	-1, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, 279, 0, -234, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0,
	0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, 97, 0, 0, 0, 0, 0, 0, 0, -278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -6, 0, 0, 0,
	0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0,
	0, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -183, -184, -1, 0, -1, -1, -1, -1,
	0, -1, -1, -1, 0, 0, -185, -1, -1, 0, 0, -1, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, -1,
	-7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, 0, -6, 0,
	0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-234, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, -6, -136, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 0,
	-6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17,
	-18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
	-33, -34, -35, -36, -37, -38, -150, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0,
	0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -157, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, -278, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -6, 0,
	0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0,
	0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -337, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0,
	-7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16,
	-17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0, -1, -164, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0,
	0, 107, -1, -165, -1, 0, 0, -166, 0, -1, -1, -1, -1, 107, -1, -1, -1, 0, 107,
	0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 107, 0, 0, 107, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 107, 107, 0, 0, 0, 0, 0, 249, 0, -1, 0, 0, 0, 0, 0,
	107, 0, 249, 249, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 107, 227, 107, 0,
	107, 0, 107, 0, 0, 0, 107, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 251, 0,
	-1, -1, -1, -1, 249, 0, 107, -1, -1, 107, 86, 107, 0, 0, -1, -165, -1, 285,
	0, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, 0, 0, 249, -1, -1, 0, 0, -1, 0, 0,
	227, 227, 300, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 94, 112, 249, 0, 0, 128,
	105, 132, 0, 0, 0, 105, 0, 112, 0, 0, 0, -1, 112, 0, 0, 0, 0, 105, 107, 0,
	172, 0, 0, 0, 169, 171, 0, 175, 0, 0, 0, 0, 0, 0, 105, 0, 105, 105, 285, 0,
	0, 112, 0, 112, 112, 195, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 227, 112, 227,
	0, 172, 0, 0, 0, 0, 0, 105, 175, 0, 0, 0, 157, 105, 112, 106, 0, 172, 0, 0,
	112, 0, 240, 0, 242, 139, 0, 106, 243, 0, 0, 249, 106, 0, 0, 0, 0, 0, 105, 0,
	0, 105, 0, 105, 0, 112, 0, 173, 112, 0, 112, 0, 0, 0, 0, 249, 0, 0, 209, 210,
	0, 106, 0, 106, 106, 0, 0, 0, 220, 121, 0, 0, 0, 0, 0, 249, 0, 0, 106, 0, 0,
	121, 0, 0, 0, 0, 121, 0, 173, 0, 0, 250, 0, 0, 106, 309, 0, 285, 121, 0, 106,
	121, 0, 0, 173, 0, 0, 0, 0, 105, 283, 0, 0, 0, 0, 121, 112, 121, 121, 0, 289,
	290, 0, 0, 0, 106, 0, 0, 106, 0, 106, 293, 121, 0, 0, 157, 284, 0, 0, 119, 0,
	0, 121, 0, 0, 0, 0, 0, 121, 0, 121, 119, 121, 0, 121, 0, 119, 0, 121, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 119, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 121,
	0, 121, 119, 0, 119, 119, 0, 283, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 119,
	329, 0, 0, 0, 364, 0, 0, 0, 355, 119, 120, 312, 0, 284, 0, 119, 0, 119, 0,
	119, 0, 119, 120, 113, 0, 119, 0, 120, 0, 374, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	120, 154, 0, 120, 418, 0, 0, 119, 121, 0, 119, 0, 119, 170, 436, 392, 393,
	120, 0, 120, 120, 0, 0, 293, 0, 0, 136, 0, 0, 0, 113, 0, 113, 113, 120, 0, 0,
	0, 0, 0, 449, 111, 451, 453, 120, 403, 0, 113, 0, 0, 120, 0, 120, 111, 120,
	458, 120, 459, 111, 461, 120, 0, 0, 113, 0, 463, 0, 283, 364, 113, 168, 198,
	0, 174, 0, 0, 0, 329, 119, 0, 0, 120, 0, 0, 120, 0, 120, 111, 0, 111, 111,
	312, 393, 284, 113, 115, 0, 113, 0, 113, 0, 0, 0, 0, 111, 0, 0, 115, 0, 0, 0,
	312, 115, 0, 174, 0, 0, 0, 0, 248, 111, 0, 0, 0, 115, 0, 111, 177, 0, 0, 241,
	0, 0, 413, 414, 0, 0, 0, 248, 0, 0, 115, 0, 115, 115, 0, 0, 126, 248, 248,
	116, 111, 120, 0, 111, 0, 111, 0, 115, 0, 0, 150, 116, 442, 0, 113, 0, 116,
	177, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 116, 115, 0, 178, 0, 177, 117, 0, 0, 0,
	0, 0, 248, 114, 0, 0, 0, 116, 117, 116, 116, 0, 0, 117, 0, 114, 115, 0, 0,
	115, 114, 115, 0, 211, 116, 117, 0, 0, 179, 248, 0, 0, 114, 111, 178, 0, 0,
	0, 234, 0, 116, 0, 117, 0, 117, 117, 116, 0, 0, 114, 178, 114, 114, 248, 0,
	0, 110, 0, 0, 117, 0, 0, 0, 126, 0, 0, 114, 0, 110, 179, 0, 116, 0, 110, 116,
	117, 116, 0, 0, 0, 108, 117, 114, 0, 0, 179, 0, 115, 114, 150, 0, 150, 143,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 110, 0, 110, 110, 117, 304, 305, 117, 0, 117, 0,
	114, 0, 0, 114, 0, 114, 110, 0, 0, 0, 0, 0, 0, 190, 0, 192, 193, 313, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 110, 116, 208, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 110, 0, 0, 110, 0, 110, 248, 0, 0, 0, 0,
	117, 0, 0, 0, 313, 234, 0, 114, 0, 0, 0, 0, 0, 258, 0, 248, 261, 0, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
}

var tmCheck = []int16{
	1, 8, 183, 10, 97, 10, 64, 15, 15, 16, 15, 12, 19, 21, 21, 22, 23, 24, 23,
	24, 12, 202, 18, 10, 161, 17, 10, 23, 15, 36, 26, 212, 213, 40, 41, 27, 23,
	24, 18, 46, 24, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 255,
	2, 3, 37, 28, 29, 81, 82, 83, 384, 80, 18, 10, 224, 225, 90, 91, 15, 93, 81,
	18, 96, 97, 98, 99, 10, 24, 282, 320, 321, 15, 93, 17, 18, 409, 110, 98, 412,
	113, 24, 38, 1, 43, 255, 42, 10, 47, 214, 123, 216, 15, 306, 127, 87, 129,
	130, 18, 42, 23, 24, 435, 23, 56, 438, 200, 127, 200, 129, 130, 144, 145,
	146, 11, 148, 13, 14, 200, 452, 72, 154, 155, 20, 144, 338, 339, 160, 161,
	162, 163, 164, 301, 166, 303, 11, 306, 170, 35, 74, 160, 12, 77, 10, 20, 200,
	166, 18, 15, 200, 183, 184, 185, 0, 17, 188, 23, 24, 191, 35, 80, 194, 9,
	196, 27, 326, 10, 200, 201, 202, 11, 191, 17, 18, 194, 269, 196, 269, 91, 20,
	24, 214, 27, 216, 15, 218, 17, 269, 401, 222, 34, 224, 225, 226, 35, 161,
	409, 48, 97, 232, 233, 52, 53, 54, 0, 56, 57, 58, 59, 80, 61, 62, 425, 9,
	269, 66, 81, 68, 269, 70, 49, 72, 255, 384, 75, 438, 139, 140, 93, 262, 11,
	50, 445, 98, 267, 104, 269, 91, 69, 20, 273, 335, 262, 335, 277, 110, 65, 76,
	113, 282, 79, 412, 21, 335, 35, 425, 202, 10, 224, 78, 0, 294, 127, 113, 129,
	130, 320, 321, 301, 9, 303, 24, 67, 306, 307, 445, 268, 310, 73, 144, 335,
	34, 10, 201, 335, 139, 319, 320, 321, 154, 203, 385, 184, 385, 10, 160, 24,
	162, 18, 164, 24, 166, 335, 385, 154, 170, 34, 21, 24, 342, 34, 344, 345,
	346, 17, 214, 18, 216, 34, 352, 170, 354, 18, 18, 27, 10, 191, 23, 23, 194,
	385, 196, 218, 10, 385, 301, 282, 303, 15, 24, 18, 374, 269, 10, 336, 23, 17,
	380, 15, 10, 10, 405, 385, 10, 15, 15, 27, 226, 15, 277, 80, 230, 10, 267,
	397, 398, 10, 15, 401, 10, 10, 15, 405, 83, 15, 15, 8, 10, 10, 51, 2, 18, 15,
	15, 16, 201, 24, 19, 421, 21, 22, 23, 425, 17, 201, 345, 20, 262, 15, 71, 17,
	15, 99, 17, 36, 15, 200, 17, 40, 41, 200, 15, 445, 17, 46, 122, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 12, 10, 163, 15, 346, 401, 12,
	16, 385, 15, 19, 277, 21, 22, 23, 24, 352, 89, 2, 15, 277, 421, 276, 12, 18,
	268, 380, 36, 188, 15, 15, 40, 41, 73, 24, 27, 27, 46, 81, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 18, 10, 222, 3, 20, 18, 15, 16,
	46, 15, 15, 12, 21, 22, 23, 24, 23, 15, 335, 15, 336, 15, 335, 253, 15, 24,
	353, 36, 15, 15, 15, 40, 41, 0, 0, 0, 78, 46, 0, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 8, 307, 10, 3, 78, 91, 267, 408, 16, 201, 201,
	345, 277, 21, 22, 23, 24, 276, 276, 99, 37, 154, 83, 163, -1, 163, -1, -1,
	36, 282, -1, -1, 40, 41, -1, -1, -1, 45, 46, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1,
	-1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1, -1, 21, 22,
	23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41,
	-1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 17, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 81, -1, -1, -1, -1,
	-1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25,
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1,
	-1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 81, -1,
	-1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1,
	-1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41,
	-1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1,
	-1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1,
	-1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0,
	-1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 18, -1, -1, -1, -1, 23, -1, -1, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1,
	-1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, 2, 3,
	44, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1, 41,
	-1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, 26, -1, -1,
	-1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1,
	9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, -1, 37, 38, 39, -1, -1, 42, 43, 44, -1, -1,
	47, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 36, -1, -1, -1, -1, 41, -1, -1, -1, -1, 46, 81, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 27, -1, 29, -1, -1, -1, 33, -1, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1, 11,
	12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30,
	-1, 32, 33, 34, 35, -1, 37, 38, 39, -1, -1, 42, 43, 44, -1, -1, 47, -1, -1,
	-1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 81, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 29, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, 2,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, -1,
	41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 32, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, -1, -1, -1, -1, -1, -1, -1,
	-1, 41, -1, -1, -1, -1, -1, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1,
	-1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 39, -1,
	41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41,
	-1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6, 7, -1, 9, -1,
	11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1, 81, 25, 26, 27, -1, -1,
	30, -1, 32, 33, 34, 35, 93, 37, 38, 39, -1, 98, -1, 43, 44, -1, -1, 47, -1,
	-1, -1, -1, -1, 110, -1, -1, 113, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 127, -1, 129, 130, -1, -1, -1, -1, -1, 202, -1, 81, -1, -1, -1,
	-1, -1, 144, -1, 212, 213, -1, -1, -1, -1, -1, -1, 154, -1, -1, -1, -1, -1,
	160, 161, 162, -1, 164, -1, 166, -1, -1, -1, 170, -1, -1, -1, -1, 1, 2, 3, 4,
	5, 6, 7, -1, 183, -1, 11, 12, 13, 14, 255, -1, 191, 18, 19, 194, 37, 196, -1,
	-1, 25, 26, 27, 202, -1, 30, -1, 32, 33, -1, 35, -1, 37, 38, 39, -1, -1, 282,
	43, 44, -1, -1, 47, -1, -1, 224, 225, 226, -1, -1, -1, -1, -1, 81, -1, -1,
	-1, -1, -1, 80, 81, 306, -1, -1, 85, 93, 87, -1, -1, -1, 98, -1, 93, -1, -1,
	-1, 81, 98, -1, -1, -1, -1, 110, 262, -1, 113, -1, -1, -1, 110, 111, -1, 113,
	-1, -1, -1, -1, -1, -1, 127, -1, 129, 130, 282, -1, -1, 127, -1, 129, 130,
	131, -1, -1, -1, -1, -1, 144, -1, -1, -1, -1, -1, 301, 144, 303, -1, 154, -1,
	-1, -1, -1, -1, 160, 154, -1, -1, -1, 99, 166, 160, 81, -1, 170, -1, -1, 166,
	-1, 168, -1, 170, 91, -1, 93, 174, -1, -1, 401, 98, -1, -1, -1, -1, -1, 191,
	-1, -1, 194, -1, 196, -1, 191, -1, 113, 194, -1, 196, -1, -1, -1, -1, 425,
	-1, -1, 145, 146, -1, 127, -1, 129, 130, -1, -1, -1, 155, 81, -1, -1, -1, -1,
	-1, 445, -1, -1, 144, -1, -1, 93, -1, -1, -1, -1, 98, -1, 154, -1, -1, 183,
	-1, -1, 160, 241, -1, 401, 110, -1, 166, 113, -1, -1, 170, -1, -1, -1, -1,
	262, 202, -1, -1, -1, -1, 127, 262, 129, 130, -1, 212, 213, -1, -1, -1, 191,
	-1, -1, 194, -1, 196, 218, 144, -1, -1, 222, 202, -1, -1, 81, -1, -1, 154,
	-1, -1, -1, -1, -1, 160, -1, 162, 93, 164, -1, 166, -1, 98, -1, 170, -1, -1,
	-1, -1, 255, -1, -1, -1, -1, 110, -1, -1, 113, -1, -1, -1, -1, -1, -1, -1,
	191, -1, -1, 194, -1, 196, 127, -1, 129, 130, -1, 282, -1, -1, -1, -1, -1,
	262, -1, -1, -1, -1, -1, 144, 269, -1, -1, -1, 294, -1, -1, -1, 277, 154, 81,
	306, -1, 282, -1, 160, -1, 162, -1, 164, -1, 166, 93, 81, -1, 170, -1, 98,
	-1, 319, -1, -1, -1, -1, -1, 93, -1, -1, -1, 110, 98, -1, 113, 392, -1, -1,
	191, 262, -1, 194, -1, 196, 110, 409, 344, 345, 127, -1, 129, 130, -1, -1,
	352, -1, -1, 90, -1, -1, -1, 127, -1, 129, 130, 144, -1, -1, -1, -1, -1, 435,
	81, 437, 438, 154, 374, -1, 144, -1, -1, 160, -1, 162, 93, 164, 450, 166,
	452, 98, 454, 170, -1, -1, 160, -1, 460, -1, 401, 397, 166, 110, 135, -1,
	113, -1, -1, -1, 385, 262, -1, -1, 191, -1, -1, 194, -1, 196, 127, -1, 129,
	130, 425, 421, 401, 191, 81, -1, 194, -1, 196, -1, -1, -1, -1, 144, -1, -1,
	93, -1, -1, -1, 445, 98, -1, 154, -1, -1, -1, -1, 183, 160, -1, -1, -1, 110,
	-1, 166, 113, -1, -1, 170, -1, -1, 387, 388, -1, -1, -1, 202, -1, -1, 127,
	-1, 129, 130, -1, -1, 83, 212, 213, 81, 191, 262, -1, 194, -1, 196, -1, 144,
	-1, -1, 97, 93, 417, -1, 262, -1, 98, 154, -1, -1, -1, -1, -1, 160, -1, -1,
	-1, -1, 110, 166, -1, 113, -1, 170, 81, -1, -1, -1, -1, -1, 255, 81, -1, -1,
	-1, 127, 93, 129, 130, -1, -1, 98, -1, 93, 191, -1, -1, 194, 98, 196, -1,
	148, 144, 110, -1, -1, 113, 282, -1, -1, 110, 262, 154, -1, -1, -1, 163, -1,
	160, -1, 127, -1, 129, 130, 166, -1, -1, 127, 170, 129, 130, 306, -1, -1, 81,
	-1, -1, 144, -1, -1, -1, 188, -1, -1, 144, -1, 93, 154, -1, 191, -1, 98, 194,
	160, 196, -1, -1, -1, 81, 166, 160, -1, -1, 170, -1, 262, 166, 214, -1, 216,
	93, -1, -1, -1, -1, 98, -1, -1, -1, -1, 127, -1, 129, 130, 191, 232, 233,
	194, -1, 196, -1, 191, -1, -1, 194, -1, 196, 144, -1, -1, -1, -1, -1, -1,
	127, -1, 129, 130, 255, -1, -1, -1, -1, 160, -1, -1, -1, -1, -1, 166, 262,
	144, -1, -1, -1, -1, 401, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, -1,
	-1, -1, -1, -1, -1, 191, -1, -1, 194, -1, 196, 425, -1, -1, -1, -1, 262, -1,
	-1, -1, 306, 307, -1, 262, -1, -1, -1, -1, -1, 191, -1, 445, 194, -1, 196,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 425, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 445,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 5, 4, 5, 4, 4, 3, 2, 0, 2, 0, 6, 3, 3, 3, 4, 3, 3, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 3, 3, 3, 1, 8, 7, 7, 6, 7, 6, 6, 5,
	5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 4, 3, 3, 1, 1, 1, 5, 4, 4, 3, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 1, 1, 1, 1, 1, 1, 7, 5, 6, 4,
	4, 4, 4, 5, 5, 6, 4, 4, 5, 3, 1, 3, 1, 2, 1, 1, 2, 1, 3, 4, 3, 3, 2, 3, 2, 2,
	1, 3, 2, 2, 1, 2, 1, 1, 0, 1, 3, 3, 3, 5, 4, 3, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 2, 1, 2, 1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 3, 5, 5, 2, 2, 4, 1,
	4, 2, 1, 3, 2, 1, 3, 3, 3, 1, 3, 1, 4, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 3, 3, 1, 3, 3, 1, 1, 4, 3, 3, 2, 1, 3, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 85, 86, 86,
	87, 87, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 104,
	104, 104, 104, 104, 105, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 111, 111, 111, 112, 112, 112, 113, 113, 114, 115, 116, 116, 117, 117,
	117, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 130, 131, 131, 132, 132, 132, 132, 133, 134, 134, 135, 135, 135, 135,
	136, 136, 136, 136, 136, 137, 137, 138, 139, 139, 140, 141, 141, 141, 142,
	142, 143, 143, 143, 144, 145, 145, 145, 145, 145, 145, 145, 145, 146, 147,
	147, 147, 147, 148, 148, 148, 149, 149, 150, 151, 151, 151, 152, 153, 154,
	154, 155, 155, 156, 156, 156, 156, 157, 157, 158, 158, 159, 159, 159, 159,
	160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 162, 162, 163, 163,
}

var tmRuleType = [...]NodeType{
	Identifier,           // identifier : ID
	Identifier,           // identifier : 'brackets'
	Identifier,           // identifier : 'inline'
	Identifier,           // identifier : 'prec'
	Identifier,           // identifier : 'shift'
	Identifier,           // identifier : 'input'
	Identifier,           // identifier : 'left'
	Identifier,           // identifier : 'right'
	Identifier,           // identifier : 'nonassoc'
	Identifier,           // identifier : 'generate'
	Identifier,           // identifier : 'assert'
	Identifier,           // identifier : 'empty'
	Identifier,           // identifier : 'nonempty'
	Identifier,           // identifier : 'global'
	Identifier,           // identifier : 'explicit'
	Identifier,           // identifier : 'lookahead'
	Identifier,           // identifier : 'param'
	Identifier,           // identifier : 'flag'
	Identifier,           // identifier : 'no-eoi'
	Identifier,           // identifier : 's'
	Identifier,           // identifier : 'x'
	Identifier,           // identifier : 'expect'
	Identifier,           // identifier : 'expect-rr'
	Identifier,           // identifier : 'class'
	Identifier,           // identifier : 'interface'
	Identifier,           // identifier : 'space'
	Identifier,           // identifier : 'extend'
	Identifier,           // identifier : 'inject'
	Identifier,           // identifier : 'layout'
	Identifier,           // identifier : 'language'
	Identifier,           // identifier : 'lalr'
	Identifier,           // identifier : 'lexer'
	Identifier,           // identifier : 'parser'
	Identifier,           // identifier_Keywords : ID
	Identifier,           // identifier_Keywords : 'brackets'
	Identifier,           // identifier_Keywords : 'inline'
	Identifier,           // identifier_Keywords : 'prec'
	Identifier,           // identifier_Keywords : 'shift'
	Identifier,           // identifier_Keywords : 'input'
	Identifier,           // identifier_Keywords : 'left'
	Identifier,           // identifier_Keywords : 'right'
	Identifier,           // identifier_Keywords : 'nonassoc'
	Identifier,           // identifier_Keywords : 'generate'
	Identifier,           // identifier_Keywords : 'assert'
	Identifier,           // identifier_Keywords : 'empty'
	Identifier,           // identifier_Keywords : 'nonempty'
	Identifier,           // identifier_Keywords : 'global'
	Identifier,           // identifier_Keywords : 'explicit'
	Identifier,           // identifier_Keywords : 'lookahead'
	Identifier,           // identifier_Keywords : 'param'
	Identifier,           // identifier_Keywords : 'flag'
	Identifier,           // identifier_Keywords : 'no-eoi'
	Identifier,           // identifier_Keywords : 's'
	Identifier,           // identifier_Keywords : 'x'
	Identifier,           // identifier_Keywords : 'expect'
	Identifier,           // identifier_Keywords : 'expect-rr'
	Identifier,           // identifier_Keywords : 'class'
	Identifier,           // identifier_Keywords : 'interface'
	Identifier,           // identifier_Keywords : 'space'
	Identifier,           // identifier_Keywords : 'extend'
	Identifier,           // identifier_Keywords : 'inject'
	Identifier,           // identifier_Keywords : 'layout'
	Identifier,           // identifier_Keywords : 'language'
	Identifier,           // identifier_Keywords : 'lalr'
	Identifier,           // identifier_Keywords : 'lexer'
	Identifier,           // identifier_Keywords : 'parser'
	Identifier,           // identifier_Keywords : 'true'
	Identifier,           // identifier_Keywords : 'false'
	Identifier,           // identifier_Keywords : 'separator'
	Identifier,           // identifier_Keywords : 'as'
	Identifier,           // identifier_Keywords : 'import'
	Identifier,           // identifier_Keywords : 'set'
	IntegerLiteral,       // integer_literal : icon
	StringLiteral,        // string_literal : scon
	BooleanLiteral,       // boolean_literal : 'true'
	BooleanLiteral,       // boolean_literal : 'false'
	0,                    // literal : string_literal
	0,                    // literal : integer_literal
	0,                    // literal : boolean_literal
	Pattern,              // pattern : regexp
	Command,              // command : code
	SyntaxProblem,        // syntax_problem : error
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section
	0,                    // file : header import__optlist option_optlist syntax_problem parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem
	0,                    // file : header import__optlist option_optlist lexer_section parser_section
	0,                    // file : header import__optlist option_optlist lexer_section
	0,                    // file : header import__optlist option_optlist parser_section
	0,                    // file : header import__optlist option_optlist
	0,                    // import__optlist : import__optlist import_
	0,                    // import__optlist :
	0,                    // option_optlist : option_optlist option
	0,                    // option_optlist :
	Header,               // header : 'language' identifier_Keywords '(' identifier_Keywords ')' ';'
	Header,               // header : 'language' identifier_Keywords ';'
	LexerSection,         // lexer_section : '::' .recoveryScope 'lexer' lexer_parts
	ParserSection,        // parser_section : '::' .recoveryScope 'parser' grammar_parts
	Import,               // import_ : 'import' identifier string_literal ';'
	Import,               // import_ : 'import' string_literal ';'
	Option,               // option : identifier '=' expression
	Symref,               // symref : identifier
	Symref,               // symref_Args : identifier args
	Symref,               // symref_Args : identifier
	RawType,              // rawType : code
	0,                    // lexer_parts : lexer_part
	0,                    // lexer_parts : lexer_parts lexer_part_OrSyntaxError
	0,                    // lexer_part : named_pattern
	0,                    // lexer_part : lexeme
	0,                    // lexer_part : lexer_directive
	0,                    // lexer_part : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : named_pattern
	0,                    // lexer_part_OrSyntaxError : lexeme
	0,                    // lexer_part_OrSyntaxError : lexer_directive
	0,                    // lexer_part_OrSyntaxError : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : syntax_problem
	NamedPattern,         // named_pattern : identifier '=' pattern
	StartConditionsScope, // start_conditions_scope : start_conditions '{' .recoveryScope lexer_parts '}'
	StartConditions,      // start_conditions : '<' '*' '>'
	StartConditions,      // start_conditions : '<' stateref_list_Comma_separated '>'
	0,                    // stateref_list_Comma_separated : stateref_list_Comma_separated ',' stateref
	0,                    // stateref_list_Comma_separated : stateref
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':'
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':'
	LexemeAttrs,          // lexeme_attrs : '(' lexeme_attribute ')'
	LexemeAttribute,      // lexeme_attribute : 'class'
	LexemeAttribute,      // lexeme_attribute : 'space'
	LexemeAttribute,      // lexeme_attribute : 'layout'
	DirectiveBrackets,    // lexer_directive : '%' 'brackets' symref symref ';'
	InclusiveStartConds,  // lexer_directive : '%' 's' lexer_state_list_Comma_separated ';'
	ExclusiveStartConds,  // lexer_directive : '%' 'x' lexer_state_list_Comma_separated ';'
	0,                    // lexer_state_list_Comma_separated : lexer_state_list_Comma_separated ',' lexer_state
	0,                    // lexer_state_list_Comma_separated : lexer_state
	Stateref,             // stateref : identifier
	LexerState,           // lexer_state : identifier
	0,                    // grammar_parts : grammar_part
	0,                    // grammar_parts : grammar_parts grammar_part_OrSyntaxError
	0,                    // grammar_part : nonterm
	0,                    // grammar_part : template_param
	0,                    // grammar_part : directive
	0,                    // grammar_part_OrSyntaxError : nonterm
	0,                    // grammar_part_OrSyntaxError : template_param
	0,                    // grammar_part_OrSyntaxError : directive
	0,                    // grammar_part_OrSyntaxError : syntax_problem
	Nonterm,              // nonterm : identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier rawType ':' rules ';'
	Nonterm,              // nonterm : identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier ':' rules ';'
	Assoc,                // assoc : 'left'
	Assoc,                // assoc : 'right'
	Assoc,                // assoc : 'nonassoc'
	ParamModifier,        // param_modifier : 'explicit'
	ParamModifier,        // param_modifier : 'global'
	ParamModifier,        // param_modifier : 'lookahead'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier ';'
	TemplateParam,        // template_param : '%' param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_type identifier ';'
	DirectivePrio,        // directive : '%' assoc references ';'
	DirectiveInput,       // directive : '%' 'input' inputref_list_Comma_separated ';'
	DirectiveInterface,   // directive : '%' 'interface' identifier_list_Comma_separated ';'
	DirectiveAssert,      // directive : '%' 'assert' 'empty' rhsSet ';'
	DirectiveAssert,      // directive : '%' 'assert' 'nonempty' rhsSet ';'
	DirectiveSet,         // directive : '%' 'generate' identifier '=' rhsSet ';'
	DirectiveExpect,      // directive : '%' 'expect' integer_literal ';'
	DirectiveExpectRR,    // directive : '%' 'expect-rr' integer_literal ';'
	DirectiveInject,      // directive : '%' 'inject' symref reportClause ';'
	0,                    // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0,                    // identifier_list_Comma_separated : identifier
	0,                    // inputref_list_Comma_separated : inputref_list_Comma_separated ',' inputref
	0,                    // inputref_list_Comma_separated : inputref
	Inputref,             // inputref : symref 'no-eoi'
	Inputref,             // inputref : symref
	0,                    // references : symref
	0,                    // references : references symref
	0,                    // rules : rule0
	0,                    // rules : rules '|' rule0
	Rule,                 // rule0 : predicate rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsParts rhsSuffix
	Rule,                 // rule0 : predicate rhsParts reportClause
	Rule,                 // rule0 : predicate rhsParts
	Rule,                 // rule0 : predicate rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsSuffix
	Rule,                 // rule0 : predicate reportClause
	Rule,                 // rule0 : predicate
	Rule,                 // rule0 : rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : rhsParts rhsSuffix
	Rule,                 // rule0 : rhsParts reportClause
	Rule,                 // rule0 : rhsParts
	Rule,                 // rule0 : rhsSuffix reportClause
	Rule,                 // rule0 : rhsSuffix
	Rule,                 // rule0 : reportClause
	Rule,                 // rule0 :
	0,                    // rule0 : syntax_problem
	Predicate,            // predicate : '[' predicate_expression ']'
	RhsSuffix,            // rhsSuffix : '%' 'prec' symref
	RhsSuffix,            // rhsSuffix : '%' 'shift' symref
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated reportAs
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated
	ReportClause,         // reportClause : '->' identifier reportAs
	ReportClause,         // reportClause : '->' identifier
	ReportAs,             // reportAs : 'as' identifier
	0,                    // rhsParts : rhsPart
	0,                    // rhsParts : rhsParts rhsPart_OrSyntaxError
	0,                    // rhsPart : rhsAssignment
	0,                    // rhsPart : command
	0,                    // rhsPart : rhsStateMarker
	0,                    // rhsPart : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : rhsAssignment
	0,                    // rhsPart_OrSyntaxError : command
	0,                    // rhsPart_OrSyntaxError : rhsStateMarker
	0,                    // rhsPart_OrSyntaxError : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : syntax_problem
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate_list_And_separated '&' lookahead_predicate
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate
	RhsLookahead,         // rhsLookahead : '(?=' lookahead_predicate_list_And_separated ')'
	LookaheadPredicate,   // lookahead_predicate : '!' symref
	LookaheadPredicate,   // lookahead_predicate : symref
	StateMarker,          // rhsStateMarker : '.' identifier
	0,                    // rhsAssignment : rhsOptional
	RhsAssignment,        // rhsAssignment : identifier '=' rhsOptional
	RhsPlusAssignment,    // rhsAssignment : identifier '+=' rhsOptional
	0,                    // rhsOptional : rhsCast
	RhsOptional,          // rhsOptional : rhsCast '?'
	0,                    // rhsCast : rhsPrimary
	RhsCast,              // rhsCast : rhsPrimary 'as' symref_Args
	RhsAsLiteral,         // rhsCast : rhsPrimary 'as' literal
	ListSeparator,        // listSeparator : 'separator' references
	RhsSymbol,            // rhsPrimary : symref_Args
	RhsNested,            // rhsPrimary : '(' .recoveryScope rules ')'
	RhsPlusList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '+'
	RhsStarList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '*'
	RhsPlusQuantifier,    // rhsPrimary : rhsPrimary '+'
	RhsStarQuantifier,    // rhsPrimary : rhsPrimary '*'
	RhsIgnored,           // rhsPrimary : '$' '(' .recoveryScope rules ')'
	0,                    // rhsPrimary : rhsSet
	RhsSet,               // rhsSet : 'set' '(' .recoveryScope setExpression ')'
	SetSymbol,            // setPrimary : identifier symref_Args
	SetSymbol,            // setPrimary : symref_Args
	SetCompound,          // setPrimary : '(' setExpression ')'
	SetComplement,        // setPrimary : '~' setPrimary
	0,                    // setExpression : setPrimary
	SetOr,                // setExpression : setExpression '|' setExpression
	SetAnd,               // setExpression : setExpression '&' setExpression
	0,                    // nonterm_param_list_Comma_separated : nonterm_param_list_Comma_separated ',' nonterm_param
	0,                    // nonterm_param_list_Comma_separated : nonterm_param
	NontermParams,        // nonterm_params : '<' nonterm_param_list_Comma_separated '>'
	0,                    // nonterm_param : param_ref
	InlineParameter,      // nonterm_param : identifier identifier '=' param_value
	InlineParameter,      // nonterm_param : identifier identifier
	ParamRef,             // param_ref : identifier
	SymrefArgs,           // args : '<' argument_list_Comma_separatedopt '>'
	0,                    // argument_list_Comma_separated : argument_list_Comma_separated ',' argument
	0,                    // argument_list_Comma_separated : argument
	0,                    // argument_list_Comma_separatedopt : argument_list_Comma_separated
	0,                    // argument_list_Comma_separatedopt :
	ArgumentVal,          // argument : param_ref ':' param_value
	ArgumentVal,          // argument : param_ref
	ArgumentTrue,         // argument : '+' param_ref
	ArgumentFalse,        // argument : '~' param_ref
	ParamType,            // param_type : 'flag'
	ParamType,            // param_type : 'param'
	0,                    // param_value : literal
	0,                    // param_value : param_ref
	0,                    // predicate_primary : param_ref
	PredicateNot,         // predicate_primary : '!' param_ref
	PredicateEq,          // predicate_primary : param_ref '==' literal
	PredicateNotEq,       // predicate_primary : param_ref '!=' literal
	0,                    // predicate_expression : predicate_primary
	PredicateAnd,         // predicate_expression : predicate_expression '&&' predicate_expression
	PredicateOr,          // predicate_expression : predicate_expression '||' predicate_expression
	0,                    // expression : literal
	0,                    // expression : symref_Args
	Array,                // expression : '[' expression_list_Comma_separated ',' ']'
	Array,                // expression : '[' expression_list_Comma_separated ']'
	Array,                // expression : '[' ',' ']'
	Array,                // expression : '[' ']'
	0,                    // expression : syntax_problem
	0,                    // expression_list_Comma_separated : expression_list_Comma_separated ',' expression
	0,                    // expression_list_Comma_separated : expression
	0,                    // rawTypeopt : rawType
	0,                    // rawTypeopt :
}

// set(follow ERROR) = REM, COLONCOLON, OR, SEMICOLON, DOT, COMMA, RBRACK, LPAREN, LPARENQUESTASSIGN, MINUSGT, RPAREN, RBRACE, LT, DOLLAR, ERROR, ID, SEPARATOR, SET, ASSERT, BRACKETS, CLASS, EMPTY, EXPECT, EXPECTMINUSRR, EXPLICIT, EXTEND, FLAG, GENERATE, GLOBAL, INJECT, INLINE, INPUT, INTERFACE, LALR, LANGUAGE, LAYOUT, LEFT, LEXER, LOOKAHEAD, NOMINUSEOI, NONASSOC, NONEMPTY, PARAM, PARSER, PREC, RIGHT, CHAR_S, SHIFT, SPACE, CHAR_X, CODE
var afterErr = []token.Type{
	8, 9, 10, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 36, 40, 41, 45, 46, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
}
