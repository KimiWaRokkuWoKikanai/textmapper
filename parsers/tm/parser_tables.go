// generated by Textmapper; DO NOT EDIT

package tm

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/tm/token"
)

var recoveryScopeStates = map[int]bool{
	103: true,
	142: true,
	169: true,
	170: true,
	214: true,
	351: true,
}

var tmNonterminals = [...]string{
	"identifier",
	"identifier_Keywords",
	"integer_literal",
	"string_literal",
	"boolean_literal",
	"literal",
	"pattern",
	"command",
	"syntax_problem",
	"file",
	"import__optlist",
	"option_optlist",
	"header",
	"lexer_section",
	"parser_section",
	"import_",
	"option",
	"symref",
	"symref_Args",
	"rawType",
	"lexer_parts",
	"lexer_part",
	"lexer_part_OrSyntaxError",
	"named_pattern",
	"start_conditions_scope",
	"start_conditions",
	"stateref_list_Comma_separated",
	"lexeme",
	"lexeme_attrs",
	"lexeme_attribute",
	"lexer_directive",
	"lexer_state_list_Comma_separated",
	"stateref",
	"lexer_state",
	"grammar_parts",
	"grammar_part",
	"grammar_part_OrSyntaxError",
	"nonterm",
	"assoc",
	"param_modifier",
	"template_param",
	"directive",
	"identifier_list_Comma_separated",
	"inputref_list_Comma_separated",
	"inputref",
	"references",
	"rules",
	"rule0",
	"predicate",
	"rhsSuffix",
	"reportClause",
	"reportAs",
	"rhsParts",
	"rhsPart",
	"rhsPart_OrSyntaxError",
	"lookahead_predicate_list_And_separated",
	"rhsLookahead",
	"lookahead_predicate",
	"rhsStateMarker",
	"rhsAssignment",
	"rhsOptional",
	"rhsCast",
	"listSeparator",
	"rhsPrimary",
	"rhsSet",
	"setPrimary",
	"setExpression",
	"nonterm_param_list_Comma_separated",
	"nonterm_params",
	"nonterm_param",
	"param_ref",
	"args",
	"argument_list_Comma_separated",
	"argument_list_Comma_separatedopt",
	"argument",
	"param_type",
	"param_value",
	"predicate_primary",
	"predicate_expression",
	"expression",
	"expression_list_Comma_separated",
	"rawTypeopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmDefGoto = []int32{
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1,
}

var tmGoto = []int32{
	-1, 424, 4123, 3416, -183, 3536, -177, 3692, 3856, 651, 650, 574, 659, 426,
	-57, 582, 568, 4190, 3417, 93, 4, 63, 172, -185, -87, -36, 383, -24, -210,
	241, -23, 180, 138, -310, 452, 455, 376, 89, 378, 384, -111, 290, 239, 310,
	155, -71, 4409, 4332, 4359, 4086, 3516, 379, 49, 4282, 125, 564, 4108, 297,
	4201, 4223, 168, 3878, 514, 4027, 3865, -158, -129, 587, 493, 377, 3432, 103,
	499, 504, 331, 219, -147, 133, 176, 37, 386, 240,
}

var tmDefAct = []int32{
	-1, -1, -1, 91, 0, 10, 1, 23, 11, 21, 22, 14, -1, 17, 9, 13, 27, -1, 5, 24,
	30, 29, 28, 6, 31, 15, 18, 8, 12, 16, 32, 3, 7, 19, 4, 25, 20, -1, 33, 69,
	67, 70, 68, 71, 66, 43, 34, 56, 44, 54, 55, 47, 59, 50, 42, 46, 60, 35, 38,
	57, 63, 62, 61, 39, 64, 48, 51, 41, 45, 49, 65, 36, 40, 52, 37, 58, 53, -1,
	-1, 26, 2, -1, -1, -1, -1, -1, 104, -1, -1, -1, 95, -1, -1, -1, 90, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, 80, 103, 230, 218, 253, -1, 200,
	-1, -1, 216, -1, 227, 232, 231, 229, 244, 247, 249, 260, -1, -1, -1, 270,
	272, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, 88, 92, -1, -1,
	-1, -1, -1, -1, -1, -1, 243, -1, 275, -1, 293, -1, -1, -1, -1, 101, 242, -1,
	239, -1, -1, -1, -1, -1, 102, -1, 168, -1, 208, -1, 214, 234, 237, -1, 212,
	228, 236, 235, 233, 248, 258, 257, -1, -1, -1, 224, -1, -1, 271, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, 84, -1, 86, 170, -1, 174, -1, -1,
	-1, 220, 221, 290, -1, -1, -1, 219, -1, 254, -1, -1, 241, 240, -1, -1, -1,
	-1, -1, 263, 266, -1, 103, 245, -1, -1, -1, -1, -1, 278, 246, 201, 206, -1,
	204, 210, 72, 75, 74, 77, 76, 78, 251, 250, 193, -1, 226, -1, 269, 166, -1,
	167, 164, -1, -1, -1, 94, 98, -1, -1, -1, -1, 105, 107, 110, -1, 108, 109,
	-1, -1, 152, 154, 155, 156, -1, 296, 302, 297, 100, 82, 169, 173, 172, -1,
	291, 292, -1, -1, 198, -1, -1, 238, 259, -1, 265, 262, -1, 261, -1, 283, 284,
	-1, -1, 276, 202, -1, 222, 287, 288, 273, 165, 162, -1, 163, -1, -1, -1, -1,
	150, -1, 121, -1, 305, -1, 115, 106, 111, 114, 112, 113, -1, -1, -1, -1, -1,
	285, -1, -1, -1, -1, 175, 178, 177, 286, 176, -1, -1, -1, 160, 153, 157, 158,
	159, -1, 301, 304, -1, 171, 199, 256, 255, 264, -1, -1, 281, 277, 192, 161,
	-1, 151, -1, 149, -1, 118, -1, 119, 79, 116, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 195, -1, -1, -1, -1, 300, -1, 299, -1, 146, -1, 147, 120, -1, -1,
	140, 117, -1, -1, -1, 189, 190, -1, -1, 196, 184, -1, 185, 183, -1, -1, 182,
	298, 303, 145, 148, 143, 144, -1, -1, 138, -1, -1, 130, 186, 187, -1, 191,
	194, -1, 180, -1, 142, 134, -1, 136, -1, 128, -1, 188, -1, 181, 132, 124, -1,
	126, 179, 122, -1, -1, -1, -1,
}

const tmActionBase = -82

var tmAction = []int32{
	-35, 3381, 1784, -82, -82, -82, -82, -82, -82, -82, -82, -82, 2004, -82, -82,
	-82, -82, 2067, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, 97, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -82, 121, 2148, -82, -82, -16, 193, 415, 3420, 3420, -82, 278, 15, 117,
	-82, 1784, 2993, 2410, -82, 415, 169, 415, 351, 287, -37, 3420, 3041, 488,
	3089, 173, -82, 234, -82, 3739, -82, -82, -82, 296, -82, 780, 8, -82, 561,
	-82, -82, -82, -82, -82, 2490, 2737, -82, 71, 2771, -12, -82, -82, 415, 500,
	415, 415, 315, 502, 325, -82, 520, 508, 74, 513, 298, 314, -82, -82, 330,
	415, 338, 415, 415, 509, 3420, 3420, -82, 3420, -82, -10, -82, 242, 237, 634,
	3420, -82, -82, 327, -82, 488, 2830, 2524, 2577, 2524, -82, -2, -82, 83, -82,
	707, -82, -82, -82, 114, -82, -82, -82, -82, -82, -82, -82, -82, 2188, 3420,
	3420, -82, 18, 3420, -82, 360, 415, 368, 370, 415, 517, 415, 511, 516, -82,
	2902, 3128, 1862, 363, -82, 505, -82, -82, 382, -82, 398, 406, 415, -82, -82,
	-82, 102, 102, 3041, -82, 3041, -82, 3420, 549, -82, -82, 3089, 342, 2830,
	2830, 2258, -82, -82, 197, 3903, -82, 3420, 3420, 140, 390, 552, -82, -82,
	-82, -82, 217, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 101,
	-82, 2188, -82, -82, 412, -82, -82, 414, 415, 418, -82, -82, 127, 3180, 211,
	1942, -82, -82, -82, 3221, -82, -82, 334, 2657, -82, -82, -82, -82, 1021,
	-82, -82, -82, -82, -82, -82, -82, -82, 431, -82, -82, 249, 255, -82, 3277,
	419, -82, -82, 258, -82, -82, 2830, -82, 2830, -82, -82, 2188, 2953, -82,
	-82, 3420, -82, -82, -82, -82, -82, -82, 434, -82, 3420, 3420, 3420, 554,
	-82, 393, -82, 506, -82, 570, -82, -82, -82, -82, -82, -82, 2902, 380, 154,
	586, 586, -82, 3420, 3420, 3420, 3420, -82, -82, -82, -82, -82, 3420, 441,
	3420, -82, -82, -82, -82, -82, 573, -82, -82, 309, -82, -82, -82, -82, -82,
	263, 320, -82, -82, -82, -82, 3420, -82, 425, -82, 435, -82, 3420, -82, -82,
	-82, 1101, 2330, 572, 548, 548, 580, 581, 588, 575, 111, 442, -82, 484, 3342,
	3420, 369, -82, 1421, -82, 589, -82, 3420, -82, -82, 230, 861, -82, -82,
	1181, 590, 591, -82, -82, 548, 593, -82, -82, 3420, -82, -82, 490, 2188, -82,
	-82, -82, -82, -82, -82, -82, 579, 1261, -82, 1501, 942, -82, -82, -82, 628,
	-82, -82, 2188, -82, 631, -82, -82, 1582, -82, 1342, -82, 1663, -82, 632,
	-82, -82, -82, 1744, -82, -82, -82, 648, 649, -82, -82,
}

const tmTableLen = 4685

var tmTable = []int16{
	37, 289, -97, -227, -228, -199, -102, -86, 217, 262, 289, 81, 241, 217, -103,
	-200, 82, -104, 215, -105, -106, -86, 217, 215, 284, 289, 392, 392, 262, -4,
	-270, -86, 215, -136, -107, 274, 146, -156, -108, -6, -157, 242, 262, 262,
	-109, 274, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -110, 241, 315, 225, 109, 127, 128, 262, 225, 213, 215, 225,
	479, 140, 143, 207, 109, 225, 109, 347, 207, 293, 156, 158, 109, 165, -141,
	-259, -86, 207, 314, -195, 445, 223, 262, -196, 109, -85, 223, 109, -328,
	223, -86, 330, 285, -87, 211, 223, 197, 196, 197, 211, 87, 109, 118, 109,
	109, -137, -92, -86, 211, 262, -86, -211, -93, -196, 118, -260, 118, -212,
	109, -261, 109, 109, 163, 165, 165, 300, 158, 282, -324, 241, 310, 241, 109,
	165, 179, 398, 284, 282, 109, 239, 243, 158, 243, 286, 109, 385, -337, -88,
	109, 372, -436, 118, 136, 118, 118, 287, 288, -151, 383, 425, 384, 243, 265,
	267, -171, 348, 128, -88, 118, 109, 118, 118, 109, -338, 109, -404, -339,
	-319, 281, 37, 243, -99, 174, 282, 451, 347, -86, 453, 118, -87, 109, -320,
	424, -344, 118, -405, 158, 203, 158, 306, 165, -321, 203, 262, 165, 160, 239,
	239, 243, 464, -86, 203, 468, 185, 158, 158, 286, -177, 299, 118, 452, 123,
	118, -229, 118, -172, 474, 262, 349, 350, 295, -232, -230, 123, 285, 123,
	294, 158, -319, 295, 118, 123, 283, 267, 109, 294, 262, -231, 161, 339, -448,
	281, -384, 123, -231, 352, 123, 267, 185, 37, 294, -88, -321, 461, 243, 412,
	-134, -321, 85, 292, 123, -86, 123, 123, 185, -154, -177, -144, -449, 165,
	-86, -178, 470, 348, 87, 286, 239, 123, 239, 123, 123, 158, 158, -216, 118,
	387, -418, 287, 288, -419, 268, 123, 376, -205, 165, 390, 390, 123, -86, 244,
	-177, 251, 174, 123, 268, -218, 174, 123, -177, -208, 281, -236, -177, -220,
	268, 400, 406, 165, 165, 265, 160, -237, 160, 83, 286, 165, -315, 414, 123,
	-153, -177, 123, -216, 123, 343, -272, 349, 350, -177, 371, -177, -442, -355,
	-274, -443, -275, -356, -357, 165, 123, -358, -359, -177, -360, 339, -361,
	-362, -303, 306, 281, -363, 168, -364, 307, -365, 308, -366, -325, -177,
	-367, -397, 165, 439, -304, 283, 243, -177, 279, 341, 390, -398, -305, -177,
	-102, -177, 217, 77, -333, -177, -334, 217, -103, 266, -336, -104, 165, -105,
	-106, -86, 158, -421, -177, -422, 123, -177, 343, -380, -382, -383, -390,
	-423, -107, -422, 443, 346, -108, -6, -437, 158, -438, -88, -109, 130, -7,
	-8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,
	-110, -102, -358, 217, -439, 294, -328, -461, 250, -103, -462, 195, -104,
	368, -105, -106, -86, 217, -366, 410, 138, 391, 393, -202, 145, -207, 344,
	-141, -210, -107, -213, -279, -223, -108, -6, 89, -280, 312, 422, -109, -277,
	-7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -110, -102, 212, 213, 346, -313, 269, 99, 213, -103, -212, -326, 373,
	-396, -105, -106, -86, 213, 413, -399, -401, -259, -429, 458, 401, -417,
	-109, -432, -433, -107, -86, 411, -434, -108, -6, -464, -446, -456, -457,
	-109, -459, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -110, -102, -471, 213, 327, -473, -478, -482, -483, -103,
	478, 93, 78, 386, -105, -106, -86, 213, 3, 94, 147, 290, 340, 448, 291, 370,
	366, 167, 409, -107, 248, 129, 367, -108, -6, 249, 232, 0, -233, -109, 377,
	-7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22,
	-23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,
	-38, -110, -102, 0, 205, 0, 0, 0, 0, 205, -103, 0, 0, 0, 0, -105, -106, -86,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, -108, -6, 0, 0, 0, 0,
	-109, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -110, -102, 0, 209, 0, 0, 0, 0, 209, -103, 0, 0, 0, 0, -105,
	-106, -86, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, -6, 0, 0,
	0, 0, -109, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -110, 139, 0, 0, -259, 0, 0, 0, 0, 139, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -425, 0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 139, 0, 0, 0, 0, 0, 0, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, -110, 129, 0, 0, -259, 0, 0, 0,
	0, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -425, 0, 0, 0, 129, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 129, 0, 0, 0, 0, 0, 0, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, -110,
	-141, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -376, 0, -297, -377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -6, 0, -260, 0, 0,
	0, -261, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, 141, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -425, 0, 0, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	141, 0, 0, 0, 0, 0, 0, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 131, -399, 0, 0, 0, 0, 0, 0, 131, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -425, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 131, 0, 0, 0, 0, 0, 0, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 135, -399, 0, 0, 0, 0, 0,
	0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -425, 0, 0, 0, 135, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, -110,
	125, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -425, 0,
	0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0,
	0, 0, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, -110, -141, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-297, -444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108,
	-6, 0, -260, 0, 0, 0, -261, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, 137, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, -110, 133, 0, 0, 0, 0, 0,
	0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 133, 0, 0, 0, 0, 0, 0, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, -110,
	127, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 0, 0,
	0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, -110, 123, 0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	123, 0, 0, 0, 0, 0, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, -110, -40, -41, -42, -43, -44, -45, -46, -47,
	-48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77,
	-78, -141, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -6, 0, -260, 0, 0,
	0, -261, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, 96, 0, 0, 0, 0, 0, 0, 0, -281, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -6,
	0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, 26, 0, 0, 0, 0, 26, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 26, 2, 0, 0, 0, 0, 2, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8,
	-9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23,
	-24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 2,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 93, -141, -259, -94, 0, 0,
	0, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 0, -6, 0, -260, 0, 0,
	0, -261, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20,
	-21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, -174, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -428, -282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -108, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12,
	-13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 89, 0, 0, 0, 0, 0, 0,
	0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -108, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -1, -1, -1, -1,
	-1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0,
	-1, -1, -1, -1, -1, -1, -191, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, -1, -1,
	-1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -107, 0, 0, 0, 0, -6, 0, 0, 0, 0, -109, -1, -7, -8, -9, -10, -11, -12,
	-13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 280, 0, -247, 0, 0, 0,
	-248, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12,
	-13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, 97, 0, 0, 0, 0, 0, 0,
	0, -291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -108, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -1, -1, -1, -1,
	-1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0,
	-1, -1, -1, -192, -193, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, -194, -1,
	-1, 0, 0, -1, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, -1, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81,
	-15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -247, 0, 0, 0, -248, 0, 0, 0, 0,
	0, 0, 0, -6, -141, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9,
	-10, -11, -12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -159,
	0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13,
	-81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28,
	-29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -166, 0, 0, 0, 0, 0, 0, 0,
	0, -6, 0, 0, 0, 0, 0, -291, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16,
	-17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31,
	-32, -33, -34, -35, -36, -37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10,
	-11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -353, 0, -6, 0,
	0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18, -82,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6,
	0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15, -16, -17, -18,
	-82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,
	-34, -35, -36, -37, -38, -440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11,
	-12, -13, -81, -15, -16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -6, 0, 0, 0, 0,
	0, 0, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -6, 0, 0, 0, 0, 0, 0, -7, -8, -9, -10, -11, -12, -13, -81, -15,
	-16, -17, -18, -82, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, 112, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 112, 0, 112, 0, 0, 131, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 159, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 112, 112, 88, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 112, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 112, 240, 112, 224, 112, 0, 112, 0, 0, 0, 112, 96,
	98, 117, 0, 0, 0, 133, 247, 137, 0, 0, 261, 264, 0, 117, 0, 117, 0, 153, 0,
	112, 0, 117, 112, 0, 112, 0, 0, 0, 0, 261, 298, 131, 0, 178, 180, 0, 184, 0,
	0, 0, 112, 0, 0, 261, 261, 0, 0, 0, 0, 0, 117, 0, 117, 117, 204, 0, 240, 240,
	316, 0, 0, 159, 0, 159, 0, 0, 0, 117, 0, 117, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 184, 0, 0, 0, 0, 261, 117, 0, 0, 0, 0, 0, 117, 112, 253, 0, 255, 0,
	0, 0, 256, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 298, 0, 0, 0, 117, 0, 0,
	117, 0, 117, 0, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 240, 0, 240, 117, 261, -1,
	-1, -1, -1, -1, -1, -1, -1, 296, -1, 0, -1, -173, -1, -1, 329, 247, -1, -1,
	-1, -1, 0, 305, 306, 0, -1, -174, -1, 0, 0, -175, 325, -1, -1, -1, -1, 110,
	-1, -1, -1, 0, 0, 0, -1, -1, 0, 0, -1, 110, 0, 110, 0, 117, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 110, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-1, 0, 0, 0, 110, 0, 110, 110, 0, 0, 0, 296, 261, 298, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 110, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 261, 0, 328, 0, 0, 110,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 181, 329, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 110, 0, 0, 110, 0, 110, 0, 0, 0, 0, 0, 0, -1, -1, -1,
	-1, -1, -1, -1, 0, 0, 110, -1, -1, -1, -1, 0, 0, 0, -1, -1, 433, 0, 0, 0, 0,
	-1, -174, -1, 0, 0, -1, 0, -1, -1, 0, -1, 111, -1, -1, -1, 0, 0, 0, -1, -1,
	126, 144, -1, 111, 296, 111, 0, 0, 0, 0, 0, 111, 126, 124, 126, 0, 0, 0, 0,
	110, 126, 0, 0, 0, 0, 124, 182, 124, 328, 0, 0, 0, 126, 124, 0, 126, -1, 0,
	0, 0, 111, 0, 111, 111, 0, 124, 0, 328, 124, 126, 0, 126, 126, 0, 0, 0, 0,
	111, 0, 111, 111, 0, 124, 0, 124, 124, 126, 0, 126, 126, 0, 182, 0, 0, 0, 0,
	0, 111, 0, 124, 126, 124, 124, 111, 0, 0, 126, 182, 126, 0, 126, 0, 126, 124,
	0, 0, 126, 0, 0, 124, 0, 124, 0, 124, 0, 124, 0, 0, 111, 124, 0, 111, 0, 111,
	0, 0, 0, 126, 0, 297, 126, 0, 126, 0, 0, 0, 0, 0, 0, 111, 124, 0, 0, 124, 0,
	124, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 125, 0, 125, 0, 0, 0, 0, 0,
	125, 111, 0, 0, 0, 0, 0, 0, 345, 0, 126, 463, 125, 465, 467, 125, 369, 0, 0,
	0, 0, 297, 0, 124, 0, 0, 472, 0, 473, 125, 475, 125, 125, 0, 0, 0, 477, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 125, 0, 125, 125, 0, 116, 0, 116, 0, 0, 0, 0, 0, 116,
	125, 120, 0, 0, 0, 0, 125, 0, 125, 0, 125, 177, 125, 120, 183, 120, 125, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 116, 0, 116, 116, 0, 120, 0, 0, 186, 125, 0,
	0, 125, 0, 125, 0, 0, 116, 0, 116, 116, 0, 120, 0, 120, 120, 0, 0, 0, 0, 125,
	183, 0, 0, 0, 0, 0, 116, 345, 120, 0, 120, 120, 116, 0, 0, 0, 254, 0, 428,
	429, 0, 0, 186, 297, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 120, 121, 0, 116, 186,
	0, 116, 0, 116, 0, 0, 166, 0, 121, 456, 121, 0, 0, 0, 125, 0, 121, 0, 122,
	116, 120, 0, 0, 120, 0, 120, 0, 260, 121, 0, 122, 187, 122, 0, 0, 0, 0, 0,
	122, 0, 0, 120, 0, 0, 0, 121, 260, 121, 121, 0, 122, 0, 0, 188, 0, 0, 222,
	223, 0, 0, 260, 260, 121, 0, 121, 121, 233, 122, 0, 122, 122, 0, 0, 116, 0,
	0, 187, 119, 0, 0, 0, 0, 121, 0, 122, 0, 122, 122, 121, 119, 0, 119, 187, 0,
	0, 120, 0, 119, 188, 0, 0, 0, 0, 260, 122, 0, 0, 0, 0, 119, 122, 0, 0, 121,
	188, 0, 121, 0, 121, 0, 0, 0, 0, 0, 0, 0, 119, 114, 119, 119, 260, 0, 0, 309,
	121, 122, 0, 166, 122, 114, 122, 114, 0, 119, 0, 119, 119, 114, 0, 0, 0, 0,
	0, 0, 115, 0, 122, 260, 0, 0, 0, 0, 0, 119, 0, 0, 115, 0, 115, 119, 0, 0, 0,
	0, 115, 0, 114, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 121, 404, 405, 0, 0,
	114, 119, 114, 114, 119, 0, 119, 0, 0, 0, 115, 113, 115, 115, 0, 0, 0, 122,
	0, 379, 114, 0, 119, 148, 0, 150, 252, 115, 0, 115, 115, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 115, 0, 0, 0, 114, 0, 115, 114, 0, 114, 0,
	260, 0, 199, 0, 201, 202, 0, 0, 449, 407, 408, 0, 0, 0, 114, 0, 0, 309, 119,
	217, 115, 219, 220, 115, 260, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	236, 418, 115, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 379, 0, 0, 0, 0, 114, 0, 271, 0, 0, 274, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 408, 0, 0, 0, 304, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
}

var tmCheck = []int16{
	1, 11, 18, 13, 14, 17, 8, 23, 10, 192, 20, 12, 170, 15, 16, 27, 17, 19, 10,
	21, 22, 23, 24, 15, 209, 35, 336, 337, 211, 64, 12, 23, 24, 18, 36, 17, 93,
	74, 40, 41, 77, 170, 225, 226, 46, 27, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 237, 238, 10, 83, 84, 85, 268, 15, 144, 145, 18, 1, 92,
	93, 10, 95, 24, 97, 282, 15, 210, 101, 102, 103, 104, 2, 3, 23, 24, 237, 38,
	420, 10, 295, 42, 115, 18, 15, 118, 17, 18, 23, 268, 209, 26, 10, 24, 15,
	128, 17, 15, 37, 132, 83, 134, 135, 18, 15, 23, 24, 322, 23, 67, 21, 42, 95,
	43, 97, 73, 149, 47, 151, 152, 103, 154, 155, 212, 157, 17, 18, 317, 231,
	319, 163, 164, 115, 342, 351, 27, 169, 170, 171, 172, 173, 209, 175, 322, 49,
	80, 179, 290, 69, 132, 89, 134, 135, 209, 209, 18, 317, 399, 319, 192, 193,
	194, 21, 282, 197, 80, 149, 200, 151, 152, 203, 76, 205, 51, 79, 10, 209,
	210, 211, 18, 109, 209, 424, 400, 23, 427, 169, 26, 221, 24, 399, 12, 175,
	71, 227, 10, 229, 18, 231, 34, 15, 416, 235, 102, 237, 238, 239, 449, 23, 24,
	452, 118, 245, 246, 282, 10, 211, 200, 427, 83, 203, 11, 205, 21, 466, 440,
	282, 282, 11, 24, 20, 95, 351, 97, 11, 268, 10, 20, 221, 103, 209, 10, 275,
	20, 459, 35, 102, 280, 50, 282, 24, 115, 35, 286, 118, 24, 163, 290, 35, 80,
	34, 440, 295, 366, 18, 34, 0, 210, 132, 23, 134, 135, 179, 18, 10, 9, 78,
	310, 23, 15, 459, 400, 0, 351, 317, 149, 319, 151, 152, 322, 323, 9, 275,
	326, 17, 351, 351, 20, 10, 163, 295, 18, 335, 336, 337, 169, 23, 171, 10,
	173, 239, 175, 24, 15, 243, 179, 10, 24, 351, 24, 10, 15, 34, 351, 357, 358,
	359, 360, 227, 34, 229, 0, 400, 366, 24, 368, 200, 18, 10, 203, 9, 205, 281,
	15, 400, 400, 10, 290, 10, 12, 48, 15, 15, 15, 52, 53, 389, 221, 56, 57, 10,
	59, 395, 61, 62, 15, 18, 400, 66, 104, 68, 227, 70, 229, 72, 17, 10, 75, 17,
	412, 413, 15, 351, 416, 10, 27, 280, 420, 27, 15, 10, 8, 10, 10, 2, 15, 10,
	15, 15, 16, 193, 15, 19, 436, 21, 22, 23, 440, 15, 10, 17, 275, 10, 352, 15,
	28, 29, 15, 15, 36, 17, 416, 282, 40, 41, 15, 459, 17, 80, 46, 85, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 56, 10, 15, 210, 17, 12,
	172, 16, 15, 127, 19, 289, 21, 22, 23, 24, 72, 359, 91, 336, 337, 18, 93, 18,
	281, 2, 15, 36, 12, 15, 18, 40, 41, 37, 15, 235, 395, 46, 18, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 144, 10, 400, 24, 197, 82, 15, 16,
	73, 27, 290, 27, 21, 22, 23, 24, 367, 81, 18, 3, 18, 436, 352, 20, 46, 15,
	15, 36, 23, 360, 12, 40, 41, 24, 15, 15, 15, 46, 15, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 8, 15, 10, 266, 15, 15, 0, 0, 16, 0, 78, 3,
	323, 21, 22, 23, 24, 0, 78, 93, 210, 280, 423, 210, 290, 289, 104, 359, 36,
	172, 85, 289, 40, 41, 172, 163, -1, 45, 46, 295, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1,
	-1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1,
	-1, 40, 41, -1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 8, -1, 10, -1, -1, -1, -1, 15, 16, -1, -1, -1, -1, 21, 22,
	23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41,
	-1, -1, -1, -1, 46, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 0, -1, -1, 3, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 17, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 81, -1, -1, -1, -1,
	-1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 25,
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1,
	-1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 81, -1,
	-1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1,
	-1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41,
	-1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 21, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0, -1, -1, -1, -1,
	-1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1,
	-1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 0,
	-1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 40, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 18, -1, -1, -1, -1, 23, -1, -1, 26, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 18, -1, -1, -1, -1,
	23, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41,
	-1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 0, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 40, 41, 2, 3, 44, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, -1, 41, -1, 43, -1, -1, -1, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	24, -1, 26, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1,
	-1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1,
	-1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1,
	2, 3, 4, 5, 6, 7, -1, 9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1,
	-1, -1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, 37, 38, 39, -1, -1,
	42, 43, 44, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 41, -1, -1, -1, -1,
	46, 81, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 27, -1, 29, -1,
	-1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, -1, -1, -1, -1, -1, -1, -1, 8,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0, 1, 2, 3, 4, 5, 6,
	7, -1, 9, -1, 11, 12, 13, 14, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, 25, 26,
	27, 28, 29, 30, -1, 32, 33, 34, 35, -1, 37, 38, 39, -1, -1, 42, 43, 44, -1,
	-1, 47, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 81, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 21, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 29, -1, -1, -1, 33, -1, -1, -1, -1, -1,
	-1, -1, 41, 2, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 32, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1,
	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, -1, -1, -1,
	-1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 8, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 39, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1, -1,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 41, -1, -1, -1, -1, -1,
	-1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, -1, -1, -1, -1,
	-1, -1, -1, 92, -1, -1, -1, 95, -1, 97, -1, -1, 85, -1, -1, 103, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 102, 118, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 132, -1, 134, 135, 37, -1, -1, 140, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 149, -1, 151, 152, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 163, -1, -1, -1, -1, -1, 169, 170, 171, 157, 173, -1, 175, -1, -1,
	-1, 179, 81, 82, 83, -1, -1, -1, 87, 172, 89, -1, -1, 192, 192, -1, 95, -1,
	97, -1, 99, -1, 200, -1, 103, 203, -1, 205, -1, -1, -1, -1, 211, 211, 197,
	-1, 115, 116, -1, 118, -1, -1, -1, 221, -1, -1, 225, 226, -1, -1, -1, -1, -1,
	132, -1, 134, 135, 136, -1, 237, 238, 239, -1, -1, 227, -1, 229, -1, -1, -1,
	149, -1, 151, 152, -1, -1, -1, -1, -1, -1, -1, -1, 245, 246, 163, -1, -1, -1,
	-1, 268, 169, -1, -1, -1, -1, -1, 175, 275, 177, -1, 179, -1, -1, -1, 183,
	268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 295, 295, -1, -1, -1, 200, -1,
	-1, 203, -1, 205, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, -1, -1, 317, -1,
	319, 221, 322, 0, 1, 2, 3, 4, 5, 6, 7, 211, 9, -1, 11, 12, 13, 14, 322, 323,
	17, 18, 19, 20, -1, 225, 226, -1, 25, 26, 27, -1, -1, 30, 254, 32, 33, 34,
	35, 83, 37, 38, 39, -1, -1, -1, 43, 44, -1, -1, 47, 95, -1, 97, -1, 275, -1,
	-1, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, 268, -1, -1, 115, -1, -1, 118,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, 132, -1, 134, 135, -1,
	-1, -1, 295, 416, 416, -1, -1, -1, -1, -1, -1, -1, 149, -1, 151, 152, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 163, 440, -1, 322, -1, -1, 169, -1, -1, -1,
	-1, -1, 175, -1, -1, -1, 179, 440, -1, -1, 459, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, 459, 200, -1, -1, 203, -1, 205, -1, -1, -1,
	-1, -1, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, 221, 11, 12, 13, 14, -1, -1, -1, 18,
	19, 407, -1, -1, -1, -1, 25, 26, 27, -1, -1, 30, -1, 32, 33, -1, 35, 83, 37,
	38, 39, -1, -1, -1, 43, 44, 83, 93, 47, 95, 416, 97, -1, -1, -1, -1, -1, 103,
	95, 83, 97, -1, -1, -1, -1, 275, 103, -1, -1, -1, -1, 95, 118, 97, 440, -1,
	-1, -1, 115, 103, -1, 118, 81, -1, -1, -1, 132, -1, 134, 135, -1, 115, -1,
	459, 118, 132, -1, 134, 135, -1, -1, -1, -1, 149, -1, 151, 152, -1, 132, -1,
	134, 135, 149, -1, 151, 152, -1, 163, -1, -1, -1, -1, -1, 169, -1, 149, 163,
	151, 152, 175, -1, -1, 169, 179, 171, -1, 173, -1, 175, 163, -1, -1, 179, -1,
	-1, 169, -1, 171, -1, 173, -1, 175, -1, -1, 200, 179, -1, 203, -1, 205, -1,
	-1, -1, 200, -1, 211, 203, -1, 205, -1, -1, -1, -1, -1, -1, 221, 200, -1, -1,
	203, -1, 205, -1, -1, 221, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	221, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, 424, -1,
	-1, -1, -1, -1, 95, -1, 97, -1, -1, -1, -1, -1, 103, 275, -1, -1, -1, -1, -1,
	-1, 282, -1, 275, 449, 115, 451, 452, 118, 290, -1, -1, -1, -1, 295, -1, 275,
	-1, -1, 464, -1, 466, 132, 468, 134, 135, -1, -1, -1, 474, -1, -1, 83, -1,
	-1, -1, -1, -1, -1, 149, -1, 151, 152, -1, 95, -1, 97, -1, -1, -1, -1, -1,
	103, 163, 83, -1, -1, -1, -1, 169, -1, 171, -1, 173, 115, 175, 95, 118, 97,
	179, -1, -1, -1, -1, 103, -1, -1, -1, -1, -1, -1, 132, -1, 134, 135, -1, 115,
	-1, -1, 118, 200, -1, -1, 203, -1, 205, -1, -1, 149, -1, 151, 152, -1, 132,
	-1, 134, 135, -1, -1, -1, -1, 221, 163, -1, -1, -1, -1, -1, 169, 400, 149,
	-1, 151, 152, 175, -1, -1, -1, 179, -1, 402, 403, -1, -1, 163, 416, -1, -1,
	-1, -1, 169, -1, -1, -1, -1, -1, 175, 83, -1, 200, 179, -1, 203, -1, 205, -1,
	-1, 104, -1, 95, 432, 97, -1, -1, -1, 275, -1, 103, -1, 83, 221, 200, -1, -1,
	203, -1, 205, -1, 192, 115, -1, 95, 118, 97, -1, -1, -1, -1, -1, 103, -1, -1,
	221, -1, -1, -1, 132, 211, 134, 135, -1, 115, -1, -1, 118, -1, -1, 154, 155,
	-1, -1, 225, 226, 149, -1, 151, 152, 164, 132, -1, 134, 135, -1, -1, 275, -1,
	-1, 163, 83, -1, -1, -1, -1, 169, -1, 149, -1, 151, 152, 175, 95, -1, 97,
	179, -1, -1, 275, -1, 103, 163, -1, -1, -1, -1, 268, 169, -1, -1, -1, -1,
	115, 175, -1, -1, 200, 179, -1, 203, -1, 205, -1, -1, -1, -1, -1, -1, -1,
	132, 83, 134, 135, 295, -1, -1, 231, 221, 200, -1, 235, 203, 95, 205, 97, -1,
	149, -1, 151, 152, 103, -1, -1, -1, -1, -1, -1, 83, -1, 221, 322, -1, -1, -1,
	-1, -1, 169, -1, -1, 95, -1, 97, 175, -1, -1, -1, -1, 103, -1, 132, -1, 134,
	135, -1, -1, -1, -1, -1, -1, -1, -1, 275, 354, 355, -1, -1, 149, 200, 151,
	152, 203, -1, 205, -1, -1, -1, 132, 83, 134, 135, -1, -1, -1, 275, -1, 310,
	169, -1, 221, 95, -1, 97, 175, 149, -1, 151, 152, 103, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 335, -1, -1, 169, -1, -1, -1, 200, -1, 175, 203,
	-1, 205, -1, 416, -1, 132, -1, 134, 135, -1, -1, 424, 358, 359, -1, -1, -1,
	221, -1, -1, 366, 275, 149, 200, 151, 152, 203, 440, 205, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 452, -1, -1, 169, 389, 221, -1, 459, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 412, -1, -1, -1, -1,
	275, -1, 200, -1, -1, 203, -1, 205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 436, -1, -1, -1, 221, -1, -1, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 275,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 5, 4, 5, 4, 4, 3, 2, 0, 2, 0, 6, 3, 3, 3, 4, 3, 3, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 3, 3, 3, 1, 8, 7, 7, 6, 7, 6, 6, 5,
	5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 4, 3, 3, 1, 1, 5, 4, 4, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 7, 6, 6, 5, 1, 1, 1, 1, 7, 5, 6,
	4, 4, 4, 4, 5, 5, 6, 4, 4, 5, 3, 1, 3, 1, 2, 1, 1, 2, 1, 3, 4, 3, 3, 2, 3, 2,
	2, 1, 3, 2, 2, 1, 2, 1, 1, 0, 1, 3, 3, 3, 5, 4, 3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 2, 1, 2, 1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 3, 5, 5, 2, 2, 4,
	1, 4, 2, 1, 3, 2, 1, 3, 3, 3, 1, 3, 1, 4, 2, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 3, 3, 1, 3, 3, 1, 1, 4, 3, 3, 2, 1, 3, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 85, 86, 86,
	87, 87, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 104,
	104, 104, 104, 104, 105, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 111, 111, 112, 112, 112, 113, 113, 114, 115, 116, 116, 117, 117, 117,
	118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 121, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 130, 131, 131, 132, 132, 132, 132, 133, 134, 134, 135, 135, 135,
	135, 136, 136, 136, 136, 136, 137, 137, 138, 139, 139, 140, 141, 141, 141,
	142, 142, 143, 143, 143, 144, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	147, 147, 147, 147, 148, 148, 148, 149, 149, 150, 151, 151, 151, 152, 153,
	154, 154, 155, 155, 156, 156, 156, 156, 157, 157, 158, 158, 159, 159, 159,
	159, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 162, 162, 163, 163,
}

var tmRuleType = [...]NodeType{
	Identifier,           // identifier : ID
	Identifier,           // identifier : 'brackets'
	Identifier,           // identifier : 'inline'
	Identifier,           // identifier : 'prec'
	Identifier,           // identifier : 'shift'
	Identifier,           // identifier : 'input'
	Identifier,           // identifier : 'left'
	Identifier,           // identifier : 'right'
	Identifier,           // identifier : 'nonassoc'
	Identifier,           // identifier : 'generate'
	Identifier,           // identifier : 'assert'
	Identifier,           // identifier : 'empty'
	Identifier,           // identifier : 'nonempty'
	Identifier,           // identifier : 'global'
	Identifier,           // identifier : 'explicit'
	Identifier,           // identifier : 'lookahead'
	Identifier,           // identifier : 'param'
	Identifier,           // identifier : 'flag'
	Identifier,           // identifier : 'no-eoi'
	Identifier,           // identifier : 's'
	Identifier,           // identifier : 'x'
	Identifier,           // identifier : 'expect'
	Identifier,           // identifier : 'expect-rr'
	Identifier,           // identifier : 'class'
	Identifier,           // identifier : 'interface'
	Identifier,           // identifier : 'space'
	Identifier,           // identifier : 'extend'
	Identifier,           // identifier : 'inject'
	Identifier,           // identifier : 'layout'
	Identifier,           // identifier : 'language'
	Identifier,           // identifier : 'lalr'
	Identifier,           // identifier : 'lexer'
	Identifier,           // identifier : 'parser'
	Identifier,           // identifier_Keywords : ID
	Identifier,           // identifier_Keywords : 'brackets'
	Identifier,           // identifier_Keywords : 'inline'
	Identifier,           // identifier_Keywords : 'prec'
	Identifier,           // identifier_Keywords : 'shift'
	Identifier,           // identifier_Keywords : 'input'
	Identifier,           // identifier_Keywords : 'left'
	Identifier,           // identifier_Keywords : 'right'
	Identifier,           // identifier_Keywords : 'nonassoc'
	Identifier,           // identifier_Keywords : 'generate'
	Identifier,           // identifier_Keywords : 'assert'
	Identifier,           // identifier_Keywords : 'empty'
	Identifier,           // identifier_Keywords : 'nonempty'
	Identifier,           // identifier_Keywords : 'global'
	Identifier,           // identifier_Keywords : 'explicit'
	Identifier,           // identifier_Keywords : 'lookahead'
	Identifier,           // identifier_Keywords : 'param'
	Identifier,           // identifier_Keywords : 'flag'
	Identifier,           // identifier_Keywords : 'no-eoi'
	Identifier,           // identifier_Keywords : 's'
	Identifier,           // identifier_Keywords : 'x'
	Identifier,           // identifier_Keywords : 'expect'
	Identifier,           // identifier_Keywords : 'expect-rr'
	Identifier,           // identifier_Keywords : 'class'
	Identifier,           // identifier_Keywords : 'interface'
	Identifier,           // identifier_Keywords : 'space'
	Identifier,           // identifier_Keywords : 'extend'
	Identifier,           // identifier_Keywords : 'inject'
	Identifier,           // identifier_Keywords : 'layout'
	Identifier,           // identifier_Keywords : 'language'
	Identifier,           // identifier_Keywords : 'lalr'
	Identifier,           // identifier_Keywords : 'lexer'
	Identifier,           // identifier_Keywords : 'parser'
	Identifier,           // identifier_Keywords : 'true'
	Identifier,           // identifier_Keywords : 'false'
	Identifier,           // identifier_Keywords : 'separator'
	Identifier,           // identifier_Keywords : 'as'
	Identifier,           // identifier_Keywords : 'import'
	Identifier,           // identifier_Keywords : 'set'
	IntegerLiteral,       // integer_literal : icon
	StringLiteral,        // string_literal : scon
	BooleanLiteral,       // boolean_literal : 'true'
	BooleanLiteral,       // boolean_literal : 'false'
	0,                    // literal : string_literal
	0,                    // literal : integer_literal
	0,                    // literal : boolean_literal
	Pattern,              // pattern : regexp
	Command,              // command : code
	SyntaxProblem,        // syntax_problem : error
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem lexer_section
	0,                    // file : header import__optlist option_optlist syntax_problem parser_section
	0,                    // file : header import__optlist option_optlist syntax_problem
	0,                    // file : header import__optlist option_optlist lexer_section parser_section
	0,                    // file : header import__optlist option_optlist lexer_section
	0,                    // file : header import__optlist option_optlist parser_section
	0,                    // file : header import__optlist option_optlist
	0,                    // import__optlist : import__optlist import_
	0,                    // import__optlist :
	0,                    // option_optlist : option_optlist option
	0,                    // option_optlist :
	Header,               // header : 'language' identifier_Keywords '(' identifier_Keywords ')' ';'
	Header,               // header : 'language' identifier_Keywords ';'
	LexerSection,         // lexer_section : '::' .recoveryScope 'lexer' lexer_parts
	ParserSection,        // parser_section : '::' .recoveryScope 'parser' grammar_parts
	Import,               // import_ : 'import' identifier string_literal ';'
	Import,               // import_ : 'import' string_literal ';'
	Option,               // option : identifier '=' expression
	Symref,               // symref : identifier
	Symref,               // symref_Args : identifier args
	Symref,               // symref_Args : identifier
	RawType,              // rawType : code
	0,                    // lexer_parts : lexer_part
	0,                    // lexer_parts : lexer_parts lexer_part_OrSyntaxError
	0,                    // lexer_part : named_pattern
	0,                    // lexer_part : lexeme
	0,                    // lexer_part : lexer_directive
	0,                    // lexer_part : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : named_pattern
	0,                    // lexer_part_OrSyntaxError : lexeme
	0,                    // lexer_part_OrSyntaxError : lexer_directive
	0,                    // lexer_part_OrSyntaxError : start_conditions_scope
	0,                    // lexer_part_OrSyntaxError : syntax_problem
	NamedPattern,         // named_pattern : identifier '=' pattern
	StartConditionsScope, // start_conditions_scope : start_conditions '{' .recoveryScope lexer_parts '}'
	StartConditions,      // start_conditions : '<' '*' '>'
	StartConditions,      // start_conditions : '<' stateref_list_Comma_separated '>'
	0,                    // stateref_list_Comma_separated : stateref_list_Comma_separated ',' stateref
	0,                    // stateref_list_Comma_separated : stateref
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : start_conditions identifier rawTypeopt ':'
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern integer_literal
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern command
	Lexeme,               // lexeme : identifier rawTypeopt ':' pattern
	Lexeme,               // lexeme : identifier rawTypeopt ':' lexeme_attrs
	Lexeme,               // lexeme : identifier rawTypeopt ':'
	LexemeAttrs,          // lexeme_attrs : '(' lexeme_attribute ')'
	LexemeAttribute,      // lexeme_attribute : 'class'
	LexemeAttribute,      // lexeme_attribute : 'space'
	DirectiveBrackets,    // lexer_directive : '%' 'brackets' symref symref ';'
	InclusiveStartConds,  // lexer_directive : '%' 's' lexer_state_list_Comma_separated ';'
	ExclusiveStartConds,  // lexer_directive : '%' 'x' lexer_state_list_Comma_separated ';'
	0,                    // lexer_state_list_Comma_separated : lexer_state_list_Comma_separated ',' lexer_state
	0,                    // lexer_state_list_Comma_separated : lexer_state
	Stateref,             // stateref : identifier
	LexerState,           // lexer_state : identifier
	0,                    // grammar_parts : grammar_part
	0,                    // grammar_parts : grammar_parts grammar_part_OrSyntaxError
	0,                    // grammar_part : nonterm
	0,                    // grammar_part : template_param
	0,                    // grammar_part : directive
	0,                    // grammar_part_OrSyntaxError : nonterm
	0,                    // grammar_part_OrSyntaxError : template_param
	0,                    // grammar_part_OrSyntaxError : directive
	0,                    // grammar_part_OrSyntaxError : syntax_problem
	Nonterm,              // nonterm : identifier nonterm_params rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params rawType ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : identifier rawType reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier rawType ':' rules ';'
	Nonterm,              // nonterm : identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : identifier ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'extend' identifier ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier nonterm_params ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier reportClause ':' rules ';'
	Nonterm,              // nonterm : 'inline' identifier ':' rules ';'
	Assoc,                // assoc : 'left'
	Assoc,                // assoc : 'right'
	Assoc,                // assoc : 'nonassoc'
	ParamModifier,        // param_modifier : 'lookahead'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_modifier param_type identifier ';'
	TemplateParam,        // template_param : '%' param_type identifier '=' param_value ';'
	TemplateParam,        // template_param : '%' param_type identifier ';'
	DirectivePrio,        // directive : '%' assoc references ';'
	DirectiveInput,       // directive : '%' 'input' inputref_list_Comma_separated ';'
	DirectiveInterface,   // directive : '%' 'interface' identifier_list_Comma_separated ';'
	DirectiveAssert,      // directive : '%' 'assert' 'empty' rhsSet ';'
	DirectiveAssert,      // directive : '%' 'assert' 'nonempty' rhsSet ';'
	DirectiveSet,         // directive : '%' 'generate' identifier '=' rhsSet ';'
	DirectiveExpect,      // directive : '%' 'expect' integer_literal ';'
	DirectiveExpectRR,    // directive : '%' 'expect-rr' integer_literal ';'
	DirectiveInject,      // directive : '%' 'inject' symref reportClause ';'
	0,                    // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0,                    // identifier_list_Comma_separated : identifier
	0,                    // inputref_list_Comma_separated : inputref_list_Comma_separated ',' inputref
	0,                    // inputref_list_Comma_separated : inputref
	Inputref,             // inputref : symref 'no-eoi'
	Inputref,             // inputref : symref
	0,                    // references : symref
	0,                    // references : references symref
	0,                    // rules : rule0
	0,                    // rules : rules '|' rule0
	Rule,                 // rule0 : predicate rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsParts rhsSuffix
	Rule,                 // rule0 : predicate rhsParts reportClause
	Rule,                 // rule0 : predicate rhsParts
	Rule,                 // rule0 : predicate rhsSuffix reportClause
	Rule,                 // rule0 : predicate rhsSuffix
	Rule,                 // rule0 : predicate reportClause
	Rule,                 // rule0 : predicate
	Rule,                 // rule0 : rhsParts rhsSuffix reportClause
	Rule,                 // rule0 : rhsParts rhsSuffix
	Rule,                 // rule0 : rhsParts reportClause
	Rule,                 // rule0 : rhsParts
	Rule,                 // rule0 : rhsSuffix reportClause
	Rule,                 // rule0 : rhsSuffix
	Rule,                 // rule0 : reportClause
	Rule,                 // rule0 :
	0,                    // rule0 : syntax_problem
	Predicate,            // predicate : '[' predicate_expression ']'
	RhsSuffix,            // rhsSuffix : '%' 'prec' symref
	RhsSuffix,            // rhsSuffix : '%' 'shift' symref
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated reportAs
	ReportClause,         // reportClause : '->' identifier '/' identifier_list_Comma_separated
	ReportClause,         // reportClause : '->' identifier reportAs
	ReportClause,         // reportClause : '->' identifier
	ReportAs,             // reportAs : 'as' identifier
	0,                    // rhsParts : rhsPart
	0,                    // rhsParts : rhsParts rhsPart_OrSyntaxError
	0,                    // rhsPart : rhsAssignment
	0,                    // rhsPart : command
	0,                    // rhsPart : rhsStateMarker
	0,                    // rhsPart : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : rhsAssignment
	0,                    // rhsPart_OrSyntaxError : command
	0,                    // rhsPart_OrSyntaxError : rhsStateMarker
	0,                    // rhsPart_OrSyntaxError : rhsLookahead
	0,                    // rhsPart_OrSyntaxError : syntax_problem
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate_list_And_separated '&' lookahead_predicate
	0,                    // lookahead_predicate_list_And_separated : lookahead_predicate
	RhsLookahead,         // rhsLookahead : '(?=' lookahead_predicate_list_And_separated ')'
	LookaheadPredicate,   // lookahead_predicate : '!' symref
	LookaheadPredicate,   // lookahead_predicate : symref
	StateMarker,          // rhsStateMarker : '.' identifier
	0,                    // rhsAssignment : rhsOptional
	RhsAssignment,        // rhsAssignment : identifier '=' rhsOptional
	RhsPlusAssignment,    // rhsAssignment : identifier '+=' rhsOptional
	0,                    // rhsOptional : rhsCast
	RhsOptional,          // rhsOptional : rhsCast '?'
	0,                    // rhsCast : rhsPrimary
	RhsCast,              // rhsCast : rhsPrimary 'as' symref_Args
	RhsAsLiteral,         // rhsCast : rhsPrimary 'as' literal
	ListSeparator,        // listSeparator : 'separator' references
	RhsSymbol,            // rhsPrimary : symref_Args
	RhsNested,            // rhsPrimary : '(' .recoveryScope rules ')'
	RhsPlusList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '+'
	RhsStarList,          // rhsPrimary : '(' .recoveryScope rhsParts listSeparator ')' '*'
	RhsPlusQuantifier,    // rhsPrimary : rhsPrimary '+'
	RhsStarQuantifier,    // rhsPrimary : rhsPrimary '*'
	RhsIgnored,           // rhsPrimary : '$' '(' .recoveryScope rules ')'
	0,                    // rhsPrimary : rhsSet
	RhsSet,               // rhsSet : 'set' '(' .recoveryScope setExpression ')'
	SetSymbol,            // setPrimary : identifier symref_Args
	SetSymbol,            // setPrimary : symref_Args
	SetCompound,          // setPrimary : '(' setExpression ')'
	SetComplement,        // setPrimary : '~' setPrimary
	0,                    // setExpression : setPrimary
	SetOr,                // setExpression : setExpression '|' setExpression
	SetAnd,               // setExpression : setExpression '&' setExpression
	0,                    // nonterm_param_list_Comma_separated : nonterm_param_list_Comma_separated ',' nonterm_param
	0,                    // nonterm_param_list_Comma_separated : nonterm_param
	NontermParams,        // nonterm_params : '<' nonterm_param_list_Comma_separated '>'
	0,                    // nonterm_param : param_ref
	InlineParameter,      // nonterm_param : identifier identifier '=' param_value
	InlineParameter,      // nonterm_param : identifier identifier
	ParamRef,             // param_ref : identifier
	SymrefArgs,           // args : '<' argument_list_Comma_separatedopt '>'
	0,                    // argument_list_Comma_separated : argument_list_Comma_separated ',' argument
	0,                    // argument_list_Comma_separated : argument
	0,                    // argument_list_Comma_separatedopt : argument_list_Comma_separated
	0,                    // argument_list_Comma_separatedopt :
	ArgumentVal,          // argument : param_ref ':' param_value
	ArgumentVal,          // argument : param_ref
	ArgumentTrue,         // argument : '+' param_ref
	ArgumentFalse,        // argument : '~' param_ref
	ParamType,            // param_type : 'flag'
	ParamType,            // param_type : 'param'
	0,                    // param_value : literal
	0,                    // param_value : param_ref
	0,                    // predicate_primary : param_ref
	PredicateNot,         // predicate_primary : '!' param_ref
	PredicateEq,          // predicate_primary : param_ref '==' literal
	PredicateNotEq,       // predicate_primary : param_ref '!=' literal
	0,                    // predicate_expression : predicate_primary
	PredicateAnd,         // predicate_expression : predicate_expression '&&' predicate_expression
	PredicateOr,          // predicate_expression : predicate_expression '||' predicate_expression
	0,                    // expression : literal
	0,                    // expression : symref_Args
	Array,                // expression : '[' expression_list_Comma_separated ',' ']'
	Array,                // expression : '[' expression_list_Comma_separated ']'
	Array,                // expression : '[' ',' ']'
	Array,                // expression : '[' ']'
	0,                    // expression : syntax_problem
	0,                    // expression_list_Comma_separated : expression_list_Comma_separated ',' expression
	0,                    // expression_list_Comma_separated : expression
	0,                    // rawTypeopt : rawType
	0,                    // rawTypeopt :
}

// set(follow ERROR) = REM, COLONCOLON, OR, SEMICOLON, DOT, COMMA, RBRACK, LPAREN, LPARENQUESTASSIGN, MINUSGT, RPAREN, RBRACE, LT, DOLLAR, ERROR, ID, SEPARATOR, SET, ASSERT, BRACKETS, CLASS, EMPTY, EXPECT, EXPECTMINUSRR, EXPLICIT, EXTEND, FLAG, GENERATE, GLOBAL, INJECT, INLINE, INPUT, INTERFACE, LALR, LANGUAGE, LAYOUT, LEFT, LEXER, LOOKAHEAD, NOMINUSEOI, NONASSOC, NONEMPTY, PARAM, PARSER, PREC, RIGHT, CHAR_S, SHIFT, SPACE, CHAR_X, CODE
var afterErr = []token.Type{
	8, 9, 10, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 36, 40, 41, 45, 46, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
}
