{{ template "header" . -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
#ifndef {{.Options.IncludeGuardPrefix}}PARSER_H_
#define {{.Options.IncludeGuardPrefix}}PARSER_H_

#include <array>
#include <cstdint>
#include <ostream>
#include <string>
#include <utility>
#include <vector>

#include "{{.Options.AbslIncludePrefix}}/base/attributes.h"
#include "{{.Options.AbslIncludePrefix}}/functional/function_ref.h"
#include "{{.Options.AbslIncludePrefix}}/log/log.h"
#include "{{.Options.AbslIncludePrefix}}/status/status.h"
#include "{{.Options.AbslIncludePrefix}}/strings/str_format.h"
#include "{{.Options.FilenamePrefix}}lexer.h"

namespace {{.Options.Namespace}} {

struct symbol {
  int32_t symbol = 0;
  int64_t offset = 0;
  int64_t endoffset = 0;
};

struct stackEntry {
  symbol sym;
  int{{$stateType}}_t state = 0;
};

enum class NodeType {
  NoType,
{{- range .Parser.Types.RangeTypes }}
  {{.Name}},    {{- if gt (len .Fields) 0}}  // {{.Descriptor}}{{end}}
{{- end}}
{{- range .Options.ExtraTypes }}
  {{.Name}},
{{- end}}
  NodeTypeMax
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(NodeType::NodeTypeMax)>
    nodeTypeStr = {
	"NONE",
{{- range .Parser.Types.RangeTypes }}
	"{{.Name}}",
{{- end}}
{{- range .Options.ExtraTypes }}
	"{{.Name}}",
{{- end}}
};

inline std::ostream& operator<<(std::ostream& os, NodeType t) {
  int i = static_cast<int>(t);
  if (i >= 0 && i < nodeTypeStr.size()) {
    return os << nodeTypeStr[i];
  }
  return os << "node(" << i << ")";
}

constexpr inline bool debugSyntax = {{ .Options.DebugParser }};
constexpr inline int startStackSize = 256;
{{- if .ReportTokens true }}
constexpr inline int startTokenBufferSize = 16;
{{- end}}
constexpr inline int32_t noToken = static_cast<int32_t>(Token::UNAVAILABLE);
constexpr inline int32_t eoiToken = static_cast<int32_t>(Token::EOI);

ABSL_MUST_USE_RESULT std::string symbolName(int32_t sym);

class Parser {
 public:
{{- if .Parser.Types }}
  template <typename Listener>
  explicit Parser(Listener&& listener)
      : listener_(std::forward<Listener>(listener)) {
{{- else }}
  Parser() = default;
{{- end}}
{{- if .ReportTokens true }}
    pending_symbols_.reserve(startTokenBufferSize);
{{- end}}
  }

{{- range $index, $inp := .Parser.Inputs}}
{{- if $inp.Synthetic }}{{continue}}{{end}}
{{- $nt := index $.Parser.Nonterms $inp.Nonterm}}

  absl::Status{{if ne $nt.Type ""}}Or<{{$nt.Type}}>{{end}} Parse{{if $.Parser.HasMultipleUserInputs}}{{$.NontermID $inp.Nonterm}}{{end}}(Lexer& lexer) {
	return Parse({{$index}}, {{index $.Parser.Tables.FinalStates $index}}, lexer);
  }
{{- end}}

 private:
{{ if .ReportTokens true -}}
  void reportIgnoredToken(symbol sym);
{{ end -}}
  void fetchNext(Lexer& lexer, std::vector<stackEntry>& stack);
  absl::Status applyRule(int32_t rule, stackEntry& lhs,
                         [[maybe_unused]] absl::Span<const stackEntry> rhs,
                         Lexer& lexer);
  absl::Status Parse(int{{$stateType}}_t start, int{{$stateType}}_t end, 
                     Lexer& lexer);

  symbol next_symbol_;
{{- if .ReportTokens true }}
  // Tokens to be reported with the next shift. Only non-empty when next.symbol
  // != noToken.
  std::vector<symbol> pending_symbols_;
{{- end}}
{{- if .Parser.Types }}
  absl::FunctionRef<void(NodeType, int64_t, int64_t)> listener_;
{{- end}}

  friend std::ostream& operator<<(std::ostream& os, const Parser& parser) {
    return os << "JSONParser next " << symbolName(parser.next_symbol_.symbol)
              << " and pending " << parser.pending_symbols_.size()
              << " symbols";
  }
};

}  // namespace {{.Options.Namespace}}

#endif  // {{.Options.IncludeGuardPrefix}}PARSER_H_