{{ template "header" . -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
#ifndef {{.Options.IncludeGuardPrefix}}PARSER_H_
#define {{.Options.IncludeGuardPrefix}}PARSER_H_

{{ block "parserHeaderIncludes" . -}}
#include <array>
#include <cstdint>
#include <ostream>
#include <string>
#include <utility>
#include <vector>

#include "{{.Options.AbslIncludePrefix}}/base/attributes.h"
#include "{{.Options.AbslIncludePrefix}}/functional/function_ref.h"
#include "{{.Options.AbslIncludePrefix}}/log/log.h"
#include "{{.Options.AbslIncludePrefix}}/status/status.h"
#include "{{.Options.AbslIncludePrefix}}/strings/str_format.h"
#include "{{.Options.DirIncludePrefix}}{{.Options.FilenamePrefix}}lexer.h"
{{end}}
namespace {{.Options.Namespace}} {

{{ block "symbol" . -}}
struct symbol {
  int32_t symbol = 0;
  Lexer::Location location = Lexer::Location();
};

{{end -}}

{{ block "stackEntry" . -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
struct stackEntry {
  symbol sym;
  int{{$stateType}}_t state = 0;
{{- if .Parser.HasAssocValues }}
  union {
{{- range .Parser.UnionFields }}
    {{.}};
{{- end}}
  } value;
{{- end}}
};

{{end -}}

{{ if .Parser.Types -}}
enum class NodeType {
  NoType,
{{- range .Parser.Types.RangeTypes }}
  {{.Name}},    {{- if gt (len .Fields) 0}}  // {{.Descriptor}}{{end}}
{{- end}}
{{- range .Options.ExtraTypes }}
  {{.Name}},
{{- end}}
  NodeTypeMax
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(NodeType::NodeTypeMax)>
    nodeTypeStr = {
  "NONE",
{{- range .Parser.Types.RangeTypes }}
  "{{.Name}}",
{{- end}}
{{- range .Options.ExtraTypes }}
  "{{.Name}}",
{{- end}}
};

inline std::ostream& operator<<(std::ostream& os, NodeType t) {
  int i = static_cast<int>(t);
  if (i >= 0 && i < nodeTypeStr.size()) {
    return os << nodeTypeStr[i];
  }
  return os << "node(" << i << ")";
}

{{ end -}}

constexpr inline bool debugSyntax = {{ .Options.DebugParser }};
constexpr inline int startStackSize = 256;
{{- if .ReportTokens true }}
constexpr inline int startTokenBufferSize = 16;
{{- end}}
constexpr inline int32_t noToken = static_cast<int32_t>(Token::UNAVAILABLE);
constexpr inline int32_t eoiToken = static_cast<int32_t>(Token::EOI);

ABSL_MUST_USE_RESULT std::string symbolName(int32_t sym);

{{block "onBeforeParser" .}}{{end -}}

class Parser final {
 public:
{{ if .Parser.Types -}}
  template <typename Listener>
  explicit Parser(Listener&& listener{{ range .Options.ParseParams}}, {{.}}_arg{{end}})
      : listener_(std::forward<Listener>(listener)){{ range .Options.ParseParams}}, {{$id := last_id .}}{{$id}}({{$id}}_arg){{end}} {
{{ if .ReportTokens true -}}
    pending_symbols_.reserve(startTokenBufferSize);
{{ end -}}
  }
{{ else -}}
  Parser({{ range $i, $p := .Options.ParseParams}}{{if ne $i 0}}, {{end}}{{$p}}_arg{{end}}){{if .Options.ParseParams}} : {{ range $i, $p := .Options.ParseParams}}{{if ne $i 0}}, {{end}}{{$id := last_id $p}}{{$id}}({{$id}}_arg){{end}}{{end}} {}
{{ end -}}

{{ range $index, $inp := .Parser.Inputs -}}
{{ if $inp.Synthetic }}{{continue}}{{end -}}
{{ $nt := index $.Parser.Nonterms $inp.Nonterm -}}
  absl::Status Parse{{if $.Parser.HasMultipleUserInputs}}{{$.NontermID $inp.Nonterm}}{{end}}(Lexer& lexer) {
    return Parse({{$index}}, {{index $.Parser.Tables.FinalStates $index}}, lexer);
  }

{{ end -}}
{{block "parserPublicDecls" .}}{{end -}}

 private:
{{ if .ReportTokens true -}}
  void reportIgnoredToken(symbol sym);
{{ end -}}
  void fetchNext(Lexer& lexer, std::vector<stackEntry>& stack);
  absl::Status applyRule(int32_t rule, stackEntry& lhs,
                         [[maybe_unused]] absl::Span<const stackEntry> rhs,
                         Lexer& lexer);
  absl::Status Parse(
    int{{$stateType}}_t start, int{{$stateType}}_t end, Lexer& lexer);

  symbol next_symbol_;
{{ if .Parser.Types -}}
  absl::FunctionRef<void(NodeType, Lexer::Location)> listener_;
{{ end -}}
{{ range .Options.ParseParams -}}
  {{.}};
{{ end -}}
{{ if .ReportTokens true -}}
  // Tokens to be reported with the next shift. Only non-empty when next.symbol
  // != noToken.
  std::vector<symbol> pending_symbols_;
{{ end -}}
{{block "parserPrivateDecls" .}}{{end -}}

  friend std::ostream& operator<<(std::ostream& os, const Parser& parser) {
    return os << "{{.Options.Namespace}}::Parser next " << symbolName(parser.next_symbol_.symbol)
{{- if .ReportTokens true }}
              << " and pending " << parser.pending_symbols_.size()
              << " symbols"
{{- end}};
  }
};

}  // namespace {{.Options.Namespace}}

#endif  // {{.Options.IncludeGuardPrefix}}PARSER_H_