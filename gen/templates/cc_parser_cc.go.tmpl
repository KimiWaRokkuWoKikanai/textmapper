{{ template "header" . -}}
{{block "parserIncludes" . -}}
#include "parser.h"

#include <cstdint>
#include <string>

#include "lexer.h"
#include "absl/strings/str_format.h"
{{end}}
namespace {{.Options.Namespace}} {
{{block "onBeforeParser" .}}{{end -}}
{{template "parserTables" .}}
{{- block "onAfterParser" .}}{{end}}
}  // namespace {{.Options.Namespace}}
{{/**/}}

{{- define "parserTables" -}}
constexpr inline absl::string_view tmNonterminals[] = {
{{- range .Parser.Nonterms}}
	"{{.Name}}",
{{- end}}
};
constexpr size_t tmNonterminalsLen =
    sizeof(tmNonterminals) / sizeof(tmNonterminals[0]);

std::string symbolName(int32_t sym) {
  if (sym == noToken) {
    return "<no-token>";
  }
  if (sym >= 0 && sym < static_cast<int32_t>(Token::NumTokens)) {
    return std::string(tokenStr[sym]);
  }
  if (sym >= static_cast<int32_t>(Token::NumTokens) &&
      sym - static_cast<int32_t>(Token::NumTokens) < tmNonterminalsLen) {
    return std::string(
        tmNonterminals[sym - static_cast<int32_t>(Token::NumTokens)]);
  }
  return absl::StrFormat("nonterminal(%d)", sym);
}

constexpr int32_t tmAction[] = {
{{- int_array .Parser.Tables.Action "\t" 79 -}}
};
{{- if .Parser.Tables.Lalr}}

constexpr int32_t tmLalr[] = {
{{- int_array .Parser.Tables.Lalr "\t" 79 -}}
};
{{- end}}

constexpr int32_t tmGoto[] = {
{{- int_array .Parser.Tables.Goto "\t" 79 -}}
};

{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
constexpr int{{$stateType}}_t tmFromTo[] = {
{{- int_array .Parser.Tables.FromTo "\t" 79 -}}
};

constexpr int{{bits_per_element .Parser.Tables.RuleLen}}_t tmRuleLen[] = {
{{- int_array .Parser.Tables.RuleLen "\t" 79 -}}
};

constexpr int32_t tmRuleSymbol[] = {
{{- int_array .Parser.Tables.RuleSymbol "\t" 79 -}}
};

constexpr NodeType tmRuleType[] = {
    NodeType::JSONText,     // JSONText : JSONValue_A
    NodeType::JSONValue,    // JSONValue : 'null'
    NodeType::JSONValue,    // JSONValue : 'true'
    NodeType::JSONValue,    // JSONValue : 'false'
    NodeType::JSONValue,    // JSONValue : 'B'
    NodeType::JSONValue,    // JSONValue : JSONObject
    NodeType::JSONValue,    // JSONValue : EmptyObject
    NodeType::JSONValue,    // JSONValue : JSONArray
    NodeType::JSONValue,    // JSONValue : JSONString
    NodeType::JSONValue,    // JSONValue : JSONNumber
    NodeType::JSONValue,    // JSONValue_A : 'null'
    NodeType::JSONValue,    // JSONValue_A : 'true'
    NodeType::JSONValue,    // JSONValue_A : 'false'
    NodeType::JSONValue,    // JSONValue_A : 'A'
    NodeType::JSONValue,    // JSONValue_A : JSONObject
    NodeType::JSONValue,    // JSONValue_A : EmptyObject
    NodeType::JSONValue,    // JSONValue_A : JSONArray
    NodeType::JSONValue,    // JSONValue_A : JSONString
    NodeType::JSONValue,    // JSONValue_A : JSONNumber
    NodeType::EmptyObject,  // EmptyObject : lookahead_EmptyObject '{' '}'
    NodeType::NoType,       // lookahead_EmptyObject :
    NodeType::JSONObject,   // JSONObject : lookahead_notEmptyObject '{'
                            // JSONMemberList '}'
    NodeType::JSONObject,   // JSONObject : lookahead_notEmptyObject '{' '}'
    NodeType::NoType,       // lookahead_notEmptyObject :
    NodeType::JSONMember,   // JSONMember : JSONString ':' JSONValue
    NodeType::NoType,       // JSONMemberList : JSONMember
    NodeType::NoType,       // JSONMemberList : JSONMemberList ',' JSONMember
    NodeType::JSONArray,    // JSONArray : '[' JSONElementListopt ']'
    NodeType::NoType,       // JSONElementList : JSONValue_A
    NodeType::NoType,       // JSONElementList : JSONElementList ',' JSONValue_A
    NodeType::NoType,       // JSONElementListopt : JSONElementList
    NodeType::NoType,       // JSONElementListopt :
};

{{- range .Sets}}

// {{.Expr}} = {{.ValueString $}}
[[maybe_unused]] constexpr int32_t {{.Name}}[] = {
{{- if gt (len .Terminals) 0 -}}
{{- int_array .Terminals "\t" 79 -}}
{{- end -}}
};
{{- end}}

int32_t lalr(int32_t action, int32_t next) {
  int32_t a = -action - 3;
  for (; tmLalr[a] >= 0; a += 2) {
    if (tmLalr[a] == next) {
      break;
    }
  }
  return tmLalr[a + 1];
}

int8_t gotoState(int8_t state, int32_t symbol) {
  int32_t min = tmGoto[symbol];
  int32_t max = tmGoto[symbol + 1];

  if (max - min < 32) {
    for (auto i = min; i < max; i += 2) {
      if (tmFromTo[i] == state) {
        return tmFromTo[i + 1];
      }
    }
  } else {
    while (min < max) {
      int32_t e = ((min + max) / 2) & ~static_cast<int32_t>(1);
      int8_t i = tmFromTo[e];
      if (i == state) {
        return tmFromTo[e + 1];
      } else if (i < state) {
        min = e + 2;
      } else {
        max = e;
      }
    }
  }
  return -1;
}

void Parser::reportIgnoredToken(symbol sym) {
  NodeType t;
  switch (Token(sym.symbol)) {
    case Token::MULTILINECOMMENT:
      t = NodeType::MultiLineComment;
      break;
    case Token::INVALID_TOKEN:
      t = NodeType::InvalidToken;
      break;
    default:
      return;
  }
  if (debugSyntax) {
    LOG(INFO) << "ignored: " << Token(sym.symbol) << " as " << t;
  }
  listener_(t, sym.offset, sym.endoffset);
}
{{end}}
