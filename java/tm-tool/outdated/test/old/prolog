##########################################################################
#   Prolog phrase structure grammar
#   compiler: http://lapg.sf.net/

.maxtoken    4096
.getsym      "chr = buff[l++];if( l == end ) fillb()"
.positioning "full"
.class       "parser"
.namespace   "Prolog"
.language    "cs"

# Vocabulary

# Identificators

lcID(string) : /[a-z][A-Za-z_0-9]*/ -1   { @ = new System.String(AE.GetChars(token,0,lapg_size-1)); break; }
ucID :         /[A-Z_][A-Za-z_0-9]*/ -1  { @ = new System.String(AE.GetChars(token,0,lapg_size-1)); break; }
ellipsis:      /\.\.\./
'..':          /\.\./
_:             /_/

# Comments: TODO: /*  */

_skip :        /%.*/
_skip :        /[ \t\r\n]/                  { continue; }

# Numbers (floating point constants were taken from C language ISO Standart)

Licon:         /[1-9][0-9]*|0[oO][0-7]+|0[xX][0-9a-fA-F]+/
Lfcon:         /([0-9]*\.[0-9]+|[0-9]+\.)([eE][+-]?[0-9]+)?[flFL]?/
Lfcon:         /[0-9]+[eE][+-]?[0-9]+[flFL]?/
Lfcon:         /0[xX]([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.?)[pP][+-]?[0-9]+[flFL]?/

# strings, binaries, lists

Lscon:         /@?"([^"\\]|\\(['"\\nrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]))*"/
Lccon:         /'[^'\\]|\\(['"\\nrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])'/
'$[':          /$\[/
'|':           /\|/

# major keywords

Lclass:        /class/
Lclauses:      /clauses/
Lconstants:    /constants/
Lconstructors: /constructors/
Ldiv:          /div/
Ldomains:      /domains/
Lend:          /end/
Lfacts:        /facts/
Lfrom:         /from/
Limplement:    /implement/
Linterface:    /interface/
Linherits:     /inherits/
Lgoal:         /goal/
Lmod:          /mod/
Lopen:         /open/
Lpredicates:   /predicates/
Lresolve:      /resolve/
Lsupports:     /supports/

# minor

Lalign:        /align/
Land:          /and/
Las:           /as/
Lbitsize:      /bitsize/
Ldeterm:       /determ/
Ldigits:       /digits/
Lerroneous:    /erroneous/
Lexternally:   /externally/
Lfailure:      /failure/
Llanguage:     /language/
Lmulti:        /multi/
Lnondeterm:    /nondeterm/
Lor:           /or/
Lprocedure:    /procedure/
Lreference:    /reference/
Lsingle:       /single/

# reserved

_skip:         /monitor/
_skip:         /guards/

# punctuation

';':           /;/
'!':           /!/ 
',':           /,/
'.':           /\./
'#':           /#/
'[':           /\[/
']':           /\]/
'(':           /\(/
')':           /\)/
':-':          /:-/
':':           /:/
'::':          /::/

# operators

'+':           /+/
'-':           /-/
'/':           /\//
'*':           /*/
'=':           /=/
'<':           /</
'>':           />/
'<>':          /<>/
'><':          /></
'<=':          /<=/
'>=':          />=/
':=':          /:=/
'->':          /->/

error:

# Attributes

[]

##########################################################################

### Auxiliaries

binaryLiteral ::= 
    '$[' int_listopt ']' ;

int_list ::= 
    Licon | int_list ',' Licon ;

simple_literal ::= 
    Licon | Lfcon | Lccon | Lscon | binaryLiteral ;

lcID_list ::= 
    lcID | lcID_list ',' lcID ;

constantValue ::= 
    Licon ;

realconstantValue ::= 
    Lfcon ;

Identifier ::= 
    lcID | ucID ;


### compilation unit

input ::=
    compilationItem | input compilationItem ;

compilationItem ::
  = interfaceDeclaration
  = classDeclaration
  = classImplementation
  = goalSection
  # conditionalItem
;

### goal section

goalSection ::= 
    Lgoal Term '.' ;


### interface declaration

interfaceDeclaration ::= 
    Linterface lcID 
       scopeQualifications_iface 
       section_list_iface
    Lend Linterface lcIDopt ;

scopeQualifications_iface ::= 
    scopeQualif_iface | scopeQualifications_iface scopeQualif_iface ;

scopeQualif_iface ::
  = Lsupports lcID_list
  = Lopen lcID_list
;

section_list_iface ::= 
    section_iface | section_list_iface section_iface ;

section_iface ::
  = constantsSection
  = domainsSection
  = predicatesSection
  = predicatesFromInterface
  # conditionalSection
;

predicatesFromInterface ::= 
    Lpredicates Lfrom lcID predicateNameWithArity_listopt ;

predicateNameWithArity_list ::=
    predicateNameWithArity | predicateNameWithArity_list ',' predicateNameWithArity ;

### class declaration

classDeclaration ::= 
    Lclass lcID constructionTypeopt 
       scopeQualifications_declopt 
       section_list_decl 
    Lend Lclass lcIDopt ;

constructionType ::= 
    ':' lcID ;

scopeQualifications_decl ::= 
    Lopen lcID_list ;

section_list_decl ::=
    section_decl | section_list_decl section_decl ;

section_decl ::
  = constantsSection
  = domainsSection
  = predicatesSection
  = constructorsSection
  # conditionalSection
;

### class implementation

classImplementation ::=
    Limplement lcID
       scopeQualifications_impl
       section_list_impl
    Lend Limplement lcIDopt ;

scopeQualifications_impl ::=
    scopeQualif_impl | scopeQualifications_impl scopeQualif_impl ;

scopeQualif_impl ::
  = Lsupports lcID_list
  = Lopen lcID_list 
  = Linherits lcID_list
  = Lresolve resolution_list
;

resolution_list ::= 
    resolution | resolution_list ',' resolution ;

resolution ::
  = Linterface lcID Lfrom lcID
  = predicateNameWithArity Lfrom lcID
  = predicateNameWithArity Lfrom lcID '::' lcID
  = predicateNameWithArity Lexternally
;

predicateNameWithArity ::=
    lcID arityopt ;

arity ::=
    '/' Licon ellipsisopt | '/' '/' Licon ellipsisopt ;

section_list_impl ::= 
    section_impl | section_list_impl section_impl ;

section_impl ::
  = constantsSection
  = domainsSection  
  = predicatesSection
  = constructorsSection
  = factsSection
  = clausesSection
  = error \ System.Console.WriteLine("error");break;
  # conditionalSection
;


### sections

constantsSection ::= 
    Lconstants 
    constant_def_listopt ;

  constant_def_list ::= 
      constant_def | constant_def_list constant_def ;

  constant_def ::
      = lcID ':' typeName '=' simple_literal '.'
      = lcID '=' simple_literal '.'
  ;


domainsSection ::= 
    Ldomains 
    domain_def_listopt ;

  domain_def_list ::= 
      domain_def | domain_def_list domain_def ;

  domain_def ::= 
      lcID '=' typeExpression '.' ;

predicatesSection ::= 
    Lclass Lpredicates predicate_decl_listopt |
    Lpredicates predicate_decl_listopt ;

  predicate_decl_list ::= 
      predicate_decl | predicate_decl_list predicate_decl ;

  predicate_decl ::= 
      lcID ':' predicateDomain linkNameopt '.' |
      lcID ':' typeName linkNameopt '.' ;

  linkName ::= 
      Las Lscon ;


constructorsSection ::= 
    Lconstructors constructor_decl_listopt ;

  constructor_decl_list ::= 
      constructor_decl | constructor_decl_list constructor_decl ;

  constructor_decl ::= 
      lcID ':' predicateDomain '.' |
      lcID ':' typeName '.' ;


factsSection ::=
    Lclassopt Lfacts factsSectionNameopt 
    fact_decl_listopt ;

  factsSectionName ::=
      '-' lcID ;

  fact_decl_list ::=
      fact_decl | fact_decl_list fact_decl ;

  fact_decl ::=
      factVariableDeclaration '.' | factFunctorDeclaration '.' ;

  factVariableDeclaration ::=
      lcID ':' lcID initialValueopt ;

  initialValue ::= 
      ':=' add_term ;

  factFunctorDeclaration ::=
      lcID ':' '(' formalArgument_listopt ')' factModeopt ;

  factMode ::= 
      Ldeterm | Lnondeterm | Lsingle ;


clausesSection ::=
    Lclauses clause_listopt ;

  clause_list ::=
      clause | clause_list clause ;

  clause ::=
      clauseHead returnValueopt clauseBodyopt '.' ;

  clauseHead ::=
      lcID '(' term_listopt ')' ;

  returnValue ::=
      '=' Term ;

  clauseBody ::=
      ':-' Term ;


### type names and expressions

typeExpression ::
  = lcID            # either typeName or functor
  = lcID '::' lcID
  = compoundDomain
  = listDomain
  = referenceDomain
  = predicateDomain
  = integralDomain
  = realDomain
;

typeName ::
  = lcID
  = lcID '::' lcID
;


### List and reference domains

listDomain ::= 
    typeName '*' ;

referenceDomain ::= 
    Lreference referenceDomainDescription ;

referenceDomainDescription ::
  = lcID			# either typeName or functor
  = lcID '::' lcID
  = compoundDomain
  = listDomain
;


### Compound domains

compoundDomain ::= 
    alignment functorAlternative_list |
    functorAlternative_list ;

alignment ::=
    Lalign add_term ;

functorAlternative_list ::= 
    functorAlternative | functorAlternative_list ';' functorAlternative ;

functorAlternative ::= 
    lcID | lcID '(' functorformalArgument_listopt ')' ;

functorformalArgument_list ::=
    functorformalArgument | functorformalArgument_list ',' functorformalArgument ;

functorformalArgument ::=
    typeName Identifieropt ;


### Predicate domains

predicateDomain ::=
  '(' formalArgument_listopt ')' returnArgumentopt
        predicateModeAndFlow_listopt callingConventionopt ;

formalArgument_list ::=
    formalArgument | formalArgument_list ',' formalArgument ;

formalArgument ::
  = predicateArgumentType ucIDopt
  = ellipsis
;

predicateArgumentType ::=
    typeName | _ ;

predicateModeAndFlow_list ::=
    predicateModeAndFlow | predicateModeAndFlow_list predicateModeAndFlow ;

predicateModeAndFlow ::=
    predicateMode flowPattern_listopt ;

predicateMode ::
  = Lerroneous
  = Lfailure
  = Lprocedure
  = Ldeterm
  = Lmulti
  = Lnondeterm
;

flowPattern_list ::=
    flowPattern | flowPattern_list flowPattern ;

flowPattern ::=
    '(' flow_listopt ')' ;

flow_list ::=
    flow | flow_list ',' flow ;

flow ::
  = lcID
  = functorFlow
  = listFlow
  = ellipsis
;

functorFlow ::=
    lcID '(' flow_listopt ')' ;

listFlow ::=
    '[' flow_listopt listFlowTailopt ']' ;

listFlowTail ::=
    '|' flow ;

returnArgument ::=
    '->' formalArgument ;

callingConvention ::=
    Llanguage lcID ;

### Integral and real domains

integralDomain ::= 
    lcIDopt integralDomainProperties ;

  integralDomainProperties ::
      = integralSizeDescription integralRangeDescriptionopt
      = integralRangeDescription integralSizeDescriptionopt
  ;

  integralSizeDescription ::=
      Lbitsize constantValue ;

  integralRangeDescription ::=
      '[' constantValue '..' constantValueopt ']' |
      '[' '..' constantValue ']' ;

realDomain ::=
    lcIDopt realDomainProperties ;

  realDomainProperties ::
      = realPrecisionDescription realRangeDescriptionopt
      = realRangeDescription realPrecisionDescription
  ;

  realPrecisionDescription ::=
      Ldigits constantValue ;

  realRangeDescription ::=
      '[' realconstantValue '..' realconstantValueopt ']' |
      '[' '..' realconstantValue ']' ;

### Term

listExpression ::
  = '[' term_listopt ']'
  = '[' term_list '|' predicateCall ']'
  = '[' term_list '|' lcID ']'
  = '[' term_list '|' lcID '::' lcID ']'
  = '[' term_list '|' _ ']'
  = '[' term_list '|' listExpression ']'
;

term_list ::=
    add_term | term_list ',' add_term ;

predicateCall ::=
    to_call '(' term_listopt ')' ;

to_call ::=
    lcID |
    lcID '::' lcID |
    Identifier ':' lcID ;

simple_term ::
  = '(' Term ')'
  = simple_literal
  = listExpression
  = Identifier
  = _
  = lcID '::' lcID
  = '::' lcID
  = Identifier ':' lcID
  = predicateCall
  = '!'
  = ellipsis
;

unary_term ::=
    simple_term | '+' unary_term | '-' unary_term ;

mult_term ::=
    unary_term | mult_term '*' unary_term | mult_term '/' unary_term
    | mult_term Ldiv unary_term | mult_term Lmod unary_term ;

add_term ::=
    mult_term | add_term '+' mult_term | add_term '-' mult_term ;

rel_term ::=
    add_term | add_term relational_op add_term | lcID ':=' add_term  ;

relational_op ::=
    '>' | '<' | '>=' | '<=' | '<>' | '><' | '=' ;

and_term ::=
    rel_term | and_term ',' rel_term ;

or_term ::=
    and_term | or_term ';' and_term ;

Term ::=
    or_term ;

%%

#define DEBUG_syntax

using System.IO;

%%

	byte[] buff = new byte[1025];
	int l, end;
	BinaryReader r;

	void fillb() {
		l = 0;
		end = r.Read( buff, 0, 1024 );
		buff[end] = 0;
	}

	void error( string s ) {
		System.Console.WriteLine(s);
	}

	public bool accept( BinaryReader br ) {
    	r = br;
    	fillb();
    	return parse();
	}
