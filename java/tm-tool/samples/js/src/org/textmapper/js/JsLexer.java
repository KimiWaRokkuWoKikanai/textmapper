package org.textmapper.js;

import java.io.IOException;
import java.io.Reader;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;

public class JsLexer {

	public static class Span {
		public Object value;
		public int symbol;
		public int state;
		public int line;
		public int offset;
		public int endoffset;
	}

	public interface States {
		int initial = 0;
		int div = 1;
	}

	public interface Tokens {
		int Unavailable_ = -1;
		int eoi = 0;
		int space = 1;
		int LineTerminatorSequence = 2;
		int MultiLineComment = 3;
		int SingleLineComment = 4;
		int Identifier = 5;
		int _break = 6;
		int _case = 7;
		int _catch = 8;
		int _continue = 9;
		int debugger = 10;
		int _default = 11;
		int delete = 12;
		int _do = 13;
		int _else = 14;
		int _finally = 15;
		int _for = 16;
		int function = 17;
		int _if = 18;
		int in = 19;
		int _instanceof = 20;
		int _new = 21;
		int _return = 22;
		int _switch = 23;
		int _this = 24;
		int _throw = 25;
		int _try = 26;
		int typeof = 27;
		int var = 28;
		int _void = 29;
		int _while = 30;
		int with = 31;
		int _class = 32;
		int _const = 33;
		int _enum = 34;
		int export = 35;
		int _extends = 36;
		int _import = 37;
		int _super = 38;
		int Lbrace = 39;
		int Rbrace = 40;
		int Lparen = 41;
		int Rparen = 42;
		int Lbrack = 43;
		int Rbrack = 44;
		int Dot = 45;
		int Semicolon = 46;
		int Comma = 47;
		int Lt = 48;
		int Gt = 49;
		int LtAssign = 50;
		int GtAssign = 51;
		int AssignAssign = 52;
		int ExclAssign = 53;
		int AssignAssignAssign = 54;
		int ExclAssignAssign = 55;
		int Plus = 56;
		int Minus = 57;
		int Mult = 58;
		int Rem = 59;
		int PlusPlus = 60;
		int MinusMinus = 61;
		int LtLt = 62;
		int GtGt = 63;
		int GtGtGt = 64;
		int And = 65;
		int Or = 66;
		int Xor = 67;
		int Excl = 68;
		int Tilde = 69;
		int AndAnd = 70;
		int OrOr = 71;
		int Quest = 72;
		int Colon = 73;
		int Assign = 74;
		int PlusAssign = 75;
		int MinusAssign = 76;
		int MultAssign = 77;
		int RemAssign = 78;
		int LtLtAssign = 79;
		int GtGtAssign = 80;
		int GtGtGtAssign = 81;
		int AndAssign = 82;
		int OrAssign = 83;
		int XorAssign = 84;
		int _null = 85;
		int _true = 86;
		int _false = 87;
		int NumericLiteral = 88;
		int StringLiteral = 89;
		int RegularExpressionLiteral = 90;
		int Div = 91;
		int DivAssign = 92;
	}

	public interface ErrorReporter {
		void error(String message, int line, int offset, int endoffset);
	}

	public static final int TOKEN_SIZE = 2048;

	private Reader stream;
	final private ErrorReporter reporter;

	private CharSequence input;
	private int tokenOffset;
	private int l;
	private int charOffset;
	private int chr;

	private int state;

	private int tokenLine;
	private int currLine;
	private int currOffset;

	public JsLexer(CharSequence input, ErrorReporter reporter) throws IOException {
		this.reporter = reporter;
		reset(input);
	}

	public void reset(CharSequence input) throws IOException {
		this.state = 0;
		tokenLine = currLine = 1;
		currOffset = 0;
		this.input = input;
		tokenOffset = l = 0;
		charOffset = l;
		chr = l < input.length() ? input.charAt(l++) : -1;
		if (chr >= Character.MIN_HIGH_SURROGATE && chr <= Character.MAX_HIGH_SURROGATE && l < input.length() &&
				Character.isLowSurrogate(input.charAt(l))) {
			chr = Character.toCodePoint((char) chr, input.charAt(l++));
		}
	}

	protected void advance() {
		if (chr == -1) return;
		currOffset += l - charOffset;
		if (chr == '\n') {
			currLine++;
		}
		charOffset = l;
		chr = l < input.length() ? input.charAt(l++) : -1;
		if (chr >= Character.MIN_HIGH_SURROGATE && chr <= Character.MAX_HIGH_SURROGATE && l < input.length() &&
				Character.isLowSurrogate(input.charAt(l))) {
			chr = Character.toCodePoint((char) chr, input.charAt(l++));
		}
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}

	public int getTokenLine() {
		return tokenLine;
	}

	public int getLine() {
		return currLine;
	}

	public void setLine(int currLine) {
		this.currLine = currLine;
	}

	public int getOffset() {
		return currOffset;
	}

	public void setOffset(int currOffset) {
		this.currOffset = currOffset;
	}

	public String tokenText() {
		return input.subSequence(tokenOffset, charOffset).toString();
	}

	public int tokenSize() {
		return charOffset - tokenOffset;
	}

	private static final char[] tmCharClass = unpack_vc_char(918001,
		"\11\1\1\2\1\3\2\2\1\4\22\1\1\2\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
		"\1\17\1\20\1\21\1\22\1\23\11\24\1\25\1\26\1\27\1\30\1\31\1\32\1\1\4\33\1\34\1\33" +
		"\21\35\1\36\2\35\1\37\1\40\1\41\1\42\1\43\1\1\4\44\1\45\1\44\16\46\1\47\2\46\1\50" +
		"\2\46\1\51\1\52\1\53\1\54\41\1\1\2\11\1\1\55\12\1\1\46\4\1\1\55\5\1\27\35\1\1\7\35" +
		"\30\46\1\1\10\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\2\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\2\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\2\35\1\46\1\35\1\46\1\35\3\46\2\35" +
		"\1\46\1\35\1\46\2\35\1\46\3\35\2\46\4\35\1\46\2\35\1\46\3\35\3\46\2\35\1\46\2\35" +
		"\1\46\1\35\1\46\1\35\1\46\2\35\1\46\1\35\2\46\1\35\1\46\2\35\1\46\3\35\1\46\1\35" +
		"\1\46\2\35\2\46\1\55\1\35\3\46\4\55\1\35\1\56\1\46\1\35\1\56\1\46\1\35\1\56\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\2\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\2\46\1\35\1\56\1\46\1\35\1\46\3\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\7\46\2\35\1\46\2\35\2\46\1\35\1\46\4\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\105\46\1\55\33\46\22\57\4\1\14\57\16\1\5\57\7\1\1\57\1\1\1\57\21\1\160" +
		"\60\1\35\1\46\1\35\1\46\1\57\1\1\1\35\1\46\2\1\1\57\3\46\1\1\1\35\6\1\1\35\1\1\3" +
		"\35\1\1\1\35\1\1\2\35\1\46\21\35\1\1\11\35\43\46\1\35\2\46\3\35\3\46\1\35\1\46\1" +
		"\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1" +
		"\35\1\46\1\35\1\46\1\35\5\46\1\35\1\46\1\1\1\35\1\46\2\35\2\46\63\35\60\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\1\5\60\2\1\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\2\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\2\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\1\46\35\2\1\1\57\6\1\51\46\10\1\55\60\1\1\1" +
		"\60\1\1\2\60\1\1\2\60\1\1\1\60\10\1\33\55\4\1\4\55\35\1\13\60\5\1\40\55\1\57\12\55" +
		"\25\60\12\61\4\1\2\55\1\60\143\55\1\1\1\55\7\60\2\1\6\60\2\57\2\60\1\1\4\60\2\55" +
		"\12\61\3\55\2\1\1\55\20\1\1\55\1\60\36\55\33\60\2\1\131\55\13\60\1\55\16\1\12\61" +
		"\41\55\11\60\2\57\4\1\1\57\2\1\1\60\2\1\26\55\4\60\1\57\11\60\1\57\3\60\1\57\5\60" +
		"\22\1\31\55\3\60\4\1\13\55\5\1\30\55\1\1\6\55\11\1\10\60\51\55\1\57\30\60\1\1\40" +
		"\60\1\62\66\55\1\60\1\62\1\60\1\55\3\62\10\60\4\62\1\60\2\62\1\55\7\60\12\55\2\60" +
		"\2\1\12\61\1\1\1\57\17\55\1\60\2\62\1\1\10\55\2\1\2\55\2\1\26\55\1\1\7\55\1\1\1\55" +
		"\3\1\4\55\2\1\1\60\1\55\3\62\4\60\2\1\2\62\2\1\2\62\1\60\1\55\10\1\1\62\4\1\2\55" +
		"\1\1\3\55\2\60\2\1\12\61\2\55\12\1\1\55\1\1\1\60\2\1\2\60\1\62\1\1\6\55\4\1\2\55" +
		"\2\1\26\55\1\1\7\55\1\1\2\55\1\1\2\55\1\1\2\55\2\1\1\60\1\1\3\62\2\60\4\1\2\60\2" +
		"\1\3\60\3\1\1\60\7\1\4\55\1\1\1\55\7\1\12\61\2\60\3\55\1\60\13\1\2\60\1\62\1\1\11" +
		"\55\1\1\3\55\1\1\26\55\1\1\7\55\1\1\2\55\1\1\5\55\2\1\1\60\1\55\3\62\5\60\1\1\2\60" +
		"\1\62\1\1\2\62\1\60\2\1\1\55\17\1\2\55\2\60\2\1\12\61\11\1\1\55\6\60\1\1\1\60\2\62" +
		"\1\1\10\55\2\1\2\55\2\1\26\55\1\1\7\55\1\1\2\55\1\1\5\55\2\1\1\60\1\55\1\62\1\60" +
		"\1\62\4\60\2\1\2\62\2\1\2\62\1\60\7\1\2\60\1\62\4\1\2\55\1\1\3\55\2\60\2\1\12\61" +
		"\1\1\1\55\20\1\1\60\1\55\1\1\6\55\3\1\3\55\1\1\4\55\3\1\2\55\1\1\1\55\1\1\2\55\3" +
		"\1\2\55\3\1\3\55\3\1\14\55\4\1\2\62\1\60\2\62\3\1\3\62\1\1\3\62\1\60\2\1\1\55\6\1" +
		"\1\62\16\1\12\61\20\1\1\60\3\62\1\60\10\55\1\1\3\55\1\1\27\55\1\1\20\55\2\1\1\60" +
		"\1\55\3\60\4\62\1\1\3\60\1\1\4\60\7\1\2\60\1\1\3\55\2\1\1\55\2\1\2\55\2\60\2\1\12" +
		"\61\20\1\1\55\1\60\2\62\1\1\10\55\1\1\3\55\1\1\27\55\1\1\12\55\1\1\5\55\2\1\1\60" +
		"\1\55\1\62\1\60\5\62\1\1\1\60\2\62\1\1\2\62\2\60\7\1\2\62\6\1\2\55\1\1\2\55\2\60" +
		"\2\1\12\61\1\1\2\55\1\62\14\1\2\60\2\62\11\55\1\1\3\55\1\1\51\55\2\60\1\55\3\62\4" +
		"\60\1\1\3\62\1\1\3\62\1\60\1\55\5\1\3\55\1\62\7\1\3\55\2\60\2\1\12\61\12\1\6\55\1" +
		"\1\1\60\2\62\1\1\22\55\3\1\30\55\1\1\11\55\1\1\1\55\2\1\7\55\3\1\1\60\4\1\3\62\3" +
		"\60\1\1\1\60\1\1\10\62\6\1\12\61\2\1\2\62\15\1\60\55\1\60\2\55\7\60\5\1\6\55\1\57" +
		"\10\60\1\1\12\61\47\1\2\55\1\1\1\55\1\1\5\55\1\1\30\55\1\1\1\55\1\1\12\55\1\60\2" +
		"\55\11\60\1\55\2\1\5\55\1\1\1\57\1\1\7\60\1\1\12\61\2\1\4\55\40\1\1\55\27\1\2\60" +
		"\6\1\12\61\13\1\1\60\1\1\1\60\1\1\1\60\4\1\2\62\10\55\1\1\44\55\4\1\16\60\1\62\5" +
		"\60\1\1\2\60\5\55\13\60\1\1\44\60\11\1\1\60\71\1\53\55\2\62\4\60\1\62\6\60\1\62\2" +
		"\60\2\62\2\60\1\55\12\61\6\1\6\55\2\62\2\60\4\55\3\60\1\55\3\62\2\55\7\62\3\55\4" +
		"\60\15\55\1\60\2\62\2\60\6\62\1\60\1\55\1\62\12\61\3\62\1\60\2\1\46\35\1\1\1\35\5" +
		"\1\1\35\2\1\53\46\1\1\1\57\3\46\u0149\55\1\1\4\55\2\1\7\55\1\1\1\55\1\1\4\55\2\1" +
		"\51\55\1\1\4\55\2\1\41\55\1\1\4\55\2\1\7\55\1\1\1\55\1\1\4\55\2\1\17\55\1\1\71\55" +
		"\1\1\4\55\2\1\103\55\2\1\3\60\40\1\20\55\20\1\126\35\2\1\6\46\3\1\u026c\55\2\1\21" +
		"\55\1\2\32\55\5\1\113\55\3\1\3\63\10\55\7\1\22\55\3\60\1\62\11\1\23\55\2\60\1\62" +
		"\13\1\22\55\2\60\14\1\15\55\1\1\3\55\1\1\2\60\14\1\64\55\2\60\1\62\7\60\10\62\1\60" +
		"\2\62\13\60\3\1\1\57\4\1\1\55\1\60\2\1\12\61\41\1\3\60\1\1\1\60\12\61\6\1\43\55\1" +
		"\57\65\55\7\1\5\55\2\60\42\55\1\60\1\55\5\1\106\55\12\1\37\55\1\1\3\60\4\62\2\60" +
		"\3\62\4\1\2\62\1\60\6\62\3\60\12\1\12\61\36\55\2\1\5\55\13\1\54\55\4\1\32\55\6\1" +
		"\12\61\46\1\27\55\2\60\2\62\1\60\4\1\65\55\1\62\1\60\1\62\7\60\1\1\1\60\1\62\1\60" +
		"\2\62\10\60\6\62\12\60\2\1\1\60\12\61\6\1\12\61\15\1\1\57\10\1\16\60\1\1\20\60\61" +
		"\1\4\60\1\62\57\55\1\60\1\62\5\60\1\62\1\60\5\62\1\60\2\62\10\55\3\1\12\61\21\1\11" +
		"\60\14\1\2\60\1\62\36\55\1\62\4\60\2\62\2\60\1\62\3\60\2\55\12\61\54\55\1\60\1\62" +
		"\2\60\3\62\1\60\1\62\3\60\2\62\14\1\44\55\10\62\10\60\2\62\2\60\10\1\12\61\3\1\3" +
		"\55\12\61\36\55\6\57\2\1\11\46\7\1\53\35\2\1\3\35\20\1\3\60\1\1\15\60\1\62\7\60\4" +
		"\55\1\60\6\55\1\60\2\55\1\62\2\60\1\55\5\1\54\46\77\57\15\46\1\57\42\46\45\57\100" +
		"\60\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\11\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\11\46\10\35\6\46\2\1\6\35\2\1\10\46\10\35" +
		"\10\46\10\35\6\46\2\1\6\35\2\1\10\46\1\1\1\35\1\1\1\35\1\1\1\35\1\1\1\35\10\46\10" +
		"\35\16\46\2\1\10\46\10\56\10\46\10\56\10\46\10\56\5\46\1\1\2\46\4\35\1\56\1\1\1\46" +
		"\3\1\3\46\1\1\2\46\4\35\1\56\3\1\4\46\2\1\2\46\4\35\4\1\10\46\5\35\5\1\3\46\1\1\2" +
		"\46\4\35\1\56\3\1\13\2\1\1\1\64\1\65\32\1\2\66\5\1\1\2\17\1\2\67\23\1\1\67\12\1\1" +
		"\2\21\1\1\57\15\1\1\57\20\1\15\57\63\1\15\60\4\1\1\60\3\1\14\60\21\1\1\35\4\1\1\35" +
		"\2\1\1\46\3\35\2\46\3\35\1\46\1\1\1\35\3\1\5\35\6\1\1\35\1\1\1\35\1\1\1\35\1\1\4" +
		"\35\1\1\1\46\4\35\1\46\4\55\1\46\2\1\2\46\2\35\5\1\1\35\4\46\4\1\1\46\21\1\43\63" +
		"\1\35\1\46\4\63\u0a77\1\60\35\60\46\1\35\1\46\3\35\2\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\4\35\1\46\1\35\2\46\1\35\6\46\2\57\3\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46" +
		"\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\2\46\6\1\1\35\1\46\1\35\1" +
		"\46\3\60\1\35\1\46\14\1\46\46\1\1\1\46\5\1\1\46\2\1\70\55\7\1\1\57\17\1\1\60\27\55" +
		"\11\1\7\55\1\1\7\55\1\1\7\55\1\1\7\55\1\1\7\55\1\1\7\55\1\1\7\55\1\1\7\55\1\1\40" +
		"\60\57\1\1\57\u01d0\1\1\2\4\1\1\57\1\55\1\63\31\1\11\63\4\60\2\62\1\1\5\57\2\1\3" +
		"\63\1\57\1\55\4\1\126\55\2\1\2\60\2\1\2\57\1\55\1\1\132\55\1\1\3\57\1\55\5\1\53\55" +
		"\1\1\136\55\21\1\40\55\60\1\20\55\u0200\1\u19c0\55\100\1\u5215\55\1\57\u0477\55\103" +
		"\1\50\55\6\57\2\1\u010c\55\1\57\3\1\20\55\12\61\2\55\24\1\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\55\1\60\4\1\12\60\1\1\1\57\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1" +
		"\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\2\57\2\60\106\55\12\63\2\60" +
		"\45\1\11\57\2\1\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\3\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35" +
		"\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\57" +
		"\10\46\1\35\1\46\1\35\1\46\2\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\57" +
		"\2\1\1\35\1\46\1\35\1\46\1\55\1\35\1\46\1\35\3\46\1\35\1\46\1\35\1\46\1\35\1\46\1" +
		"\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\5\35\1\46\5" +
		"\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\1\35\1\46\4" +
		"\35\1\46\1\35\1\46\5\1\1\35\1\46\1\1\1\46\1\1\1\46\1\35\1\46\1\35\1\46\30\1\3\57" +
		"\1\35\1\46\1\55\2\57\1\46\7\55\1\60\3\55\1\60\4\55\1\60\27\55\2\62\2\60\1\62\4\1" +
		"\1\60\23\1\64\55\14\1\2\62\62\55\20\62\2\60\12\1\12\61\6\1\22\60\6\55\3\1\1\55\1" +
		"\1\2\55\1\60\12\61\34\55\10\60\2\1\27\55\13\60\2\62\14\1\35\55\3\1\3\60\1\62\57\55" +
		"\1\60\2\62\4\60\2\62\2\60\3\62\16\1\1\57\12\61\6\1\5\55\1\60\1\57\11\55\12\61\5\55" +
		"\1\1\51\55\6\60\2\62\2\60\2\62\2\60\11\1\3\55\1\60\10\55\1\60\1\62\2\1\12\61\6\1" +
		"\20\55\1\57\6\55\3\1\1\55\1\62\1\60\1\62\62\55\1\60\1\55\3\60\2\55\2\60\5\55\2\60" +
		"\1\55\1\60\1\55\30\1\2\55\1\57\2\1\13\55\1\62\2\60\2\62\2\1\1\55\2\57\1\62\1\60\12" +
		"\1\6\55\2\1\6\55\2\1\6\55\11\1\7\55\1\1\7\55\1\1\53\46\1\1\4\57\11\46\1\57\6\1\120" +
		"\46\43\55\2\62\1\60\2\62\1\60\2\62\1\1\1\62\1\60\2\1\12\61\6\1\u2ba4\55\14\1\27\55" +
		"\4\1\61\55\u2104\1\u016e\55\2\1\152\55\46\1\7\46\14\1\5\46\5\1\1\55\1\60\12\55\1" +
		"\1\15\55\1\1\5\55\1\1\1\55\1\1\2\55\1\1\2\55\1\1\154\55\41\1\u016b\55\22\1\100\55" +
		"\2\1\66\55\50\1\14\55\4\1\20\60\20\1\20\60\3\1\2\67\30\1\3\67\40\1\5\55\1\1\207\55" +
		"\2\1\1\2\20\1\12\61\7\1\32\35\4\1\1\67\1\1\32\46\13\1\12\55\1\57\55\55\2\57\37\55" +
		"\3\1\6\55\2\1\6\55\2\1\6\55\2\1\3\55\43\1\14\55\1\1\32\55\1\1\23\55\1\1\2\55\1\1" +
		"\17\55\2\1\16\55\42\1\173\55\105\1\65\63\210\1\1\60\202\1\35\55\3\1\61\55\17\1\1" +
		"\60\37\1\40\55\15\1\24\55\1\63\10\55\1\63\5\1\46\55\5\60\5\1\36\55\2\1\44\55\4\1" +
		"\10\55\1\1\5\63\52\1\50\35\50\46\116\55\2\1\12\61\6\1\44\35\4\1\44\46\4\1\50\55\10" +
		"\1\64\55\14\1\13\35\1\1\17\35\1\1\7\35\1\1\2\35\1\1\13\46\1\1\17\46\1\1\7\46\1\1" +
		"\2\46\103\1\u0137\55\11\1\26\55\12\1\10\55\30\1\6\57\1\1\52\57\1\1\11\57\105\1\6" +
		"\55\2\1\1\55\1\1\54\55\1\1\2\55\3\1\1\55\2\1\27\55\12\1\27\55\11\1\37\55\101\1\23" +
		"\55\1\1\2\55\12\1\26\55\12\1\32\55\106\1\70\55\6\1\2\55\100\1\1\55\3\60\1\1\2\60" +
		"\5\1\4\60\4\55\1\1\3\55\1\1\35\55\2\1\3\60\4\1\1\60\40\1\35\55\3\1\35\55\43\1\10" +
		"\55\1\1\34\55\2\60\31\1\66\55\12\1\26\55\12\1\23\55\15\1\22\55\156\1\111\55\67\1" +
		"\63\35\15\1\63\46\15\1\44\55\4\60\10\1\12\61\u0146\1\52\55\1\1\2\60\3\1\2\55\113" +
		"\1\3\60\35\55\12\1\1\55\10\1\26\55\13\60\37\1\22\55\4\60\52\1\25\55\33\1\27\55\11" +
		"\1\1\62\1\60\1\62\65\55\17\60\37\1\12\61\1\60\2\55\2\60\1\55\11\1\3\60\1\62\55\55" +
		"\3\62\4\60\2\62\2\60\7\1\1\60\15\1\31\55\7\1\12\61\6\1\3\60\44\55\5\60\1\62\10\60" +
		"\1\1\12\61\4\1\1\55\2\62\1\55\10\1\43\55\1\60\2\1\1\55\11\1\2\60\1\62\60\55\3\62" +
		"\11\60\2\62\4\55\4\1\4\60\1\1\1\62\1\60\12\61\1\55\1\1\1\55\43\1\22\55\1\1\31\55" +
		"\3\62\3\60\2\62\1\60\1\62\2\60\6\1\1\60\2\55\1\60\76\1\7\55\1\1\1\55\1\1\4\55\1\1" +
		"\17\55\1\1\12\55\7\1\57\55\1\60\3\62\10\60\5\1\12\61\6\1\2\60\2\62\1\1\10\55\2\1" +
		"\2\55\2\1\26\55\1\1\7\55\1\1\2\55\1\1\5\55\1\1\2\60\1\55\2\62\1\60\4\62\2\1\2\62" +
		"\2\1\3\62\2\1\1\55\6\1\1\62\5\1\5\55\2\62\2\1\7\60\3\1\5\60\213\1\65\55\3\62\10\60" +
		"\2\62\3\60\1\62\1\60\4\55\5\1\12\61\4\1\1\60\3\55\36\1\60\55\3\62\6\60\1\62\1\60" +
		"\4\62\2\60\1\62\2\60\2\55\1\1\1\55\10\1\12\61\246\1\57\55\3\62\4\60\2\1\4\62\2\60" +
		"\1\62\2\60\27\1\4\55\2\60\42\1\60\55\3\62\10\60\2\62\1\60\1\62\2\60\3\1\1\55\13\1" +
		"\12\61\46\1\53\55\1\60\1\62\1\60\2\62\6\60\1\62\1\60\1\55\7\1\12\61\66\1\33\55\2" +
		"\1\3\60\2\62\4\60\1\62\5\60\4\1\12\61\6\1\7\55\271\1\54\55\3\62\11\60\1\62\2\60\145" +
		"\1\40\35\40\46\12\61\25\1\10\55\2\1\1\55\2\1\10\55\1\1\2\55\1\1\30\55\6\62\1\1\2" +
		"\62\2\1\2\60\1\62\1\60\1\55\1\62\1\55\1\62\1\60\14\1\12\61\106\1\10\55\2\1\47\55" +
		"\3\62\4\60\2\1\2\60\4\62\1\60\1\55\1\1\1\55\1\62\33\1\1\55\12\60\50\55\6\60\1\62" +
		"\1\55\4\60\10\1\1\60\10\1\1\55\6\60\2\62\3\60\56\55\15\60\1\62\2\60\3\1\1\55\22\1" +
		"\111\55\u0107\1\11\55\1\1\45\55\1\62\7\60\1\1\6\60\1\62\1\60\1\55\17\1\12\61\30\1" +
		"\36\55\2\1\26\60\1\1\1\62\7\60\1\62\2\60\1\62\2\60\111\1\7\55\1\1\2\55\1\1\46\55" +
		"\6\60\3\1\1\60\1\1\2\60\1\1\7\60\1\55\1\60\10\1\12\61\6\1\6\55\1\1\2\55\1\1\40\55" +
		"\5\62\1\1\2\60\1\1\2\62\1\60\1\62\1\60\1\55\7\1\12\61\u0136\1\23\55\2\60\2\62\11" +
		"\1\2\60\1\55\1\62\15\55\1\1\42\55\2\62\5\60\3\1\2\62\1\60\1\62\1\60\15\1\12\61\126" +
		"\1\1\55\117\1\u039a\55\146\1\157\63\21\1\304\55\u0a4c\1\141\55\17\1\u0430\55\20\1" +
		"\1\60\6\55\17\60\u0faa\1\u0247\55\u21b9\1\u0239\55\7\1\37\55\1\1\12\61\6\1\117\55" +
		"\1\1\12\61\6\1\36\55\2\1\5\60\13\1\60\55\7\60\11\1\4\57\14\1\12\61\11\1\25\55\5\1" +
		"\23\55\u02b0\1\40\35\40\46\200\1\113\55\4\1\1\60\1\55\67\62\7\1\4\60\15\57\100\1" +
		"\2\57\1\1\1\57\1\60\13\1\2\62\16\1\u17f8\55\10\1\u04d6\55\52\1\11\55\u22e7\1\4\57" +
		"\1\1\7\57\1\1\2\57\1\1\u0123\55\17\1\1\55\35\1\3\55\2\1\1\55\16\1\4\55\10\1\u018c" +
		"\55\u0904\1\153\55\5\1\15\55\3\1\11\55\7\1\12\55\3\1\2\60\u1261\1\56\60\2\1\27\60" +
		"\u021e\1\2\62\3\60\3\1\6\62\10\1\10\60\2\1\7\60\36\1\4\60\224\1\3\60\u01bb\1\32\35" +
		"\32\46\32\35\7\46\1\1\22\46\32\35\32\46\1\35\1\1\2\35\2\1\1\35\2\1\2\35\2\1\4\35" +
		"\1\1\10\35\4\46\1\1\1\46\1\1\7\46\1\1\13\46\32\35\32\46\2\35\1\1\4\35\2\1\10\35\1" +
		"\1\7\35\1\1\32\46\2\35\1\1\4\35\1\1\5\35\1\1\1\35\3\1\7\35\1\1\32\46\32\35\32\46" +
		"\32\35\32\46\32\35\32\46\32\35\32\46\32\35\32\46\32\35\34\46\2\1\31\35\1\1\31\46" +
		"\1\1\6\46\31\35\1\1\31\46\1\1\6\46\31\35\1\1\31\46\1\1\6\46\31\35\1\1\31\46\1\1\6" +
		"\46\31\35\1\1\31\46\1\1\6\46\1\35\1\46\2\1\62\61\u0200\1\67\60\4\1\62\60\10\1\1\60" +
		"\16\1\1\60\26\1\5\60\1\1\17\60\u0450\1\12\46\1\55\24\46\6\1\6\46\325\1\7\60\1\1\21" +
		"\60\2\1\7\60\1\1\2\60\1\1\5\60\5\1\76\57\41\1\1\60\160\1\55\55\3\1\7\60\7\57\2\1" +
		"\12\61\4\1\1\55\u0141\1\36\55\1\60\21\1\54\55\4\60\12\61\u01d6\1\33\55\1\57\4\60" +
		"\12\61\u02e6\1\7\55\1\1\4\55\1\1\2\55\1\1\17\55\1\1\305\55\13\1\7\60\51\1\42\35\42" +
		"\46\7\60\1\57\4\1\12\61\u04a6\1\4\55\1\1\33\55\1\1\2\55\1\1\1\55\2\1\1\55\1\1\12" +
		"\55\1\1\4\55\1\1\1\55\1\1\1\55\6\1\1\55\4\1\1\55\1\1\1\55\1\1\1\55\1\1\3\55\1\1\2" +
		"\55\1\1\1\55\2\1\1\55\1\1\1\55\1\1\1\55\1\1\1\55\1\1\1\55\1\1\2\55\1\1\1\55\2\1\4" +
		"\55\1\1\7\55\1\1\4\55\1\1\4\55\1\1\1\55\1\1\12\55\1\1\21\55\5\1\3\55\1\1\5\55\1\1" +
		"\21\55\u0d34\1\12\61\u0406\1\ua6e0\55\40\1\u103a\55\6\1\336\55\2\1\u1682\55\16\1" +
		"\u1d31\55\u0c1f\1\u021e\55\u05e2\1\u134b\55\5\1\u1060\55\uffff\1\uffff\1\uffff\1" +
		"\uffff\1\uffff\1\uffff\1\uffff\1\uffff\1\uffff\1\uffff\1\udd5a\1\360\60\1\1");

	private static char[] unpack_vc_char(int size, String... st) {
		char[] res = new char[size];
		int t = 0;
		int count = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; ) {
				count = i > 0 || count == 0 ? s.charAt(i++) : count;
				if (i < slen) {
					char val = s.charAt(i++);
					while (count-- > 0) res[t++] = val;
				}
			}
		}
		assert res.length == t;
		return res;
	}

	private static final short tmStateMap[] = {
		0, 111
	};

	private static final short tmBacktracking[] = {
		89, 33, 89, 38, 94, 53, 90, 60, 6, 90, 95, 45
	};

	private static final int tmFirstRule = -7;

	private static final int[] tmRuleSymbol = unpack_int(97,
		"\uffff\uffff\0\0\1\0\2\0\3\0\4\0\5\0\6\0\7\0\10\0\11\0\12\0\13\0\14\0\15\0\16\0\17" +
		"\0\20\0\21\0\22\0\23\0\24\0\25\0\26\0\27\0\30\0\31\0\32\0\33\0\34\0\35\0\36\0\37" +
		"\0\40\0\41\0\42\0\43\0\44\0\45\0\46\0\47\0\50\0\51\0\52\0\53\0\54\0\55\0\56\0\57" +
		"\0\60\0\61\0\62\0\63\0\64\0\65\0\66\0\67\0\70\0\71\0\72\0\73\0\74\0\75\0\76\0\77" +
		"\0\100\0\101\0\102\0\103\0\104\0\105\0\106\0\107\0\110\0\111\0\112\0\113\0\114\0" +
		"\115\0\116\0\117\0\120\0\121\0\122\0\123\0\124\0\125\0\126\0\127\0\130\0\130\0\130" +
		"\0\131\0\131\0\132\0\133\0\134\0");

	private static final int tmClassesCount = 56;

	private static final short[] tmGoto = unpack_vc_short(6384,
		"\1\ufff8\1\ufff9\1\156\1\155\1\154\1\151\1\137\1\131\1\127\1\124\1\112\1\111\1\110" +
		"\1\106\1\103\1\102\1\77\1\72\1\50\1\45\1\40\1\37\1\36\1\32\1\27\1\21\1\20\4\131\1" +
		"\17\1\12\1\11\1\7\6\131\1\6\1\3\1\2\1\1\3\131\3\ufff9\1\131\2\ufff9\1\155\1\ufff9" +
		"\70\uffb3\70\uffd0\30\uffb6\1\5\21\uffb6\1\4\15\uffb6\70\uffb1\70\uffa5\70\uffd1" +
		"\30\uffb5\1\10\37\uffb5\70\uffa4\70\uffcc\47\ufff9\1\13\43\ufff9\2\14\6\ufff9\2\14" +
		"\7\ufff9\2\14\45\ufff9\2\15\6\ufff9\2\15\7\ufff9\2\15\45\ufff9\2\16\6\ufff9\2\16" +
		"\7\ufff9\2\16\45\ufff9\2\131\6\ufff9\2\131\7\ufff9\2\131\22\ufff9\70\uffcd\70\uffb0" +
		"\30\uffc7\1\26\1\22\36\uffc7\30\uffb9\1\25\1\23\36\uffb9\30\uffb8\1\24\37\uffb8\70" +
		"\uffa7\70\uffa8\70\uffc5\30\uffae\1\30\37\uffae\30\uffc4\1\31\37\uffc4\70\uffc2\27" +
		"\uffc8\1\34\1\33\37\uffc8\70\uffc6\30\uffba\1\35\37\uffba\70\uffa9\70\uffca\70\uffaf" +
		"\21\uffa0\1\44\1\uffa0\2\40\7\uffa0\1\uffff\10\uffa0\1\uffff\22\uffa0\16\ufff9\1" +
		"\43\1\ufff9\1\43\2\ufff9\2\42\43\ufff9\23\uffa0\2\42\43\uffa0\23\ufff9\2\42\43\ufff9" +
		"\23\uffa0\2\44\7\uffa0\1\uffff\10\uffa0\1\uffff\43\uffa0\1\44\12\uffa0\1\uffff\1" +
		"\uffa0\1\ufffe\6\uffa0\1\uffff\2\uffa0\1\ufffe\17\uffa0\23\ufff9\2\47\6\ufff9\2\47" +
		"\7\ufff9\2\47\22\ufff9\23\uff9e\2\47\6\uff9e\2\47\7\uff9e\2\47\22\uff9e\1\ufff9\2" +
		"\60\2\ufff9\10\60\1\55\4\60\1\54\14\60\1\52\1\51\25\60\1\ufff9\1\60\1\ufff9\2\60" +
		"\2\ufff9\61\60\1\ufff9\1\60\1\ufff9\2\52\2\ufff9\33\52\1\53\1\60\24\52\1\ufff9\1" +
		"\52\1\ufff9\2\52\2\ufff9\61\52\1\ufff9\1\52\1\ufff4\2\54\2\ufff4\61\54\1\ufff4\1" +
		"\54\1\ufff9\14\55\1\56\52\55\1\ufff9\14\55\1\56\4\55\1\57\45\55\70\ufff5\1\ufff9" +
		"\2\60\2\ufff9\15\60\1\64\14\60\1\62\1\61\25\60\1\ufff9\1\60\1\ufff9\2\60\2\ufff9" +
		"\61\60\1\ufff9\1\60\1\ufff9\2\62\2\ufff9\33\62\1\63\1\60\24\62\1\ufff9\1\62\1\ufff9" +
		"\2\62\2\ufff9\61\62\1\ufff9\1\62\7\uff9b\1\64\13\uff9b\2\64\6\uff9b\4\64\1\uff9b" +
		"\1\ufffd\2\uff9b\6\64\4\uff9b\11\64\1\uff9b\1\64\47\ufff9\1\66\43\ufff9\2\67\6\ufff9" +
		"\2\67\7\ufff9\2\67\45\ufff9\2\70\6\ufff9\2\70\7\ufff9\2\70\45\ufff9\2\71\6\ufff9" +
		"\2\71\7\ufff9\2\71\45\ufff9\2\64\6\ufff9\2\64\7\ufff9\2\64\22\ufff9\23\uffcb\2\73" +
		"\43\uffcb\23\uff9f\2\73\7\uff9f\1\ufffc\10\uff9f\1\ufffc\22\uff9f\16\ufff9\1\76\1" +
		"\ufff9\1\76\2\ufff9\2\75\43\ufff9\23\uff9f\2\75\43\uff9f\23\ufff9\2\75\43\ufff9\20" +
		"\uffbf\1\101\7\uffbf\1\100\37\uffbf\70\uffac\70\uffbb\70\uffc9\16\uffc0\1\105\11" +
		"\uffc0\1\104\37\uffc0\70\uffad\70\uffbc\30\uffbe\1\107\37\uffbe\70\uffab\70\uffce" +
		"\70\uffcf\1\ufff9\2\112\2\ufff9\5\112\1\123\25\112\1\113\25\112\1\ufff9\1\112\1\ufff9" +
		"\3\112\1\122\17\112\1\ufff9\22\112\1\116\1\114\17\112\23\ufff9\2\115\6\ufff9\2\115" +
		"\7\ufff9\2\115\45\ufff9\2\112\6\ufff9\2\112\7\ufff9\2\112\45\ufff9\2\117\6\ufff9" +
		"\2\117\7\ufff9\2\117\45\ufff9\2\120\6\ufff9\2\120\7\ufff9\2\120\45\ufff9\2\121\6" +
		"\ufff9\2\121\7\ufff9\2\121\45\ufff9\2\112\6\ufff9\2\112\7\ufff9\2\112\23\ufff9\3" +
		"\112\1\ufff9\5\112\1\123\25\112\1\113\25\112\1\ufff9\1\112\70\uff9c\11\uffb7\1\126" +
		"\16\uffb7\1\125\37\uffb7\70\uffa6\70\uffb2\30\uffbd\1\130\37\uffbd\70\uffaa\7\ufff3" +
		"\1\131\13\ufff3\2\131\6\ufff3\4\131\1\ufff3\1\ufffb\2\ufff3\6\131\4\ufff3\11\131" +
		"\1\ufff3\1\131\47\ufff9\1\133\43\ufff9\2\134\6\ufff9\2\134\7\ufff9\2\134\45\ufff9" +
		"\2\135\6\ufff9\2\135\7\ufff9\2\135\45\ufff9\2\136\6\ufff9\2\136\7\ufff9\2\136\45" +
		"\ufff9\2\131\6\ufff9\2\131\7\ufff9\2\131\23\ufff9\2\137\2\ufff9\1\137\1\150\31\137" +
		"\1\140\25\137\1\ufff9\1\137\1\ufff9\3\137\1\147\17\137\1\ufff9\22\137\1\143\1\141" +
		"\17\137\23\ufff9\2\142\6\ufff9\2\142\7\ufff9\2\142\45\ufff9\2\137\6\ufff9\2\137\7" +
		"\ufff9\2\137\45\ufff9\2\144\6\ufff9\2\144\7\ufff9\2\144\45\ufff9\2\145\6\ufff9\2" +
		"\145\7\ufff9\2\145\45\ufff9\2\146\6\ufff9\2\146\7\ufff9\2\146\45\ufff9\2\137\6\ufff9" +
		"\2\137\7\ufff9\2\137\23\ufff9\3\137\1\ufff9\1\137\1\150\31\137\1\140\25\137\1\ufff9" +
		"\1\137\70\uff9d\30\uffb4\1\152\37\uffb4\30\uffc3\1\153\37\uffc3\70\uffc1\3\ufff6" +
		"\1\155\154\ufff6\70\ufff7\2\ufff9\1\156\1\155\1\154\1\151\1\137\1\131\1\127\1\124" +
		"\1\112\1\111\1\110\1\106\1\103\1\102\1\77\1\72\1\160\1\45\1\40\1\37\1\36\1\32\1\27" +
		"\1\21\1\20\4\131\1\17\1\12\1\11\1\7\6\131\1\6\1\3\1\2\1\1\3\131\3\ufff9\1\131\2\ufff9" +
		"\1\155\1\ufff9\15\uff9a\1\ufffa\4\uff9a\1\54\5\uff9a\1\161\37\uff9a\70\uff99");

	private static short[] unpack_vc_short(int size, String... st) {
		short[] res = new short[size];
		int t = 0;
		int count = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; ) {
				count = i > 0 || count == 0 ? s.charAt(i++) : count;
				if (i < slen) {
					short val = (short) s.charAt(i++);
					while (count-- > 0) res[t++] = val;
				}
			}
		}
		assert res.length == t;
		return res;
	}

	private static int mapCharacter(int chr) {
		if (chr >= 0 && chr < 918001) return tmCharClass[chr];
		return chr == -1 ? 0 : 1;
	}

	public Span next() throws IOException {
		Span token = new Span();
		int state;

		tokenloop:
		do {
			token.offset = currOffset;
			tokenLine = token.line = currLine;
			tokenOffset = charOffset;

			// TODO use backupRule
			int backupRule = -1;
			for (state = tmStateMap[this.state]; state >= 0; ) {
				state = tmGoto[state * tmClassesCount + mapCharacter(chr)];
				if (state > tmFirstRule && state < 0) {
					token.endoffset = currOffset;
					state = (-1 - state) * 2;
					backupRule = tmBacktracking[state++];
					state = tmBacktracking[state];
				}
				if (state == tmFirstRule && chr == -1) {
					token.endoffset = currOffset;
					token.symbol = 0;
					token.value = null;
					reporter.error("Unexpected end of input reached", token.line, token.offset, token.endoffset);
					token.offset = currOffset;
					break tokenloop;
				}
				if (state >= tmFirstRule && chr != -1) {
					currOffset += l - charOffset;
					if (chr == '\n') {
						currLine++;
					}
					charOffset = l;
					chr = l < input.length() ? input.charAt(l++) : -1;
					if (chr >= Character.MIN_HIGH_SURROGATE && chr <= Character.MAX_HIGH_SURROGATE && l < input.length() &&
							Character.isLowSurrogate(input.charAt(l))) {
						chr = Character.toCodePoint((char) chr, input.charAt(l++));
					}
				}
			}
			token.endoffset = currOffset;

			token.symbol = tmRuleSymbol[tmFirstRule - state];
			token.value = null;

			if (token.symbol == -1) {
				reporter.error(MessageFormat.format("invalid token at line {0}: `{1}`, skipped", currLine, tokenText()), token.line, token.offset, token.endoffset);
			}

		} while (token.symbol == -1 || !createToken(token, tmFirstRule - state));
		return token;
	}

	protected int charAt(int i) {
		if (i == 0) return chr;
		i += l - 1;
		int res = i < input.length() ? input.charAt(i++) : -1;
		if (res >= Character.MIN_HIGH_SURROGATE && res <= Character.MAX_HIGH_SURROGATE && i < input.length() &&
				Character.isLowSurrogate(input.charAt(i))) {
			res = Character.toCodePoint((char) res, input.charAt(i++));
		}
		return res;
	}

	protected boolean createToken(Span token, int ruleIndex) throws IOException {
		boolean spaceToken = false;
		switch (ruleIndex) {
			case 2: // space: /[\t\v\f \xa0\ufeff\p{Zs}]/
				spaceToken = true;
				break;
			case 3: // LineTerminatorSequence: /[\n\r\u2028\u2029]|\r\n/
				spaceToken = true;
				break;
			case 4: // MultiLineComment: /\/\*{commentChars}?\*\//
				spaceToken = true;
				break;
			case 5: // SingleLineComment: /\/\/[^\n\r\u2028\u2029]*/
				spaceToken = true;
				break;
			case 6:
				return createIdentifierToken(token, ruleIndex);
		}
		return !(spaceToken);
	}

	private static Map<String,Integer> subTokensOfIdentifier = new HashMap<>();
	static {
		subTokensOfIdentifier.put("break", 7);
		subTokensOfIdentifier.put("case", 8);
		subTokensOfIdentifier.put("catch", 9);
		subTokensOfIdentifier.put("continue", 10);
		subTokensOfIdentifier.put("debugger", 11);
		subTokensOfIdentifier.put("default", 12);
		subTokensOfIdentifier.put("delete", 13);
		subTokensOfIdentifier.put("do", 14);
		subTokensOfIdentifier.put("else", 15);
		subTokensOfIdentifier.put("finally", 16);
		subTokensOfIdentifier.put("for", 17);
		subTokensOfIdentifier.put("function", 18);
		subTokensOfIdentifier.put("if", 19);
		subTokensOfIdentifier.put("in", 20);
		subTokensOfIdentifier.put("instanceof", 21);
		subTokensOfIdentifier.put("new", 22);
		subTokensOfIdentifier.put("return", 23);
		subTokensOfIdentifier.put("switch", 24);
		subTokensOfIdentifier.put("this", 25);
		subTokensOfIdentifier.put("throw", 26);
		subTokensOfIdentifier.put("try", 27);
		subTokensOfIdentifier.put("typeof", 28);
		subTokensOfIdentifier.put("var", 29);
		subTokensOfIdentifier.put("void", 30);
		subTokensOfIdentifier.put("while", 31);
		subTokensOfIdentifier.put("with", 32);
		subTokensOfIdentifier.put("class", 33);
		subTokensOfIdentifier.put("const", 34);
		subTokensOfIdentifier.put("enum", 35);
		subTokensOfIdentifier.put("export", 36);
		subTokensOfIdentifier.put("extends", 37);
		subTokensOfIdentifier.put("import", 38);
		subTokensOfIdentifier.put("super", 39);
		subTokensOfIdentifier.put("null", 86);
		subTokensOfIdentifier.put("true", 87);
		subTokensOfIdentifier.put("false", 88);
	}

	protected boolean createIdentifierToken(Span token, int ruleIndex) {
		Integer replacement = subTokensOfIdentifier.get(tokenText());
		if (replacement != null) {
			ruleIndex = replacement;
			token.symbol = tmRuleSymbol[ruleIndex];
		}
		return true;
	}

	/* package */ static int[] unpack_int(int size, String... st) {
		int[] res = new int[size];
		boolean second = false;
		char first = 0;
		int t = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; i++) {
				if (second) {
					res[t++] = (s.charAt(i) << 16) + first;
				} else {
					first = s.charAt(i);
				}
				second = !second;
			}
		}
		assert !second;
		assert res.length == t;
		return res;
	}

}
