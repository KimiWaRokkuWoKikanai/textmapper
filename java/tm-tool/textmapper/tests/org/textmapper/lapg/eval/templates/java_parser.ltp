${template parserCtor-}
	protected org.textmapper.lapg.eval.GenericParseContext.@TextSource source;
	protected final org.textmapper.lapg.api.@Grammar grammar;

	private final int[] tmAction;
	private final int[] tmLalr;
	private final int[] tmGoto;
	private final int[] tmFromTo;
	private final int[] tmRuleLen;
	private final int[] tmRuleSymbol;

	private final boolean debugSyntax;

	public ${opts.prefix}Parser(${call java.package}.${opts.prefix}Lexer.@ErrorReporter reporter, org.textmapper.lapg.api.@ParserData tables, org.textmapper.lapg.api.@Grammar grammar, boolean debugSyntax) {
		this.reporter = reporter;
		this.grammar = grammar;
		this.tmAction = tables.getAction();
		this.tmLalr = tables.getLalr();
		this.tmGoto = tables.getSymGoto();
		this.tmFromTo = tables.getSymFromTo();
		this.tmRuleLen = tables.getRuleLength();
		this.tmRuleSymbol = tables.getLeft();
		this.debugSyntax = debugSyntax;
	}
${end}

${template parserTables-}
${end}

${template debugShift-}
		if (debugSyntax) {
			System.out.println(java.text.@MessageFormat.format("shift: {0} ({1})", grammar.getSymbols()[tmNext.symbol].getNameText(), tmLexer.tokenText()));
		}
${end}

${template debugReduce-}
		if (debugSyntax) {
			System.out.println("reduce to " + grammar.getSymbols()[tmRuleSymbol[rule]].getNameText());
		}
${end}

${template dynamicRecoveringCheck-}
				if (grammar.getError() == null) {
					break;
				}
${end}

${template applyRule-}
	protected void applyRule(${self->java.symbolClassName()} tmLeft, int rule, int ruleLength) {
		if (ruleLength == 1) {
			Object right = tmStack[tmHead].value;
			if (right instanceof org.textmapper.lapg.eval.@GenericNode) {
				tmLeft.value = right;
			} else {
				tmLeft.value = new org.textmapper.lapg.eval.@GenericNode(source, tmLeft.offset, tmLeft.endoffset);
			}
		} else if (ruleLength > 1) {
			java.util.@List<org.textmapper.lapg.eval.@GenericNode> children = new java.util.@ArrayList<>(ruleLength);
			for (int i = ruleLength - 1; i >= 0; i--) {
				if (tmStack[tmHead - i].value instanceof org.textmapper.lapg.eval.@GenericNode) {
					children.add((org.textmapper.lapg.eval.@GenericNode) tmStack[tmHead - i].value);
				}
			}
			tmLeft.value = new org.textmapper.lapg.eval.@GenericNode(source, tmLeft.offset, tmLeft.endoffset, children.toArray(new org.textmapper.lapg.eval.@GenericNode[children.size()]));
		}
	}
${end}

${template customParseRoutines-}
${end}

${template namedSets-}
${end}

${cached query lazyNext() = true}

${cached query hasRecovering() = true}
${cached query errorToken() = 'grammar.getError().getIndex()'}

${query mainParseVisibility() = 'public'}

${cached query needActionsTable = true}
${cached query hasNoEoiInputs = true}
${cached query hasEoiInputs = true}
${query methAccess() = 'protected final'}
