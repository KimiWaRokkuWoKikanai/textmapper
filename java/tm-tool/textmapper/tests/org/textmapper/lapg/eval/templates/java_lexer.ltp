
${template lexerCtor}
	private final org.textmapper.lapg.api.@Grammar grammar;
	private final int[] tmCharClass;
	private final int[] tmRuleSymbol;
	private final int[] tmGoto;
	private final int[] tmStateMap;
	private final int[] tmBacktracking;
	private final int tmFirstRule;
	private final int tmClassesCount;

	public ${opts.prefix}Lexer(CharSequence input, ErrorReporter reporter, org.textmapper.lapg.api.@LexerData lexerData, org.textmapper.lapg.api.@Grammar grammar) throws java.io.@IOException {
		this.reporter = reporter;
		this.grammar = grammar;
		tmRuleSymbol = getRuleSymbols(grammar);
		tmCharClass = lexerData.getChar2no();
		tmGoto = lexerData.getChange();
		tmClassesCount = lexerData.getNchars();
		tmStateMap = lexerData.getGroupset();
		tmBacktracking = lexerData.getBacktracking();
		tmFirstRule = -1 - tmBacktracking.length/2;
		reset(input);
	}
${end}

${template mapCharacter}
	private int mapCharacter(int chr) {
		if (chr >= 0 && chr < tmCharClass.length) return tmCharClass[chr];
		return chr == -1 ? 0 : 1;
	}
${end}

${template createToken}
	protected boolean createToken(${self->java.symbolClassName()} token, int ruleIndex) throws java.io.@IOException {
		int lexemeKind = ruleIndex > 1 ? grammar.getLexerRules()[ruleIndex-2].getKind() : org.textmapper.lapg.api.@LexerRule.KIND_NONE;
		return lexemeKind != org.textmapper.lapg.api.@LexerRule.KIND_SPACE;
	}
${end}

${template statesInterface-}
${end}

${template tokensInterface}
	public interface Tokens {
		int Unavailable_ = -1;
		int eoi = 0;
	}
${end}

${template unpackRoutines}
	private static int[] getRuleSymbols(org.textmapper.lapg.api.@Grammar grammar) {
		org.textmapper.lapg.api.@LexerRule[] lexerRules = grammar.getLexerRules();
		int[] result = new int[lexerRules.length + 2];
		result[0] = grammar.getInvalidToken() != null ? grammar.getInvalidToken().getIndex() : -1;
		result[1] = grammar.getEoi().getIndex();
		for (int i = 0; i < lexerRules.length; i++) {
			result[i + 2] = lexerRules[i].getSymbol().getIndex();
		}
		return result;
	}
${end}

${template lexerTables-}
${end}

${cached query hasLexerActions() = false}

${query tmStateMapExists() = true}

${query tmWithBacktracking() = true}
