language syntax_lapg(java);

lang        = "java"

# Vocabulary

[0]

identifier {String}:     /[a-zA-Z_][a-zA-Z_0-9]*|'[^'\n]+'/  { @ = new String(token,0,lapg_size); break; }
regexp {String}:	/\/([^\/\\]|\\.)*\//	{ @ = new String(token,1,lapg_size-2); break; }
scon {String}:	/"[^"\n\\]*"/			{ @ = new String(token,1,lapg_size-2); break; }
type {String}:	/\([^\)\n]+\)/			{ @ = new String(token,1,lapg_size-2); break; }
icon {Integer}:	/-?[0-9]+/				{ @ = Integer.parseInt(new String(token,0,lapg_size)); break; }
eoi:           /\n%%.*/
'%':           /\n%/
_skip:         /\n|[\t\r ]+/    		{ continue; }
_skip:  /#.*/
'::=':  /::=/
'|':    /\|/
';':    /;/
'.':    /\./
':':    /:/
'[':    /\[/
']':    /\]/
'<<':   /<</

'{':	/\{/		{ deep = 1; group = @1; break; }

[1]

_skip:	/'([^\n\\']|\\(['"?\\abfnrtv]|x[0-9a-fA-F]+|[0-7]([0-7][0-7]?)?))*'/
_skip:	/"([^\n\\"]|\\(['"?\\abfnrtv]|x[0-9a-fA-F]+|[0-7]([0-7][0-7]?)?))*"/
_skip:	/[^'"{}]+/
'i{':	/\{/				{ deep++; break; }
'}':	/\}/				{ if( --deep == 0 ) group = @0; break; }

# Attributes

#[]

# Grammar

input :
	directivesopt
	lexical_definitions
	grammar_definitions ;

directives :
	directives directive | directive ;

directive :
	'.' identifier scon 								{ options.put($identifier, $scon); }
	| '.' identifier icon								{ options.put($identifier, $icon.toString()); }
;

lexical_definitions :
	lexical_definitions lexical_definition 
	| lexical_definition 
;

lexical_definition :
	'[' iconlist_in_bits ']'							{ currentgroups = $iconlist_in_bits; }
	| symbol typeopt ':'								{ addLexeme($symbol, $typeopt, null, null, null, @0.line); }
	| symbol typeopt ':' regexp iconopt commandopt		{ addLexeme($symbol, $typeopt, $regexp, $iconopt, $commandopt, @0.line); }
;

iconlist_in_bits(Integer) :
	icon 												{ if( $icon < 0 || $icon >= BITS ) $$ = 0; else $$ = 1 << $icon; } 
	| iconlist_in_bits icon  							{ $$ = $iconlist_in_bits | $icon; }
;

grammar_definitions :
	grammar_definitions grammar_definition
	| grammar_definition 
;

grammar_definition :
	rules_definition ';'
	| '%' identifier symbol_list ';'					{ addPrio($identifier, $symbol_list, @1.line); }
; 

rules_definition (CSymbol) :
	symbol typeopt '::=' rule_def						{ addNonterm($symbol, $typeopt, @0.line); addRule($rule_def,$symbol); }
	| rules_definition '|' rule_def						{ addRule($rule_def,$rules_definition); }
;

symbol_list (List<CSymbol>) :
	symbol_list symbol									{ $symbol_list.add($symbol); }
	| symbol 											{ $$ = new ArrayList<CSymbol>(); $symbol_list.add($symbol); }
;

rule_def (CRule) :
	rule_symbols commandopt rule_priorityopt			{ $$ = new CRule($rule_symbols, $commandopt, $rule_priorityopt, @0.line); }
	| commandopt rule_priorityopt 						{ $$ = new CRule(null, $commandopt, $rule_priorityopt, @0.line); }
;

rule_symbols (List<CSymbol>) :
	rule_symbols commandopt symbol						{ addRuleSymbol($rule_symbols,$commandopt,$symbol); } 
	| commandopt symbol									{ $$ = new ArrayList<CSymbol>(); addRuleSymbol($rule_symbols,$commandopt,$symbol); }
;

rule_priority (CSymbol) :
	'<<' symbol											{ $$ = $symbol; } 
;

command (CAction) :
	'{' command_tokensopt '}'							{ $$ = new CAction(@0.line, rawData(@0.offset+1,@2.offset)); }  
;
	
command_tokens :
	command_tokens command_token | command_token ;

command_token :
	'i{' command_tokensopt '}' 
;

symbol (CSymbol) :
	identifier											{ $$ = getSymbol($identifier, @0.line); }
;

##################################################################################

%%
import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
%%

private Parser(byte[] data, Map<String,String> defaultOptions) {
	this.buff = data;
	this.l = 0;
	
	addLexeme(getSymbol(CSyntax.EOI, 1), null, null, null, null, 1);
	options.putAll(defaultOptions);
}

private static final boolean DEBUG_SYNTAX = false;
private static final int BITS = 32;

private Map<String,CSymbol> symCash = new HashMap<String,CSymbol>();
private List<String> errors = new ArrayList<String>();

private List<CSymbol> symbols = new ArrayList<CSymbol>();
private List<CRule> rules = new ArrayList<CRule>();
private List<CPrio> prios = new ArrayList<CPrio>();
private Map<String,String> options = new HashMap<String, String>();
private List<CLexeme> lexemes = new ArrayList<CLexeme>();

private byte[] buff;
private int l;

private int currentgroups = 1;
private int deep = 0;

private String rawData(int start, int end) {
	return new String(buff, start, end-start);
}

private CSymbol getSymbol(String name, int line) {
	CSymbol res = symCash.get(name);
	if( res == null ) {
		res = new CSymbol(name, line);
		symbols.add(res);
		symCash.put(name,res);

		if( name.endsWith(CSyntax.OPTSUFFIX) && name.length() > CSyntax.OPTSUFFIX.length() ) {
			try {
				CSymbol original = getSymbol(name.substring(0, name.length()-CSyntax.OPTSUFFIX.length()), line);
				res.setNonTerminal(null, 0);
				addRule(new CRule(Collections.singletonList(original), null, null, line), res);
				addRule(new CRule(null, null, null, line), res);
			} catch(ParseException ex) {
				/* should never happen */
			}
		}
	}
	return res;
}

private void addLexeme(CSymbol sym, String type, String regexp, Integer lexprio, CAction command, int line) {
	try {
		sym.setTerminal(type, regexp != null, line);
		if( regexp != null ) {
			lexemes.add(new CLexeme(sym,regexp,command,lexprio!=null?lexprio.intValue():0,currentgroups,line));
		}
	} catch( ParseException ex ) {
		error(ex.getMessage());
	}
}

private void addNonterm(CSymbol sym, String type, int line ) {
	try {
		sym.setNonTerminal(type, line);
	} catch( ParseException ex ) {
		error(ex.getMessage());
	}
}

private void addRule( CRule rule, CSymbol left ) {
	rule.setLeft(left);
	rules.add(rule);
}

private void addPrio( String prio, List<CSymbol> list, int line ) {
	if( prio.equals("left") ) {
		prios.add(new CPrio(CPrio.LEFT, list,line));
	} else if( prio.equals("right") ) {
		prios.add(new CPrio(CPrio.RIGHT, list,line));
	} else if( prio.equals("nonassoc") ) {
		prios.add(new CPrio(CPrio.NONASSOC, list,line));
	} else {
		error("unknown priority identifier used: `"+prio+"` at " + line);
	}
}

private void addRuleSymbol(List<CSymbol> list, CAction cmdopt, CSymbol symbol) {
	if( cmdopt != null ) {
		try {
			CSymbol sym = new CSymbol(null, 0);
			sym.setNonTerminal(null, cmdopt.getLine());
			symbols.add(sym);
			addRule(new CRule(null, cmdopt, null, cmdopt.getLine()), sym);
			list.add(sym);
		} catch( ParseException ex ) {
			error(ex.getMessage());
		}
	}
	list.add(symbol);
}

private void error( String s ) {
	errors.add(s);
}

public static CSyntax process(String data, Map<String,String> defaultOptions) {
	try {
		Parser p = new Parser(data.getBytes("utf-8"), defaultOptions);
		if( !p.parse() || !p.errors.isEmpty() ) {
			return new CSyntax(p.errors);
		}
		p.getSymbol(CSyntax.INPUT, 1);
	
		return new CSyntax(p.symbols,p.rules,p.prios,p.options,p.lexemes);
	} catch( UnsupportedEncodingException ex ) {
		return null;
	}
}

static class ParseException extends Exception {
	private static final long serialVersionUID = 2811939050284758826L;

	public ParseException(String arg0) {
		super(arg0);
	}
}
