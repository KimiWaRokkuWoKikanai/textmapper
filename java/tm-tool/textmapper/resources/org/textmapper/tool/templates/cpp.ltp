${template main-}
${file opts.prefix+'_lexer.h'-}
${call cpp_lexer.header-}
${end-}
${file opts.prefix+'_lexer.' + opts.file_extension-}
${call cpp_lexer.impl-}
${end-}
${end}

${query escapeCppReserved() =
	[
		'vector', 'stack', 'string',

		'alignas', 'alignof', 'and', 'and_eq', 'asm', 'auto', 'bitand', 'bitor',
		'bool', 'break', 'case', 'catch', 'char', 'char16_t', 'char32_t', 'class',
		'compl', 'concept', 'const', 'constexpr', 'const_cast', 'continue',
		'decltype', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else',
		'enum', 'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend',
		'goto', 'if', 'inline', 'int', 'long', 'mutable', 'namespace', 'new',
		'noexcept', 'not', 'not_eq', 'nullptr', 'operator', 'or', 'or_eq',
		'private', 'protected', 'public', 'register', 'reinterpret_cast',
		'requires', 'return', 'short', 'signed', 'sizeof', 'static',
		'static_assert', 'static_cast', 'struct', 'switch', 'template', 'this',
		'thread_local', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename',
		'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t',
		'while', 'xor', 'xor_eq',

		'override', 'final'
	].contains(self) ? '_' + self : self }


${query ifndef_prefix = util.toUpperWithUnderscores(opts.prefix)}

${query ifndef_macro(suffix) =
		self->ifndef_prefix() + '_' + util.toUpperWithUnderscores(suffix) + '_H_'}

${template header_start(suffix)-}
#ifndef ${call ifndef_macro(suffix)}
#define ${call ifndef_macro(suffix)}
${if opts.namespace != ''-}

${call namespace_start-}
${end-}
${end}

${template header_end(suffix)-}
${if opts.namespace != ''-}
${call namespace_end-}

${end-}
#endif  // ${call ifndef_macro(suffix)}
${end}

${template namespace_start-}
${foreach part in opts.namespace.split('::')-}
namespace ${part} {
${end-}
${end}

${template namespace_end-}
${foreach part in util.reverse(opts.namespace.split('::'))-}
}  // namespace ${part}
${end-}
${end}

${template file_header-}
${if opts.genCopyright && syntax.copyrightHeader-}
/**
${foreach line in util.shiftRightWithSpaces(syntax.copyrightHeader, 1).split('\n')-}
 *${line}
${end-}
 */
${end-}
${end}
