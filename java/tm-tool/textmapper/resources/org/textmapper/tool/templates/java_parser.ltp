${template unit-}
${call java.header-}
package ${call java.package};

${call java.imports-}
import ${call java.package}.${opts.prefix}Lexer.${self->java.symbolClassName()};

public class ${opts.prefix}Parser {

${call parseException-}

	private final ${call java.package}.${opts.prefix}Lexer.@ErrorReporter reporter;

${call parserCtor-}

${util.shiftRight(self->java.classcode(), 1)-}
${call parserTables-}
${call namedSets-}
	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	${self->methAccess()} int tmAction(int state, int symbol) {
${if self->needActionsTable()-}
		int p;
		if (tmAction[state] < -2) {
${if self->lazyNext()-}
			if (symbol == ${call java.package}.${opts.prefix}Lexer.@Tokens.Unavailable_) {
				return -3 - state;
			}
${end-}
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
${end-}
		return tmAction[state];
	}

	${self->methAccess()} int gotoState(int state, int symbol) {
		int min = tmGoto[symbol], max = tmGoto[symbol + 1];
		int i, e;

		while (min < max) {
			e = (min + max) >> 2 << 1;
			i = tmFromTo[e];
			if (i == state) {
				return tmFromTo[e+1];
			} else if (i < state) {
				min = e + 2;
			} else {
				max = e;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected ${self->java.symbolClassName()}[] tmStack;
	protected ${self->java.symbolClassName()} tmNext;
	protected ${opts.prefix}Lexer tmLexer;

	${self->mainParseVisibility()} ${self->mainParseReturnType()} parse(${opts.prefix}Lexer lexer${if self->util.needInitialState()
		}, int initialState${end}${if self->util.needFinalState()}, int finalState${end
		}${if self->hasNoEoiInputs() && self->hasEoiInputs()}, boolean noEoi${end}) throws java.io.@IOException, ParseException {

		tmLexer = lexer;
		tmStack = new ${self->java.symbolClassName()}[${opts.stack}];
		tmHead = 0;
${if self->hasRecovering()}		int tmShiftsAfterError = 4;
${end-}

		tmStack[0] = new ${self->java.symbolClassName()}();
		tmStack[0].state = ${self->util.needInitialState() ? 'initialState' : 0};
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != ${self->util.needFinalState() ? 'finalState' : parser.statesCount-1}) {
			int action = tmAction(tmStack[tmHead].state, ${if self->lazyNext()}tmNext == null ? ${call java.package}.${opts.prefix}Lexer.@Tokens.Unavailable_ : ${end}tmNext.symbol);
${if self->lazyNext()-}
			if (action <= -3 && tmNext == null) {
				tmNext = tmLexer.next();
				action = tmAction(tmStack[tmHead].state, tmNext.symbol);
			}
${end-}

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift(${if self->hasNoEoiInputs() && self->hasEoiInputs()}noEoi${end});
${if self->hasRecovering()}				tmShiftsAfterError++;
${end-}
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
${if self->hasRecovering()-}
${call dynamicRecoveringCheck-}
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(java.text.@MessageFormat.format("syntax error before line {0}${if opts.positions.contains('column')}, column {1}",
								tmLexer.getTokenLine(), tmNext.column)${else}", tmLexer.getTokenLine())${end}${self->java.err_location('tmNext', 'tmLexer').trim()});
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new ${self->java.symbolClassName()}();
					tmStack[0].state = ${self->util.needInitialState() ? 'initialState' : 0};
				}
${end-}
				break;
			}
		}

		if (tmStack[tmHead].state != ${self->util.needFinalState() ? 'finalState' : parser.statesCount-1}) {
${if self->hasRecovering()-}
			if (tmShiftsAfterError >= 4) {
	${else-}
${end}			reporter.error(java.text.@MessageFormat.format("syntax error before line {0}${if opts.positions.contains('column')}, column {1}${end}",
								tmLexer.getTokenLine()${if opts.positions.contains('column')}, ${if self->lazyNext()}tmNext == null ? tmLexer.getColumn() : ${end}tmNext.column${end
								})${(self->lazyNext() ? self->java.err_location_safe('tmNext', 'tmLexer') : self->java.err_location('tmNext', 'tmLexer')).trim()});
${if self->hasRecovering()-}
			}
${end-}
			throw new ParseException();
		}
		return ${if !self->util.needInitialState() && syntax.input.first().target->java.type()}(${syntax.input.first().target->java.type()})${end
			}tmStack[${
				self->hasNoEoiInputs() && self->hasEoiInputs()
					? 'noEoi ? tmHead : tmHead - 1' :
				self->hasNoEoiInputs()
				 	? 'tmHead'
				 	: 'tmHead - 1'
			}].value;
	}
${if self->hasRecovering()}
	protected boolean restore() ${if self->lazyNext()}throws java.io.@IOException ${end}{
${if self->lazyNext()-}
		if (tmNext == null) {
			tmNext = tmLexer.next();
		}
${end-}
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && gotoState(tmStack[tmHead].state, ${self->errorToken()}) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new ${self->java.symbolClassName()}();
			tmStack[tmHead].symbol = ${self->errorToken()};
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, ${self->errorToken()});
${foreach l in self->util.locationList()-}
			tmStack[tmHead].${l} = tmNext.${l};
${end-}
			return true;
		}
		return false;
	}
${end-}

	protected void shift(${if self->hasNoEoiInputs() && self->hasEoiInputs()}boolean lazy${end}) throws java.io.@IOException {
${if self->lazyNext()-}
		if (tmNext == null) {
			tmNext = tmLexer.next();
		}
${end-}
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, tmNext.symbol);
${call debugShift-}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = ${
				self->hasNoEoiInputs() && self->hasEoiInputs()
					? 'lazy ? null : tmLexer.next()' :
				self->hasNoEoiInputs()
				 	? 'null'
				 	: 'tmLexer.next()'
			};
		}
	}

	protected void reduce(int rule) {
		${self->java.symbolClassName()} left = new ${self->java.symbolClassName()}();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
${call debugReduce-}
${if opts.positions.contains('line') || opts.positions.contains('offset') || opts.positions.contains('column')-}
		${self->java.symbolClassName()} startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
${if opts.positions.contains('line')-}
		left.line = ${if self->lazyNext()}startsym == null ? tmLexer.getLine() : ${end}startsym.line;
${end-}
${if opts.positions.contains('column')-}
		left.column = ${if self->lazyNext()}startsym == null ? tmLexer.getColumn() : ${end}startsym.column;
${end-}
${if opts.positions.contains('offset')-}
		left.offset = ${if self->lazyNext()}startsym == null ? tmLexer.getOffset() : ${end}startsym.offset;
${end-}
${end-}
${if opts.endpositions.contains('line')-}
		left.endline = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endline : ${if self->lazyNext()}tmNext == null ? tmLexer.getLine() : ${end}tmNext.line;
${end-}
${if opts.endpositions.contains('column')-}
		left.endcolumn = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endcolumn : ${if self->lazyNext()}tmNext == null ? tmLexer.getColumn() : ${end}tmNext.column;
${end-}
${if opts.endpositions.contains('offset')-}
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : ${if self->lazyNext()}tmNext == null ? tmLexer.getOffset() : ${end}tmNext.offset;
${end-}
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
${if opts.genCleanup-}
			cleanup(tmStack[tmHead]);
${end-}
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, left.symbol);
	}

${call applyRule-}
${if self->hasRecovering()}
	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(${self->java.symbolClassName()} value) {
	}
${end-}
${if opts.genCleanup}
	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(${self->java.symbolClassName()} value) {
	}
${end-}
${if self->util.needFinalState()-}
${call customParseRoutines-}
${end-}
}
${end}


${template parserCtor-}
	public ${opts.prefix}Parser(${call java.package}.${opts.prefix}Lexer.@ErrorReporter reporter) {
		this.reporter = reporter;
	}
${end}

${template applyRule-}
	@SuppressWarnings("unchecked")
	protected void applyRule(${self->java.symbolClassName()} tmLeft, int ruleIndex, int ruleLength) {
${if syntax.rules.exists(r|r.code()) || opts.genast -}
		switch (ruleIndex) {
${foreach rule in syntax.rules-}
${if rule.code() || opts.genast && self->java_ast.astcode(rule)-}
			case ${rule.getIndex()}:  // ${rule}
${if rule.code()-}
				${rule.code()-}
${if opts.breaks }				break;$/
${else-}
${util.shiftRight(rule->java.astAction(self->java_ast.astcode(rule)), 4)-}
				break;
${end-}
${end-}
${end-}
		}
${end-}
	}
${end}

${template customParseRoutines-}
${foreach inp in syntax.input}
	public ${if inp.target->java.type()}${inp.target->java.type()}${else}Object${end} parse${util.toFirstUpper(inp.target.id)}(${opts.prefix}Lexer lexer) throws java.io.@IOException, ParseException {
		return ${if inp.target->java.type()}(${inp.target->java.type()}) ${end}parse(lexer${if self->util.needInitialState()}, ${index}${end}, ${parser.finalStates[index]}${if self->hasNoEoiInputs() && self->hasEoiInputs()
				}, ${inp.hasEoi() ? 'false' : 'true'}${end});
	}
${end-}
${end}

${template debugShift-}
		if (DEBUG_SYNTAX) {
			System.out.println(java.text.@MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
${end}

${template debugReduce-}
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
${end}

${query needActionsTable() = parser.lalr.size() > 0}

${template parserTables-}
	private static final int[] tmAction = ${opts.prefix}Lexer.${parser.action->java_pack.packInt()};

${if self->needActionsTable()-}
	private static final int[] tmLalr = ${opts.prefix}Lexer.${parser.lalr->java_pack.packInt()};

${end-}
	private static final int[] tmGoto = ${opts.prefix}Lexer.${parser.symGoto->java_pack.packInt()};

	private static final int[] tmFromTo = ${opts.prefix}Lexer.${parser.symFromTo->java_pack.packInt()};

	private static final int[] tmRuleLen = ${opts.prefix}Lexer.${parser.ruleLength->java_pack.packInt()};

	private static final int[] tmRuleSymbol = ${opts.prefix}Lexer.${parser.left->java_pack.packInt()};

	protected static final String[] tmSymbolNames = new String[] {
${foreach s in parser.symbols-}
		"${s.name}",
${end-}
	};

	public interface Nonterminals extends ${call java.package}.${opts.prefix}Lexer.@Tokens {
		// non-terminals
${for i in [parser.nterms, parser.nsyms-1]-}
		int ${parser.symbols[i].id->java.escapeJavaReserved()} = ${i};
${end-}
	}
${if syntax.rules.exists(x|x.getSource() is org.textmapper.lapg.api.rule.RhsSequence && x.getSource().name)}
	public interface Rules {
${foreach rule in syntax.rules-}
${if rule.getSource() is org.textmapper.lapg.api.rule.RhsSequence && rule.getSource().name-}
		int ${util.uniqueId(rule.getLeft().id + '_' + rule.getSource().name, '__rules__')} = ${rule.getIndex()};  // ${rule}
${end-}
${end-}
	}
${end-}

${end}

${template namedSets-}
${foreach set in syntax.sets-}
	// ${set.set}
	private static int[] ${set.name} = {
		${util.format(set.elements, 16, 2)}
	};

${end-}
${end}

${template parseException-}
	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}
${end}

${template parserAction-}
${if codeTemplate()-}
${eval codeTemplate()}
${end-}
${end}

${cached query hasRecovering() = syntax.error}
${cached query errorToken() = syntax.error.index}

${template dynamicRecoveringCheck-}
${end}

${query mainParseVisibility() = self->util.needFinalState() ? 'private' : 'public'}
${query mainParseReturnType() = !self->util.needFinalState() && syntax.input.first().target->java.type() ? syntax.input.first().target->java.type() : 'Object'}

${cached query hasNoEoiInputs() = syntax.input.exists(x|!x.hasEoi()) }
${cached query hasEoiInputs() = syntax.input.exists(x|x.hasEoi()) }

${cached query lazyNext() = self->hasNoEoiInputs() }

${query methAccess() = 'protected static'}
