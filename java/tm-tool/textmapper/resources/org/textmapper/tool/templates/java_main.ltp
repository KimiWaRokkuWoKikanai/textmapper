${template unit-}
${call java.header-}
package ${call java.package};

import java.io.*;

public class ${opts.prefix}Main {

	private static final String EXTENSION = ".${opts.defaultExtension ? opts.defaultExtension : opts.prefix}";
	private static final String ENCODING = "utf-8";

	private int counter = 0;
	private int errors = 0;

	public static String getFileContents(InputStream stream) throws IOException {
		StringBuilder contents = new StringBuilder();
		char[] buffer = new char[2048];
${if opts.java8-}
		try (Reader in = new InputStreamReader(stream, ENCODING)) {
			int count;
			while ((count = in.read(buffer)) > 0) {
				contents.append(buffer, 0, count);
			}
		}
${else-}
		Reader in = new InputStreamReader(stream, ENCODING);
		try {
			int count;
			while ((count = in.read(buffer)) > 0) {
				contents.append(buffer, 0, count);
			}
		} finally {
			in.close();
		}
${end-}
		return contents.toString();
	}

	private void parse(File file) {
		System.out.println("parsing " + file.getPath());
		counter++;

		final int[] problems = new int[]{0};
		${call java.package}.${opts.prefix}Lexer.@ErrorReporter reporter = ${if opts.java8}(message${self->util.location(', ', '', '')}) -> {${else}new ${call java.package}.${opts.prefix}Lexer.@ErrorReporter() {${end}
${if opts.java8-}
			System.out.println("   " + ${if opts.positions.contains('line')}line + ": " + ${end}message);
			problems[0]++;
${else}
			@Override
			public void error(String message${self->util.location(', int ', '', '')}) {
				System.out.println("   " + ${if opts.positions.contains('line')}line + ": " + ${end}message);
				problems[0]++;
			}
${end-}
		};

		try {
			String contents = getFileContents(new FileInputStream(file));
${if opts.lexerInput == 'buffer'-}
			${call java.package}.@${opts.prefix}Lexer lexer = new ${call java.package}.@${opts.prefix}Lexer(contents, reporter);
${else-}
			${call java.package}.@${opts.prefix}Lexer lexer = new ${call java.package}.@${opts.prefix}Lexer(new StringReader(contents), reporter);
${end-}
			${call java.package}.@${opts.prefix}Parser parser = new ${call java.package}.@${opts.prefix}Parser(reporter);
			parser.parse(lexer);
		} catch (${call java.package}.${opts.prefix}Parser.@ParseException ex) {
			/* not parsed */
		} catch (IOException ex) {
			System.out.println("   I/O problem: " + ex.getMessage());
			problems[0]++;
		}
		if (problems[0] > 0) {
			System.out.println("not parsed " + file.getPath() + ", " + problems[0] + " problem(s)");
			errors++;
		}
	}

	private void walk(File dir) {
		File[] list = dir.listFiles();
		if (list == null) return;

		for (File f : list) {
			if (f.getName().endsWith(EXTENSION) && f.isFile()) {
				parse(f);
			}

			if (f.isDirectory()) {
				walk(f);
			}
		}
	}

	private void printStatistics() {
		System.out.println("Processed " + counter + " files with " + errors + " errors.");
	}

	public static void main(String[] args) {
		if (args.length == 0) {
			System.out.println("Provide a list of directories with " + EXTENSION + " files.");
			return;
		}

		${opts.prefix}Main instance = new ${opts.prefix}Main();
		for (String path : args) {
			instance.walk(new File(path));
		}
		instance.printStatistics();
	}
}
${end}
