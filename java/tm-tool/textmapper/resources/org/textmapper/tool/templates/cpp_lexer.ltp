${template header-}
${call cpp.file_header-}
${call cpp.header_start('lexer')-}

${call spanStruct-}

class ${call className()} {
 public:
  // Note: input must be in UTF-8.
  ${call className()}(const string* input);

 private:
  const string* input_;
};

${call cpp.header_end('lexer')-}
${end}


${template impl-}
${call cpp.file_header-}
${call cpp.namespace_start-}

#include "${opts.prefix+'_lexer.h'}"

namespace {
${call lexerTables-}
}  // namespace

${call className()}::${call className()}(const string* input)
  : input_(input) {}

${call cpp.namespace_end-}
${end}


${template lexerTables}
const short kCharClass[] = {
  ${util.format(lex.char2no, 16, 1)}
};

const short kStateMap[] = {
  ${util.format(lex.groupset, 16, 1)}
};

const short kRuleSymbol[] = {
  ${util.format(syntax.lexerRuleTokens, 16, 1)}
};

const int kClassCount = ${lex.nchars};

const short kAction[] = {
  ${util.format(lex.change, 16, 1)}
};

${end}

${template spanStruct-}
struct ${util.toFirstUpper(opts.prefix)}Span {
  void* value;
  int symbol;
  int state;
${if opts.positions.contains('line')-}
  int line;
${end-}
${if opts.positions.contains('column')-}
  int column;
${end-}
${if opts.positions.contains('offset')-}
  int offset;
${end-}
${if opts.endpositions.contains('line')-}
  int endline;
${end-}
${if opts.endpositions.contains('column')-}
  int endcolumn;
${end-}
${if opts.endpositions.contains('offset')-}
  int endoffset;
${end-}
};
${end}


${cached query className() = util.toFirstUpper(opts.prefix) + 'Lexer'}
