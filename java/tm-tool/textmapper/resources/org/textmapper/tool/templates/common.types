##

class Context {
	common.Grammar syntax[1];
	common.Lexer lex[1];
	common.Parser parser[1];
	common.AST ast[0..1];
	Options opts[1];
}

# TODO
class AST {
}

class Grammar {
	Symbol symbols[1..*];
	Rule rules[1..*];
	Prio priorities[0..*];

	LexerRule lexerRules[0..*];

	int terminals;
	Symbol* input[1..*];
	Symbol* eoi;
	Symbol* error;

	SourceElement templates;

	bool hasErrors();

# TODO:
#	Map<String, Object> getOptions();
}

class SourceElement {
	string text;
	string resourceName;
	int line;
	int offset;
	int endOffset;
}

class LexerRule extends SourceElement {
	Symbol* symbol;
	string regexp;

	int priority;
	int groups;

	SourceElement action;
}

class Rule extends SourceElement {
	int index;
	string alias;
	Symbol left[1];
	SymbolRef right[0..*];
	int precedence;
	SourceElement action;
}

class Prio extends SourceElement {
	int prio;
	Symbol* symbols[1..*];
}

class Symbol extends SourceElement {
	int index;
	string id;
	string name;
	string type;
	bool term;
}

class SymbolRef extends SourceElement {
	Symbol* target;
	string alias;
}

class Parser {
	Symbol* sym[1..*];
	int rules;
	int nsyms;
	int nterms;
	int nstates;
	int errorn;
	int rleft[0..*];
	int rright[0..*];
	int nactions;
	int rindex[0..*];
	int rprio[0..*];
	int action_index[0..*];

	int sym_goto[0..*];
	int sym_from[0..*];
	int sym_to[0..*];
	int action_table[0..*];
	int final_states[1..*];
}

class Lexer {
	int nstates;
	int nchars;
	int nterms;
	int lnum[0..*];
	int char2no[0..*];
	int groupset[0..*];

	int change[0..*,0..*];
}

class List {
    int length;

# first(), last(), toSet(), size(), contains(x), indexOf(x), union(c)
}

class Options {
	string lang[identifier] = "";

	int expandTabs = 0;
	bool forceLF = false;
	string outputEncoding = "utf-8";
}

class AnnotateSymbol {
	bool _class;
	bool _interface;
	bool _set;
	bool noast;
	bool lookahead;
	bool void;
}