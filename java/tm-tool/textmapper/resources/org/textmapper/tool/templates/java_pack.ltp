${template unpackCountValue(positiveValues)-}
	private static ${positiveValues ? 'char' : 'short'}[] unpack_vc_${positiveValues ? 'char' : 'short'}(int size, String... st) {
		${positiveValues ? 'char' : 'short'}[] res = new ${positiveValues ? 'char' : 'short'}[size];
		int t = 0;
		int count = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; ) {
				count = i > 0 || count == 0 ? s.charAt(i++) : count;
				if (i < slen) {
					${positiveValues ? 'char' : 'short'} val = ${positiveValues ? '' : '(short) '}s.charAt(i++);
					while (count-- > 0) res[t++] = val;
				}
			}
		}
		assert res.length == t;
		return res;
	}
${end}

${template packCountValue(positiveValues)-}
unpack_vc_${positiveValues ? 'char' : 'short'}(${self.size()},
${foreach str in util.packShortCountValue(self, positiveValues) separator ',\n'-}
${foreach spart in str separator ' +\n'-}
		${spart}${end}${end})${end}


${template unpackInt-}
	/* package */ static int[] unpack_int(int size, String... st) {
		int[] res = new int[size];
		boolean second = false;
		char first = 0;
		int t = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; i++) {
				if (second) {
					res[t++] = (s.charAt(i) << 16) + first;
				} else {
					first = s.charAt(i);
				}
				second = !second;
			}
		}
		assert !second;
		assert res.length == t;
		return res;
	}
${end}

${template packInt-}
unpack_int(${self.size()},
${foreach str in util.packInt(self) separator ',\n'-}
${foreach spart in str separator ' +\n'-}
		${spart}${end}${end})${end}
