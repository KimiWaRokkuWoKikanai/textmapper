${template unit-}
${call tokensInterface-}
${call statesInterface-}

${opts.module}.Lexer = function(text, errorHandler) {
	this.reset(text);
	this.errorHandler = errorHandler;
	this.tokenLine = 1;
	this.currLine = 1;
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	this.currColumn = 1;
${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	this.currOffset = 0;
${end-}
};

${opts.module}.Lexer.prototype = {
	reset: function(text) {
		this.text = text;
		this.state = 0;
		this.chr = text.length > 0 ? text.charCodeAt(0) : -1;
		this.offset = 1;
		this.token = "";
	},

${call lexerTables-}

	mapCharacter: function(chr) {
		if (chr >= 0 && chr < ${lex.char2no.length}) {
			return this.tmCharClass[chr];
		}
		return chr === -1 ? 0 : 1;
	},

${call createToken-}
${call code-}
	next: function() {
		var lapg_n = {};
		var state;

		do {
${if opts.positions.contains('offset')-}
			lapg_n.offset = this.currOffset;
${end-}
			this.tokenLine =${if opts.positions.contains('line')} lapg_n.line =${end} this.currLine;
${if opts.positions.contains('column')-}
			lapg_n.column = this.currColumn;
${end-}
			this.token = "";
			var tokenStart = this.offset - 1;

			for (state = ${self->tmStateMapExists() ? 'this.tmStateMap[this.state]' : 'this.state'}; state >= 0;) {
				state = this.tmGoto[state * this.tmClassesCount + this.mapCharacter(this.chr)];
				if (state == -1 && this.chr === -1) {
${if opts.endpositions.contains('offset')-}
					lapg_n.endoffset = this.currOffset;
${end-}
${if opts.endpositions.contains('line')-}
					lapg_n.endline = this.currLine;
${end-}
${if opts.endpositions.contains('column')-}
					lapg_n.endcolumn = this.currColumn;
${end-}
					lapg_n.symbol = 0;
					lapg_n.value = null;
					this.errorHandler("Unexpected end of input reached"${call js.err_location('lapg_n', 'this')});
${if opts.positions.contains('offset')-}
					lapg_n.offset = this.currOffset;
${end-}
					return lapg_n;
				}
				if (state >= -1 && this.chr !== -1) {
${util.shiftRight(self->advanceChar(), 3)-}
				}
			}
${if opts.endpositions.contains('offset')-}
			lapg_n.endoffset = this.currOffset;
${end-}
${if opts.endpositions.contains('line')-}
			lapg_n.endline = this.currLine;
${end-}
${if opts.endpositions.contains('column')-}
			lapg_n.endcolumn = this.currColumn;
${end-}

			if (state == -2) {
				lapg_n.symbol = 0;
				lapg_n.value = null;
				return lapg_n;
			}

			this.token = this.text.slice(tokenStart, ${if opts.positions.contains('offset')}this.currOffset${
						else}this.chr === -1 && this.offset == this.text.length ? this.offset : this.offset - 1${end});
			if (state == -1) {
				this.errorHandler("invalid lexeme at line " + this.currLine + ": `" + this.token + "`, skipped"${call js.err_location('lapg_n', 'this')});
				lapg_n.symbol = -1;
				continue;
			}

			lapg_n.symbol = this.tmRuleSymbol[-state - 3];
			lapg_n.value = null;

		} while (lapg_n.symbol == -1 || !this.createToken(lapg_n, -state - 3));
		return lapg_n;
	}
};
${end}



${template createToken-}
	createToken: function(lapg_n, ruleIndex) {
${if self->hasLexerActions()-}
		var spaceToken = false;
		switch (ruleIndex) {
${foreach rule in syntax.lexerRules-}
${if rule.kindAsText == 'class'-}
		case ${rule.index}:
			return this.create${rule->classRuleName()}Token(lapg_n, ruleIndex);
${else if rule.code && !rule.classRule-}
		case ${rule.index}: // ${rule.symbol.name}: /${rule.regexp}/
${rule.code-}
			break;
${end-}
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	},
${foreach classRule in self->classRules()-}

${if classRule->classHasInstances()-}
	subTokensOf${classRule->classRuleName()}: {
${foreach instance in classRule->classInstances() separator ',\n'-}
		'${util.escape(instance.regexp.constantValue)}': ${instance.index-}
${end}
	},

${end-}
	create${classRule->classRuleName()}Token: function(lapg_n, ruleIndex) {
${if classRule->classHasInstances()-}
		if (this.token in this.subTokensOf${classRule->classRuleName()}) {
			ruleIndex = this.subTokensOf${classRule->classRuleName()}[this.token];
			lapg_n.symbol = this.tmRuleSymbol[ruleIndex];
		}
${end-}
${if classRule->classInstances().exists(x|x.code) || classRule.code-}
		var spaceToken = false;
		switch(ruleIndex) {
${foreach instance in classRule->classInstances().select(x|x.code)-}
		case ${instance.index}:  // ${instance.regexp.constantValue}
${instance.code-}
			break;
${end-}
${if classRule.code-}
		case ${classRule.index}:  // <default>
${classRule.code-}
			break;
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	},

${end-}
${end}

${template advanceChar()-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
		this.currOffset++;
${end-}
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
		this.currColumn++;
${end-}
		if (this.chr == 10) {
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
			this.currColumn = 1;
${end-}
			this.currLine++;
		}
		this.chr = this.offset < this.text.length ? this.text.charCodeAt(this.offset++) : -1;
${end}


${template lexerAction($, symbol)-}
${if self.kindAsText == 'space'-}
			spaceToken = true;
${end-}
${if codeTemplate-}
			${eval codeTemplate}
${end-}
${end}

${template lexerTables-}
	tmCharClass: [
		${util.format(lex.char2no, 16, 2)}
	],
${if self->tmStateMapExists()-}
	tmStateMap: [
		${util.format(lex.groupset, 16, 2)}
	],
${end-}
	tmRuleSymbol: [
		${util.format(syntax.lexerRuleTokens, 16, 2)}
	],
	tmClassesCount: ${lex.nchars},
	tmGoto: [
		${util.format(lex.change, 16, 2)}
	],
${end}


${template tokensInterface-}
${opts.module}.Tokens = {
	Unavailable_: -1,
${for i in [0, syntax.terminals - 1] separator ',\n'-}
	${syntax.symbols[i].id->js.escapeJsReserved()}: ${i-}
${end}
};
${end}

${template statesInterface-}
${if syntax.lexerStates.size() > 1}
${opts.module}.States = {
${foreach state in syntax.lexerStates separator ',\n'-}
	${state->stateId()}: ${state.index-}
${end}
};
${end-}
${end}

${template code-}
${end}


${cached query stateId() = self.name->js.escapeJsReserved()}

${cached query hasLexerActions() =
	syntax.lexerRules.exists(l|l.code && !l.classRule || l.kindAsText == 'class')}

${cached query classRules() = syntax.lexerRules.select(x|x.kindAsText == 'class')}

${cached query classHasInstances() = self->classInstances().size() > 0 }

${cached query classInstances() = context.syntax.lexerRules.select(x|x.classRule && x.classRule == self)}

${cached query classRuleName() = util.uniqueId(util.toFirstUpper(self.symbol.id), '__classrule__')}

${cached query tmStateMapExists() = lex.groupset.length > 1}
