
// Ast

class Input {
	list<TypeDeclaration> declarations;
}

input  : Input ::=
	{declarations}
;

declarations  : list<TypeDeclaration>
	(this+=type_declaration)+ ;

member_declaration_optlist  : list<MemberDeclaration>
	(this+=member_declaration)* ;

class TypeDeclaration {
	String name;
	list<list<String>> super;
	list<MemberDeclaration> members;
}

type_declaration  : TypeDeclaration ::=
	Lclass name=identifier super=extends_clauseopt '{' members=member_declaration_optlist '}'
;

extends_clause  : list<list<String>> ::=
	Lextends this=name_list
;

interface MemberDeclaration {
}

member_declaration  : MemberDeclaration ::=
	this=feature_declaration
  | this=method_declaration
;

class FeatureDeclaration : MemberDeclaration {
	TypeEx typeEx;
	String name;
	list<Constraint> modifiers;
	Expression defaultval;
}

feature_declaration  : FeatureDeclaration ::=
	typeEx=type_ex name=identifier modifiers=modifiersopt defaultval=defaultvalopt ';'
;

class MethodDeclaration : MemberDeclaration {
	TypeEx returnType;
	String name;
	list<TypeEx> parameters;
}

method_declaration  : MethodDeclaration ::=
	returnType=type_ex name=identifier '(' parameters=parametersopt ')' ';'
;

parameters  : list<TypeEx>
	(this+=type_ex
		separator ',')+ ;

interface Expression {
}

defaultval  : Expression ::=
	'=' this=expression
;

constraint_list_Semicolon_separated  : list<Constraint>
	(this+=constraint
		separator ';')+ ;

modifiers  : list<Constraint> ::=
	'[' this=constraint_list_Semicolon_separated ']'
;

class Constraint {
	StringConstraint stringConstraint;
	list<Multiplicity> multiplicityListCommaSeparated;
}

constraint  : Constraint ::=
	stringConstraint=string_constraint
  | multiplicityListCommaSeparated=multiplicity_list_Comma_separated
;

multiplicity_list_Comma_separated  : list<Multiplicity>
	(this+=multiplicity
		separator ',')+ ;

class StringConstraint {
	KindKind kind;
	list<String> strings;
	String identifier;
	enum KindKind {
		LSET,
		LCHOICE
	}
}

string_constraint  : StringConstraint ::=
	kind=Lset as KindKind.LSET ':' {strings}
  | kind=Lchoice as KindKind.LCHOICE ':' {strings}
  | {identifier}
;

strings  : list<String>
	(this+=string
		separator ',')+ ;

class String {
	String identifier;
	String scon;
}

string  : String ::=
	{identifier}
  | {scon}
;

class Multiplicity {
	Integer lo;
	boolean hasNoUpperBound;
	Integer hi;
}

multiplicity  : Multiplicity ::=
	lo=icon
  | lo=icon '..' hasNoUpperBound='*' as true
  | lo=icon '..' hi=icon
;

class TypeEx {
	Type type;
	list<Multiplicity> multiplicityListCommaSeparated;
}

type_ex  : TypeEx ::=
	{type}
  | {type} '[' multiplicityListCommaSeparated=multiplicity_list_Comma_separated ']'
;

class Type {
	KindKind kind;
	list<String> name;
	boolean isReference;
	boolean isClosure;
	list<TypeEx> parameters;
	enum KindKind {
		LINT,
		LBOOL,
		LSTRING
	}
}

type  : Type ::=
	kind=Lint as KindKind.LINT
  | kind=Lstring as KindKind.LSTRING
  | kind=Lbool as KindKind.LBOOL
  | {name}
  | {name} isReference='*' as true
  | isClosure='{' as true parameters=parametersopt '=>' '}'
;

expression  : Expression ::=
	this=structural_expression
  | this=literal_expression
;

class LiteralExpression : Expression {
	String scon;
	Integer icon;
	Boolean bcon;
}

literal_expression  : LiteralExpression ::=
	{scon}
  | {icon}
  | {bcon}
;

class ListOfIdentifierAnd2ElementsCommaSeparatedItem {
	String identifier;
	MapSeparator mapSeparator;
	Expression expression;
}

list_of_identifier_and_2_elements_Comma_separated  : list<ListOfIdentifierAnd2ElementsCommaSeparatedItem>
	(this+=new.ListOfIdentifierAnd2ElementsCommaSeparatedItem({identifier} mapSeparator=map_separator {expression})
		separator ',')+ ;

list_of_identifier_and_2_elements_Comma_separatedopt  : list<ListOfIdentifierAnd2ElementsCommaSeparatedItem> ::=
	this=list_of_identifier_and_2_elements_Comma_separated?
;

class StructuralExpression : Expression {
	list<String> name;
	list<ListOfIdentifierAnd2ElementsCommaSeparatedItem> mapEntries;
	list<Expression> expressionList;
}

structural_expression  : StructuralExpression ::=
	{name} '(' mapEntries=list_of_identifier_and_2_elements_Comma_separatedopt ')'
  | '[' expressionList=expression_listopt ']'
;

expression_list  : list<Expression>
	(this+=expression
		separator ',')+ ;

enum MapSeparator {
	COLON,
	ASSIGN,
	ASSIGN_GT
}

map_separator  : MapSeparator ::=
	this=':' as MapSeparator.COLON
  | this='=' as MapSeparator.ASSIGN
  | this='=>' as MapSeparator.ASSIGN_GT
;

name  : list<String>
	(this+=identifier
		separator '.')+ ;

name_list  : list<list<String>>
	(this+=name
		separator ',')+ ;

extends_clauseopt  : list<list<String>> ::=
	this=extends_clause?
;

modifiersopt  : list<Constraint> ::=
	this=modifiers?
;

defaultvalopt  : Expression ::=
	this=defaultval?
;

parametersopt  : list<TypeEx> ::=
	this=parameters?
;

expression_listopt  : list<Expression> ::=
	this=expression_list?
;

