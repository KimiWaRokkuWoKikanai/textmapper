/**
 * Copyright 2002-2022 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.templates.ast;


import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.textmapper.templates.ast.TemplatesLexer.ErrorReporter;
import org.textmapper.templates.ast.TemplatesLexer.Span;
import org.textmapper.templates.ast.TemplatesLexer.Tokens;
import org.textmapper.templates.ast.TemplatesTree.TextSource;
import org.textmapper.templates.bundle.IBundleEntity;

public class TemplatesParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TemplatesParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	String templatePackage;

	private int killEnds = -1;

	private int rawText(int start, final int end) {
		CharSequence buffer = source.getContents();
		if (killEnds == start) {
			while (start < end && (buffer.charAt(start) == '\t' || buffer.charAt(start) == ' '))
				start++;

			if (start < end && buffer.charAt(start) == '\r')
				start++;

			if (start < end && buffer.charAt(start) == '\n')
				start++;
		}
		return start;
	}

	private void checkIsSpace(int start, int end, int line) {
		String val = source.getText(rawText(start, end), end).trim();
		if (val.length() > 0) {
			reporter.error("Unknown text ignored: `" + val + "`", line, start, end);
		}
	}

	private void applyElse(CompoundNode node, ElseIfNode elseNode, int offset, int endoffset, int line) {
		if (elseNode == null) {
			return;
		}
		if (node instanceof IfNode) {
			((IfNode)node).applyElse(elseNode);
		} else {
			reporter.error("Unknown else node, instructions skipped", line, offset, endoffset);
		}
	}

	private ExpressionNode createCollectionProcessor(ExpressionNode context, String instruction, String varName, ExpressionNode foreachExpr, TextSource source, int offset, int endoffset, int line) {
		char first = instruction.charAt(0);
		int kind = 0;
		switch(first) {
		case 'c':
			if(instruction.equals("collect")) {
				kind = CollectionProcessorNode.COLLECT;
			} else if(instruction.equals("collectUnique")) {
				kind = CollectionProcessorNode.COLLECTUNIQUE;
			}
			break;
		case 'r':
			if(instruction.equals("reject")) {
				kind = CollectionProcessorNode.REJECT;
			}
			break;
		case 'm':
			if(instruction.equals("max")) {
				kind = CollectionProcessorNode.MAX;
			}
			break;
		case 's':
			if(instruction.equals("select")) {
				kind = CollectionProcessorNode.SELECT;
			} else if(instruction.equals("sort")) {
				kind = CollectionProcessorNode.SORT;
			}
			break;
		case 'f':
			if(instruction.equals("forAll")) {
				kind = CollectionProcessorNode.FORALL;
			}
			break;
		case 'e':
			if(instruction.equals("exists")) {
				kind = CollectionProcessorNode.EXISTS;
			}
			break;
		case 'g':
			if(instruction.equals("groupBy")) {
				kind = CollectionProcessorNode.GROUPBY;
			}
			break;
		}
		if (kind == 0) {
			reporter.error("unknown collection processing instruction: " + instruction, line, offset, endoffset);
			return new ErrorNode(source, offset, endoffset);
		}
		return new CollectionProcessorNode(context, kind, varName, foreachExpr, source, offset, endoffset);
	}

	private Node createEscapedId(String escid, int offset, int endoffset) {
		int sharp = escid.indexOf('#');
		if (sharp >= 0) {
			Integer index = new Integer(escid.substring(sharp+1));
			escid = escid.substring(0, sharp);
			return new IndexNode(new SelectNode(null,escid,source,offset,endoffset), new LiteralNode(index,source,offset,endoffset),source,offset,endoffset);

		} else {
			return new SelectNode(null,escid,source,offset,endoffset);
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	private void checkFqn(String templateName, int offset, int endoffset, int line) {
		if (templateName.indexOf('.') >= 0 && templatePackage != null) {
			reporter.error("template name should be simple identifier", line, offset, endoffset);
		}
	}
	private static final int[] tmAction = TemplatesLexer.unpack_int(263,
		"\ufffd\uffff\uffff\uffff\5\0\ufff5\uffff\uffed\uffff\1\0\3\0\4\0\uffff\uffff\0\0" +
		"\31\0\30\0\26\0\27\0\uffff\uffff\uffe5\uffff\20\0\25\0\23\0\24\0\uffff\uffff\11\0" +
		"\uffff\uffff\164\0\uffff\uffff\2\0\uffff\uffff\7\0\uffff\uffff\uffd7\uffff\71\0\73" +
		"\0\uffff\uffff\uffff\uffff\121\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\75\0\uffff\uffff\120\0\74\0\uffff\uffff\uffa1\uffff\uffff\uffff\uffff" +
		"\uffff\uff99\uffff\uffff\uffff\161\0\uffff\uffff\uffff\uffff\uff7b\uffff\106\0\105" +
		"\0\72\0\125\0\uff47\uffff\uff19\uffff\ufefd\uffff\ufee3\uffff\152\0\154\0\ufecd\uffff" +
		"\37\0\17\0\uffff\uffff\41\0\ufec5\uffff\uffff\uffff\uffff\uffff\6\0\ufebb\uffff\uffff" +
		"\uffff\ufe9d\uffff\ufe91\uffff\ufe5b\uffff\uffff\uffff\ufe53\uffff\uffff\uffff\ufe4b" +
		"\uffff\uffff\uffff\uffff\uffff\ufe43\uffff\ufe3b\uffff\124\0\123\0\ufe35\uffff\uffff" +
		"\uffff\156\0\ufe03\uffff\uffff\uffff\uffff\uffff\22\0\21\0\32\0\57\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\66\0\45\0\50\0\ufdfb" +
		"\uffff\uffff\uffff\166\0\uffff\uffff\ufdf5\uffff\16\0\uffff\uffff\153\0\ufded\uffff" +
		"\172\0\ufdcf\uffff\uffff\uffff\176\0\35\0\uffff\uffff\uffff\uffff\ufdc7\uffff\ufdc1" +
		"\uffff\14\0\ufdbb\uffff\uffff\uffff\116\0\117\0\115\0\uffff\uffff\111\0\uffff\uffff" +
		"\uffff\uffff\110\0\70\0\uffff\uffff\ufdb3\uffff\uffff\uffff\uffff\uffff\ufd7d\uffff" +
		"\ufd4f\uffff\ufd21\uffff\ufcf3\uffff\ufcc5\uffff\ufc97\uffff\ufc69\uffff\ufc3b\uffff" +
		"\ufc0d\uffff\141\0\ufbdf\uffff\ufbc1\uffff\ufba5\uffff\ufb89\uffff\ufb73\uffff\uffff" +
		"\uffff\155\0\uffff\uffff\uffff\uffff\uffff\uffff\42\0\12\0\uffff\uffff\76\0\uffff" +
		"\uffff\uffff\uffff\174\0\34\0\40\0\uffff\uffff\ufb5d\uffff\uffff\uffff\ufb53\uffff" +
		"\uffff\uffff\202\0\uffff\uffff\uffff\uffff\uffff\uffff\113\0\uffff\uffff\157\0\104" +
		"\0\ufb4d\uffff\uffff\uffff\ufb2f\uffff\uffff\uffff\65\0\uffff\uffff\uffff\uffff\13" +
		"\0\uffff\uffff\44\0\ufb11\uffff\uffff\uffff\uffff\uffff\204\0\60\0\112\0\uffff\uffff" +
		"\uffff\uffff\53\0\15\0\uffff\uffff\uffff\uffff\ufb09\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\151\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufadb\uffff\uffff" +
		"\uffff\uffff\uffff\55\0\54\0\52\0\107\0\114\0\uffff\uffff\100\0\ufad3\uffff\102\0" +
		"\uffff\uffff\uffff\uffff\47\0\10\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\ufab5\uffff\56\0\uffff\uffff\101\0\103\0\46\0\61\0\uffff" +
		"\uffff\51\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final int[] tmLalr = TemplatesLexer.unpack_int(1360,
		"\1\0\uffff\uffff\5\0\uffff\uffff\0\0\163\0\uffff\uffff\ufffe\uffff\13\0\uffff\uffff" +
		"\37\0\uffff\uffff\34\0\165\0\uffff\uffff\ufffe\uffff\1\0\uffff\uffff\5\0\uffff\uffff" +
		"\0\0\162\0\uffff\uffff\ufffe\uffff\1\0\uffff\uffff\2\0\uffff\uffff\3\0\uffff\uffff" +
		"\4\0\uffff\uffff\5\0\uffff\uffff\0\0\160\0\uffff\uffff\ufffe\uffff\57\0\uffff\uffff" +
		"\66\0\uffff\uffff\30\0\67\0\36\0\67\0\44\0\67\0\45\0\67\0\46\0\67\0\47\0\67\0\50" +
		"\0\67\0\51\0\67\0\52\0\67\0\55\0\67\0\56\0\67\0\60\0\67\0\61\0\67\0\62\0\67\0\63" +
		"\0\67\0\64\0\67\0\65\0\67\0\67\0\67\0\70\0\67\0\72\0\67\0\73\0\67\0\74\0\67\0\75" +
		"\0\67\0\77\0\67\0\uffff\uffff\ufffe\uffff\13\0\uffff\uffff\7\0\165\0\71\0\165\0\uffff" +
		"\uffff\ufffe\uffff\7\0\uffff\uffff\10\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff" +
		"\32\0\uffff\uffff\33\0\uffff\uffff\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff" +
		"\47\0\uffff\uffff\53\0\uffff\uffff\55\0\uffff\uffff\57\0\uffff\uffff\56\0\201\0\uffff" +
		"\uffff\ufffe\uffff\55\0\uffff\uffff\61\0\uffff\uffff\70\0\uffff\uffff\30\0\122\0" +
		"\36\0\122\0\44\0\122\0\45\0\122\0\46\0\122\0\47\0\122\0\50\0\122\0\51\0\122\0\52" +
		"\0\122\0\56\0\122\0\60\0\122\0\62\0\122\0\63\0\122\0\64\0\122\0\65\0\122\0\67\0\122" +
		"\0\72\0\122\0\73\0\122\0\74\0\122\0\75\0\122\0\76\0\122\0\77\0\122\0\uffff\uffff" +
		"\ufffe\uffff\46\0\uffff\uffff\47\0\uffff\uffff\50\0\uffff\uffff\51\0\uffff\uffff" +
		"\52\0\uffff\uffff\72\0\uffff\uffff\73\0\uffff\uffff\74\0\uffff\uffff\75\0\uffff\uffff" +
		"\30\0\137\0\36\0\137\0\44\0\137\0\45\0\137\0\56\0\137\0\60\0\137\0\62\0\137\0\63" +
		"\0\137\0\64\0\137\0\65\0\137\0\67\0\137\0\76\0\137\0\77\0\137\0\uffff\uffff\ufffe" +
		"\uffff\30\0\uffff\uffff\36\0\142\0\44\0\142\0\45\0\142\0\56\0\142\0\60\0\142\0\62" +
		"\0\142\0\63\0\142\0\64\0\142\0\65\0\142\0\67\0\142\0\76\0\142\0\77\0\142\0\uffff" +
		"\uffff\ufffe\uffff\65\0\uffff\uffff\67\0\uffff\uffff\36\0\145\0\44\0\145\0\45\0\145" +
		"\0\56\0\145\0\60\0\145\0\62\0\145\0\63\0\145\0\64\0\145\0\76\0\145\0\77\0\145\0\uffff" +
		"\uffff\ufffe\uffff\63\0\uffff\uffff\64\0\uffff\uffff\77\0\uffff\uffff\36\0\150\0" +
		"\44\0\150\0\45\0\150\0\56\0\150\0\60\0\150\0\62\0\150\0\76\0\150\0\uffff\uffff\ufffe" +
		"\uffff\62\0\uffff\uffff\44\0\33\0\45\0\33\0\uffff\uffff\ufffe\uffff\57\0\uffff\uffff" +
		"\61\0\uffff\uffff\44\0\167\0\45\0\167\0\uffff\uffff\ufffe\uffff\7\0\uffff\uffff\10" +
		"\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff\32\0\uffff\uffff\33\0\uffff\uffff" +
		"\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff\47\0\uffff\uffff\53\0\uffff\uffff" +
		"\55\0\uffff\uffff\57\0\uffff\uffff\60\0\201\0\uffff\uffff\ufffe\uffff\57\0\uffff" +
		"\uffff\61\0\uffff\uffff\21\0\173\0\44\0\173\0\45\0\173\0\uffff\uffff\ufffe\uffff" +
		"\57\0\uffff\uffff\30\0\67\0\36\0\67\0\44\0\67\0\45\0\67\0\46\0\67\0\47\0\67\0\50" +
		"\0\67\0\51\0\67\0\52\0\67\0\55\0\67\0\56\0\67\0\60\0\67\0\61\0\67\0\62\0\67\0\63" +
		"\0\67\0\64\0\67\0\65\0\67\0\67\0\67\0\70\0\67\0\72\0\67\0\73\0\67\0\74\0\67\0\75" +
		"\0\67\0\76\0\67\0\77\0\67\0\uffff\uffff\ufffe\uffff\62\0\uffff\uffff\44\0\177\0\45" +
		"\0\177\0\uffff\uffff\ufffe\uffff\62\0\uffff\uffff\44\0\63\0\45\0\63\0\uffff\uffff" +
		"\ufffe\uffff\62\0\uffff\uffff\44\0\62\0\45\0\62\0\uffff\uffff\ufffe\uffff\62\0\uffff" +
		"\uffff\44\0\36\0\45\0\36\0\uffff\uffff\ufffe\uffff\7\0\uffff\uffff\71\0\171\0\uffff" +
		"\uffff\ufffe\uffff\57\0\uffff\uffff\66\0\uffff\uffff\71\0\uffff\uffff\76\0\uffff" +
		"\uffff\30\0\67\0\46\0\67\0\47\0\67\0\50\0\67\0\51\0\67\0\52\0\67\0\55\0\67\0\56\0" +
		"\67\0\61\0\67\0\62\0\67\0\63\0\67\0\64\0\67\0\65\0\67\0\67\0\67\0\70\0\67\0\72\0" +
		"\67\0\73\0\67\0\74\0\67\0\75\0\67\0\77\0\67\0\uffff\uffff\ufffe\uffff\62\0\uffff" +
		"\uffff\56\0\200\0\60\0\200\0\uffff\uffff\ufffe\uffff\7\0\uffff\uffff\60\0\171\0\uffff" +
		"\uffff\ufffe\uffff\57\0\uffff\uffff\61\0\uffff\uffff\66\0\167\0\uffff\uffff\ufffe" +
		"\uffff\7\0\uffff\uffff\10\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff\32\0\uffff" +
		"\uffff\33\0\uffff\uffff\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff\47\0\uffff" +
		"\uffff\53\0\uffff\uffff\55\0\uffff\uffff\57\0\uffff\uffff\60\0\201\0\uffff\uffff" +
		"\ufffe\uffff\21\0\uffff\uffff\44\0\175\0\45\0\175\0\uffff\uffff\ufffe\uffff\7\0\uffff" +
		"\uffff\60\0\207\0\uffff\uffff\ufffe\uffff\1\0\uffff\uffff\5\0\203\0\uffff\uffff\ufffe" +
		"\uffff\62\0\uffff\uffff\60\0\170\0\71\0\170\0\uffff\uffff\ufffe\uffff\57\0\uffff" +
		"\uffff\30\0\77\0\36\0\77\0\44\0\77\0\45\0\77\0\46\0\77\0\47\0\77\0\50\0\77\0\51\0" +
		"\77\0\52\0\77\0\55\0\77\0\56\0\77\0\60\0\77\0\61\0\77\0\62\0\77\0\63\0\77\0\64\0" +
		"\77\0\65\0\77\0\67\0\77\0\70\0\77\0\72\0\77\0\73\0\77\0\74\0\77\0\75\0\77\0\76\0" +
		"\77\0\77\0\77\0\uffff\uffff\ufffe\uffff\46\0\131\0\47\0\131\0\50\0\uffff\uffff\51" +
		"\0\uffff\uffff\52\0\uffff\uffff\72\0\131\0\73\0\131\0\74\0\131\0\75\0\131\0\30\0" +
		"\131\0\36\0\131\0\44\0\131\0\45\0\131\0\56\0\131\0\60\0\131\0\62\0\131\0\63\0\131" +
		"\0\64\0\131\0\65\0\131\0\67\0\131\0\76\0\131\0\77\0\131\0\uffff\uffff\ufffe\uffff" +
		"\46\0\132\0\47\0\132\0\50\0\uffff\uffff\51\0\uffff\uffff\52\0\uffff\uffff\72\0\132" +
		"\0\73\0\132\0\74\0\132\0\75\0\132\0\30\0\132\0\36\0\132\0\44\0\132\0\45\0\132\0\56" +
		"\0\132\0\60\0\132\0\62\0\132\0\63\0\132\0\64\0\132\0\65\0\132\0\67\0\132\0\76\0\132" +
		"\0\77\0\132\0\uffff\uffff\ufffe\uffff\46\0\126\0\47\0\126\0\50\0\126\0\51\0\126\0" +
		"\52\0\126\0\72\0\126\0\73\0\126\0\74\0\126\0\75\0\126\0\30\0\126\0\36\0\126\0\44" +
		"\0\126\0\45\0\126\0\56\0\126\0\60\0\126\0\62\0\126\0\63\0\126\0\64\0\126\0\65\0\126" +
		"\0\67\0\126\0\76\0\126\0\77\0\126\0\uffff\uffff\ufffe\uffff\46\0\127\0\47\0\127\0" +
		"\50\0\127\0\51\0\127\0\52\0\127\0\72\0\127\0\73\0\127\0\74\0\127\0\75\0\127\0\30" +
		"\0\127\0\36\0\127\0\44\0\127\0\45\0\127\0\56\0\127\0\60\0\127\0\62\0\127\0\63\0\127" +
		"\0\64\0\127\0\65\0\127\0\67\0\127\0\76\0\127\0\77\0\127\0\uffff\uffff\ufffe\uffff" +
		"\46\0\130\0\47\0\130\0\50\0\130\0\51\0\130\0\52\0\130\0\72\0\130\0\73\0\130\0\74" +
		"\0\130\0\75\0\130\0\30\0\130\0\36\0\130\0\44\0\130\0\45\0\130\0\56\0\130\0\60\0\130" +
		"\0\62\0\130\0\63\0\130\0\64\0\130\0\65\0\130\0\67\0\130\0\76\0\130\0\77\0\130\0\uffff" +
		"\uffff\ufffe\uffff\46\0\uffff\uffff\47\0\uffff\uffff\50\0\uffff\uffff\51\0\uffff" +
		"\uffff\52\0\uffff\uffff\72\0\135\0\73\0\135\0\74\0\135\0\75\0\135\0\30\0\135\0\36" +
		"\0\135\0\44\0\135\0\45\0\135\0\56\0\135\0\60\0\135\0\62\0\135\0\63\0\135\0\64\0\135" +
		"\0\65\0\135\0\67\0\135\0\76\0\135\0\77\0\135\0\uffff\uffff\ufffe\uffff\46\0\uffff" +
		"\uffff\47\0\uffff\uffff\50\0\uffff\uffff\51\0\uffff\uffff\52\0\uffff\uffff\72\0\136" +
		"\0\73\0\136\0\74\0\136\0\75\0\136\0\30\0\136\0\36\0\136\0\44\0\136\0\45\0\136\0\56" +
		"\0\136\0\60\0\136\0\62\0\136\0\63\0\136\0\64\0\136\0\65\0\136\0\67\0\136\0\76\0\136" +
		"\0\77\0\136\0\uffff\uffff\ufffe\uffff\46\0\uffff\uffff\47\0\uffff\uffff\50\0\uffff" +
		"\uffff\51\0\uffff\uffff\52\0\uffff\uffff\72\0\133\0\73\0\133\0\74\0\133\0\75\0\133" +
		"\0\30\0\133\0\36\0\133\0\44\0\133\0\45\0\133\0\56\0\133\0\60\0\133\0\62\0\133\0\63" +
		"\0\133\0\64\0\133\0\65\0\133\0\67\0\133\0\76\0\133\0\77\0\133\0\uffff\uffff\ufffe" +
		"\uffff\46\0\uffff\uffff\47\0\uffff\uffff\50\0\uffff\uffff\51\0\uffff\uffff\52\0\uffff" +
		"\uffff\72\0\134\0\73\0\134\0\74\0\134\0\75\0\134\0\30\0\134\0\36\0\134\0\44\0\134" +
		"\0\45\0\134\0\56\0\134\0\60\0\134\0\62\0\134\0\63\0\134\0\64\0\134\0\65\0\134\0\67" +
		"\0\134\0\76\0\134\0\77\0\134\0\uffff\uffff\ufffe\uffff\61\0\uffff\uffff\30\0\140" +
		"\0\36\0\140\0\44\0\140\0\45\0\140\0\56\0\140\0\60\0\140\0\62\0\140\0\63\0\140\0\64" +
		"\0\140\0\65\0\140\0\67\0\140\0\76\0\140\0\77\0\140\0\uffff\uffff\ufffe\uffff\30\0" +
		"\uffff\uffff\36\0\143\0\44\0\143\0\45\0\143\0\56\0\143\0\60\0\143\0\62\0\143\0\63" +
		"\0\143\0\64\0\143\0\65\0\143\0\67\0\143\0\76\0\143\0\77\0\143\0\uffff\uffff\ufffe" +
		"\uffff\30\0\uffff\uffff\36\0\144\0\44\0\144\0\45\0\144\0\56\0\144\0\60\0\144\0\62" +
		"\0\144\0\63\0\144\0\64\0\144\0\65\0\144\0\67\0\144\0\76\0\144\0\77\0\144\0\uffff" +
		"\uffff\ufffe\uffff\63\0\146\0\64\0\146\0\36\0\146\0\44\0\146\0\45\0\146\0\56\0\146" +
		"\0\60\0\146\0\62\0\146\0\76\0\146\0\77\0\146\0\uffff\uffff\ufffe\uffff\63\0\uffff" +
		"\uffff\64\0\147\0\36\0\147\0\44\0\147\0\45\0\147\0\56\0\147\0\60\0\147\0\62\0\147" +
		"\0\76\0\147\0\77\0\147\0\uffff\uffff\ufffe\uffff\36\0\uffff\uffff\62\0\uffff\uffff" +
		"\44\0\205\0\45\0\205\0\uffff\uffff\ufffe\uffff\62\0\uffff\uffff\60\0\206\0\uffff" +
		"\uffff\ufffe\uffff\7\0\uffff\uffff\10\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff" +
		"\32\0\uffff\uffff\33\0\uffff\uffff\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff" +
		"\47\0\uffff\uffff\53\0\uffff\uffff\55\0\uffff\uffff\57\0\uffff\uffff\60\0\201\0\uffff" +
		"\uffff\ufffe\uffff\7\0\uffff\uffff\10\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff" +
		"\32\0\uffff\uffff\33\0\uffff\uffff\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff" +
		"\47\0\uffff\uffff\53\0\uffff\uffff\55\0\uffff\uffff\57\0\uffff\uffff\60\0\201\0\uffff" +
		"\uffff\ufffe\uffff\62\0\uffff\uffff\44\0\43\0\45\0\43\0\uffff\uffff\ufffe\uffff\54" +
		"\0\uffff\uffff\57\0\uffff\uffff\30\0\67\0\46\0\67\0\47\0\67\0\50\0\67\0\51\0\67\0" +
		"\52\0\67\0\55\0\67\0\60\0\67\0\61\0\67\0\62\0\67\0\63\0\67\0\64\0\67\0\65\0\67\0" +
		"\67\0\67\0\70\0\67\0\72\0\67\0\73\0\67\0\74\0\67\0\75\0\67\0\77\0\67\0\uffff\uffff" +
		"\ufffe\uffff\62\0\uffff\uffff\44\0\64\0\45\0\64\0\uffff\uffff\ufffe\uffff\7\0\uffff" +
		"\uffff\10\0\uffff\uffff\11\0\uffff\uffff\20\0\uffff\uffff\32\0\uffff\uffff\33\0\uffff" +
		"\uffff\40\0\uffff\uffff\41\0\uffff\uffff\43\0\uffff\uffff\47\0\uffff\uffff\53\0\uffff" +
		"\uffff\55\0\uffff\uffff\57\0\uffff\uffff\60\0\201\0\uffff\uffff\ufffe\uffff\36\0" +
		"\uffff\uffff\44\0\205\0\45\0\205\0\uffff\uffff\ufffe\uffff");

	private static final int[] tmGoto = TemplatesLexer.unpack_int(123,
		"\0\0\4\0\44\0\76\0\130\0\162\0\222\0\234\0\u0122\0\u018a\0\u01f4\0\u01fe\0\u0202" +
		"\0\u0206\0\u020e\0\u0212\0\u021c\0\u0284\0\u0290\0\u029a\0\u02a4\0\u02a4\0\u02b0" +
		"\0\u02b4\0\u02b4\0\u02ba\0\u02ba\0\u0322\0\u038a\0\u038c\0\u0396\0\u039a\0\u039c" +
		"\0\u0404\0\u046c\0\u0476\0\u04de\0\u04f6\0\u0508\0\u051c\0\u0598\0\u05ac\0\u05c0" +
		"\0\u05d4\0\u063c\0\u063e\0\u06aa\0\u06b2\0\u0732\0\u0746\0\u0754\0\u0780\0\u0786" +
		"\0\u078c\0\u078e\0\u0798\0\u079a\0\u079c\0\u07a4\0\u07b8\0\u07cc\0\u07e0\0\u07f4" +
		"\0\u07fc\0\u07fe\0\u07fe\0\u0808\0\u080a\0\u080c\0\u0810\0\u0814\0\u0818\0\u081c" +
		"\0\u0820\0\u0824\0\u0828\0\u082c\0\u0838\0\u084a\0\u0864\0\u087e\0\u0888\0\u088a" +
		"\0\u0896\0\u0898\0\u089a\0\u08b4\0\u08b8\0\u08d2\0\u08d4\0\u08d8\0\u08f2\0\u08fc" +
		"\0\u0900\0\u090a\0\u0972\0\u09da\0\u0a42\0\u0a46\0\u0a4c\0\u0ab4\0\u0b1c\0\u0b80" +
		"\0\u0bd2\0\u0c20\0\u0c6e\0\u0cb8\0\u0ce2\0\u0d0a\0\u0d16\0\u0d18\0\u0d22\0\u0d24" +
		"\0\u0d28\0\u0d2c\0\u0d30\0\u0d32\0\u0d34\0\u0d36\0\u0d42\0\u0d44\0\u0d48\0\u0d4a" +
		"\0");

	private static final int[] tmFromTo = TemplatesLexer.unpack_int(3402,
		"\u0103\0\u0105\0\u0104\0\u0106\0\0\0\2\0\1\0\12\0\4\0\2\0\10\0\12\0\17\0\12\0\24" +
		"\0\12\0\34\0\12\0\103\0\12\0\212\0\275\0\313\0\12\0\326\0\12\0\341\0\12\0\360\0\12" +
		"\0\371\0\12\0\374\0\12\0\u0101\0\12\0\1\0\13\0\10\0\13\0\17\0\13\0\24\0\13\0\34\0" +
		"\13\0\103\0\13\0\313\0\13\0\326\0\13\0\341\0\13\0\360\0\13\0\371\0\13\0\374\0\13" +
		"\0\u0101\0\13\0\1\0\14\0\10\0\14\0\17\0\14\0\24\0\14\0\34\0\14\0\103\0\14\0\313\0" +
		"\14\0\326\0\14\0\341\0\14\0\360\0\14\0\371\0\14\0\374\0\14\0\u0101\0\14\0\1\0\15" +
		"\0\10\0\15\0\17\0\15\0\24\0\15\0\34\0\15\0\103\0\15\0\313\0\15\0\326\0\15\0\341\0" +
		"\15\0\360\0\15\0\371\0\15\0\374\0\15\0\u0101\0\15\0\0\0\3\0\1\0\16\0\4\0\3\0\10\0" +
		"\32\0\17\0\16\0\24\0\16\0\34\0\32\0\103\0\165\0\276\0\325\0\313\0\16\0\326\0\346" +
		"\0\341\0\361\0\360\0\16\0\371\0\165\0\374\0\16\0\u0101\0\361\0\103\0\166\0\326\0" +
		"\166\0\341\0\166\0\371\0\166\0\u0101\0\166\0\16\0\35\0\26\0\104\0\32\0\35\0\40\0" +
		"\104\0\41\0\114\0\43\0\116\0\44\0\35\0\45\0\120\0\46\0\35\0\47\0\104\0\51\0\35\0" +
		"\54\0\35\0\56\0\114\0\57\0\114\0\60\0\130\0\61\0\35\0\106\0\104\0\111\0\114\0\112" +
		"\0\114\0\125\0\213\0\142\0\35\0\143\0\230\0\144\0\104\0\145\0\114\0\146\0\114\0\147" +
		"\0\114\0\150\0\114\0\151\0\114\0\152\0\114\0\153\0\114\0\154\0\114\0\155\0\114\0" +
		"\156\0\104\0\157\0\114\0\160\0\114\0\161\0\114\0\162\0\114\0\163\0\114\0\164\0\35" +
		"\0\165\0\35\0\171\0\213\0\172\0\257\0\201\0\114\0\204\0\114\0\210\0\35\0\211\0\272" +
		"\0\221\0\114\0\223\0\302\0\224\0\114\0\231\0\35\0\264\0\35\0\270\0\114\0\277\0\330" +
		"\0\300\0\35\0\305\0\333\0\307\0\114\0\310\0\114\0\312\0\35\0\315\0\35\0\321\0\35" +
		"\0\332\0\114\0\343\0\114\0\345\0\35\0\346\0\35\0\354\0\35\0\356\0\114\0\361\0\35" +
		"\0\16\0\36\0\32\0\36\0\41\0\36\0\44\0\36\0\46\0\36\0\51\0\36\0\54\0\36\0\56\0\36" +
		"\0\57\0\36\0\60\0\36\0\61\0\36\0\111\0\36\0\112\0\36\0\142\0\36\0\145\0\36\0\146" +
		"\0\36\0\147\0\36\0\150\0\36\0\151\0\36\0\152\0\36\0\153\0\36\0\154\0\36\0\155\0\36" +
		"\0\157\0\36\0\160\0\36\0\161\0\36\0\162\0\36\0\163\0\36\0\164\0\36\0\165\0\36\0\201" +
		"\0\36\0\204\0\36\0\210\0\36\0\221\0\36\0\224\0\36\0\231\0\36\0\264\0\36\0\270\0\36" +
		"\0\300\0\36\0\305\0\36\0\307\0\36\0\310\0\36\0\312\0\36\0\315\0\36\0\321\0\36\0\332" +
		"\0\36\0\343\0\36\0\345\0\36\0\346\0\36\0\354\0\36\0\356\0\36\0\361\0\36\0\16\0\37" +
		"\0\32\0\37\0\41\0\37\0\44\0\37\0\46\0\37\0\51\0\37\0\54\0\37\0\56\0\37\0\57\0\37" +
		"\0\60\0\37\0\61\0\37\0\111\0\37\0\112\0\37\0\142\0\37\0\145\0\37\0\146\0\37\0\147" +
		"\0\37\0\150\0\37\0\151\0\37\0\152\0\37\0\153\0\37\0\154\0\37\0\155\0\37\0\156\0\244" +
		"\0\157\0\37\0\160\0\37\0\161\0\37\0\162\0\37\0\163\0\37\0\164\0\37\0\165\0\37\0\201" +
		"\0\37\0\204\0\37\0\210\0\37\0\221\0\37\0\224\0\37\0\231\0\37\0\264\0\37\0\270\0\37" +
		"\0\300\0\37\0\305\0\37\0\307\0\37\0\310\0\37\0\312\0\37\0\315\0\37\0\321\0\37\0\332" +
		"\0\37\0\343\0\37\0\345\0\37\0\346\0\37\0\354\0\37\0\356\0\37\0\361\0\37\0\16\0\40" +
		"\0\32\0\40\0\165\0\40\0\346\0\40\0\361\0\40\0\3\0\25\0\55\0\25\0\325\0\345\0\346" +
		"\0\345\0\32\0\107\0\165\0\254\0\346\0\254\0\361\0\254\0\165\0\255\0\346\0\366\0\16" +
		"\0\41\0\32\0\41\0\165\0\41\0\346\0\41\0\361\0\41\0\16\0\42\0\32\0\42\0\41\0\42\0" +
		"\44\0\42\0\46\0\42\0\51\0\42\0\54\0\42\0\56\0\42\0\57\0\42\0\60\0\42\0\61\0\42\0" +
		"\111\0\42\0\112\0\42\0\142\0\42\0\145\0\42\0\146\0\42\0\147\0\42\0\150\0\42\0\151" +
		"\0\42\0\152\0\42\0\153\0\42\0\154\0\42\0\155\0\42\0\157\0\42\0\160\0\42\0\161\0\42" +
		"\0\162\0\42\0\163\0\42\0\164\0\42\0\165\0\42\0\201\0\42\0\204\0\42\0\210\0\42\0\221" +
		"\0\42\0\224\0\42\0\231\0\42\0\264\0\42\0\270\0\42\0\300\0\42\0\305\0\42\0\307\0\42" +
		"\0\310\0\42\0\312\0\42\0\315\0\42\0\321\0\42\0\332\0\42\0\343\0\42\0\345\0\42\0\346" +
		"\0\42\0\354\0\42\0\356\0\42\0\361\0\42\0\16\0\43\0\32\0\43\0\165\0\43\0\203\0\264" +
		"\0\346\0\43\0\361\0\43\0\16\0\44\0\32\0\44\0\165\0\44\0\346\0\44\0\361\0\44\0\16" +
		"\0\45\0\32\0\45\0\165\0\45\0\346\0\45\0\361\0\45\0\16\0\46\0\32\0\46\0\165\0\46\0" +
		"\255\0\312\0\346\0\46\0\361\0\46\0\116\0\207\0\120\0\210\0\73\0\156\0\246\0\156\0" +
		"\247\0\156\0\16\0\47\0\32\0\47\0\41\0\47\0\44\0\47\0\46\0\47\0\51\0\47\0\54\0\47" +
		"\0\56\0\47\0\57\0\47\0\60\0\47\0\61\0\47\0\111\0\47\0\112\0\47\0\142\0\47\0\145\0" +
		"\47\0\146\0\47\0\147\0\47\0\150\0\47\0\151\0\47\0\152\0\47\0\153\0\47\0\154\0\47" +
		"\0\155\0\47\0\157\0\47\0\160\0\47\0\161\0\47\0\162\0\47\0\163\0\47\0\164\0\47\0\165" +
		"\0\47\0\201\0\47\0\204\0\47\0\210\0\47\0\221\0\47\0\224\0\47\0\231\0\47\0\264\0\47" +
		"\0\270\0\47\0\300\0\47\0\305\0\47\0\307\0\47\0\310\0\47\0\312\0\47\0\315\0\47\0\321" +
		"\0\47\0\332\0\47\0\343\0\47\0\345\0\47\0\346\0\47\0\354\0\47\0\356\0\47\0\361\0\47" +
		"\0\16\0\50\0\32\0\50\0\41\0\50\0\44\0\50\0\46\0\50\0\51\0\50\0\54\0\50\0\56\0\50" +
		"\0\57\0\50\0\60\0\50\0\61\0\50\0\111\0\50\0\112\0\50\0\142\0\50\0\145\0\50\0\146" +
		"\0\50\0\147\0\50\0\150\0\50\0\151\0\50\0\152\0\50\0\153\0\50\0\154\0\50\0\155\0\50" +
		"\0\157\0\50\0\160\0\50\0\161\0\50\0\162\0\50\0\163\0\50\0\164\0\50\0\165\0\50\0\201" +
		"\0\50\0\204\0\50\0\210\0\50\0\221\0\50\0\224\0\50\0\231\0\50\0\264\0\50\0\270\0\50" +
		"\0\300\0\50\0\305\0\50\0\307\0\50\0\310\0\50\0\312\0\50\0\315\0\50\0\321\0\50\0\332" +
		"\0\50\0\343\0\50\0\345\0\50\0\346\0\50\0\354\0\50\0\356\0\50\0\361\0\50\0\30\0\106" +
		"\0\16\0\51\0\32\0\51\0\165\0\51\0\346\0\51\0\361\0\51\0\271\0\321\0\372\0\321\0\3" +
		"\0\26\0\16\0\52\0\32\0\52\0\41\0\52\0\44\0\52\0\46\0\52\0\51\0\52\0\54\0\52\0\56" +
		"\0\52\0\57\0\52\0\60\0\52\0\61\0\52\0\111\0\52\0\112\0\52\0\142\0\52\0\145\0\52\0" +
		"\146\0\52\0\147\0\52\0\150\0\52\0\151\0\52\0\152\0\52\0\153\0\52\0\154\0\52\0\155" +
		"\0\52\0\157\0\52\0\160\0\52\0\161\0\52\0\162\0\52\0\163\0\52\0\164\0\52\0\165\0\52" +
		"\0\201\0\52\0\204\0\52\0\210\0\52\0\221\0\52\0\224\0\52\0\231\0\52\0\264\0\52\0\270" +
		"\0\52\0\300\0\52\0\305\0\52\0\307\0\52\0\310\0\52\0\312\0\52\0\315\0\52\0\321\0\52" +
		"\0\332\0\52\0\343\0\52\0\345\0\52\0\346\0\52\0\354\0\52\0\356\0\52\0\361\0\52\0\16" +
		"\0\53\0\32\0\53\0\41\0\53\0\44\0\53\0\46\0\53\0\51\0\53\0\54\0\53\0\56\0\53\0\57" +
		"\0\53\0\60\0\53\0\61\0\53\0\111\0\53\0\112\0\53\0\142\0\53\0\145\0\53\0\146\0\53" +
		"\0\147\0\53\0\150\0\53\0\151\0\53\0\152\0\53\0\153\0\53\0\154\0\53\0\155\0\53\0\157" +
		"\0\53\0\160\0\53\0\161\0\53\0\162\0\53\0\163\0\53\0\164\0\53\0\165\0\53\0\201\0\53" +
		"\0\204\0\53\0\210\0\53\0\221\0\53\0\224\0\53\0\231\0\53\0\264\0\53\0\270\0\53\0\300" +
		"\0\53\0\305\0\53\0\307\0\53\0\310\0\53\0\312\0\53\0\315\0\53\0\321\0\53\0\332\0\53" +
		"\0\343\0\53\0\345\0\53\0\346\0\53\0\354\0\53\0\356\0\53\0\361\0\53\0\16\0\54\0\32" +
		"\0\54\0\165\0\54\0\346\0\54\0\361\0\54\0\16\0\55\0\32\0\55\0\41\0\55\0\44\0\55\0" +
		"\46\0\55\0\51\0\55\0\54\0\55\0\56\0\55\0\57\0\55\0\60\0\55\0\61\0\55\0\111\0\55\0" +
		"\112\0\55\0\142\0\55\0\145\0\55\0\146\0\55\0\147\0\55\0\150\0\55\0\151\0\55\0\152" +
		"\0\55\0\153\0\55\0\154\0\55\0\155\0\55\0\157\0\55\0\160\0\55\0\161\0\55\0\162\0\55" +
		"\0\163\0\55\0\164\0\55\0\165\0\55\0\201\0\55\0\204\0\55\0\210\0\55\0\221\0\55\0\224" +
		"\0\55\0\231\0\55\0\264\0\55\0\270\0\55\0\300\0\55\0\305\0\55\0\307\0\55\0\310\0\55" +
		"\0\312\0\55\0\315\0\55\0\321\0\55\0\332\0\55\0\343\0\55\0\345\0\55\0\346\0\55\0\354" +
		"\0\55\0\356\0\55\0\361\0\55\0\63\0\136\0\64\0\136\0\107\0\176\0\123\0\136\0\174\0" +
		"\136\0\254\0\136\0\255\0\136\0\331\0\352\0\340\0\136\0\342\0\363\0\365\0\136\0\366" +
		"\0\136\0\63\0\137\0\64\0\137\0\123\0\137\0\174\0\137\0\254\0\137\0\255\0\137\0\340" +
		"\0\137\0\365\0\137\0\366\0\137\0\72\0\145\0\233\0\145\0\234\0\145\0\235\0\145\0\236" +
		"\0\145\0\237\0\145\0\240\0\145\0\241\0\145\0\242\0\145\0\243\0\145\0\16\0\56\0\32" +
		"\0\56\0\41\0\56\0\44\0\56\0\46\0\56\0\51\0\56\0\54\0\56\0\56\0\56\0\57\0\56\0\60" +
		"\0\56\0\61\0\56\0\72\0\146\0\111\0\56\0\112\0\56\0\142\0\56\0\145\0\56\0\146\0\56" +
		"\0\147\0\56\0\150\0\56\0\151\0\56\0\152\0\56\0\153\0\56\0\154\0\56\0\155\0\56\0\157" +
		"\0\56\0\160\0\56\0\161\0\56\0\162\0\56\0\163\0\56\0\164\0\56\0\165\0\56\0\201\0\56" +
		"\0\204\0\56\0\210\0\56\0\221\0\56\0\224\0\56\0\231\0\56\0\233\0\146\0\234\0\146\0" +
		"\235\0\146\0\236\0\146\0\237\0\146\0\240\0\146\0\241\0\146\0\242\0\146\0\243\0\146" +
		"\0\264\0\56\0\270\0\56\0\300\0\56\0\305\0\56\0\307\0\56\0\310\0\56\0\312\0\56\0\315" +
		"\0\56\0\321\0\56\0\332\0\56\0\343\0\56\0\345\0\56\0\346\0\56\0\354\0\56\0\356\0\56" +
		"\0\361\0\56\0\72\0\147\0\233\0\147\0\234\0\147\0\235\0\147\0\236\0\147\0\237\0\147" +
		"\0\240\0\147\0\241\0\147\0\242\0\147\0\243\0\147\0\72\0\150\0\233\0\150\0\234\0\150" +
		"\0\235\0\150\0\236\0\150\0\237\0\150\0\240\0\150\0\241\0\150\0\242\0\150\0\243\0" +
		"\150\0\72\0\151\0\233\0\151\0\234\0\151\0\235\0\151\0\236\0\151\0\237\0\151\0\240" +
		"\0\151\0\241\0\151\0\242\0\151\0\243\0\151\0\16\0\57\0\32\0\57\0\41\0\57\0\44\0\57" +
		"\0\46\0\57\0\51\0\57\0\54\0\57\0\56\0\57\0\57\0\57\0\60\0\57\0\61\0\57\0\111\0\57" +
		"\0\112\0\57\0\142\0\57\0\145\0\57\0\146\0\57\0\147\0\57\0\150\0\57\0\151\0\57\0\152" +
		"\0\57\0\153\0\57\0\154\0\57\0\155\0\57\0\157\0\57\0\160\0\57\0\161\0\57\0\162\0\57" +
		"\0\163\0\57\0\164\0\57\0\165\0\57\0\201\0\57\0\204\0\57\0\210\0\57\0\221\0\57\0\224" +
		"\0\57\0\231\0\57\0\264\0\57\0\270\0\57\0\300\0\57\0\305\0\57\0\307\0\57\0\310\0\57" +
		"\0\312\0\57\0\315\0\57\0\321\0\57\0\332\0\57\0\343\0\57\0\345\0\57\0\346\0\57\0\354" +
		"\0\57\0\356\0\57\0\361\0\57\0\333\0\354\0\16\0\60\0\32\0\60\0\41\0\60\0\44\0\60\0" +
		"\46\0\60\0\51\0\60\0\54\0\60\0\56\0\60\0\57\0\60\0\60\0\60\0\61\0\60\0\65\0\142\0" +
		"\111\0\60\0\112\0\60\0\142\0\60\0\145\0\60\0\146\0\60\0\147\0\60\0\150\0\60\0\151" +
		"\0\60\0\152\0\60\0\153\0\60\0\154\0\60\0\155\0\60\0\157\0\60\0\160\0\60\0\161\0\60" +
		"\0\162\0\60\0\163\0\60\0\164\0\60\0\165\0\60\0\201\0\60\0\204\0\60\0\207\0\270\0" +
		"\210\0\60\0\221\0\60\0\224\0\60\0\231\0\60\0\264\0\60\0\270\0\60\0\300\0\60\0\305" +
		"\0\60\0\307\0\60\0\310\0\60\0\312\0\60\0\315\0\60\0\321\0\60\0\332\0\60\0\343\0\60" +
		"\0\345\0\60\0\346\0\60\0\354\0\60\0\356\0\60\0\361\0\60\0\131\0\222\0\134\0\225\0" +
		"\227\0\304\0\364\0\372\0\16\0\61\0\32\0\61\0\35\0\111\0\41\0\61\0\44\0\61\0\46\0" +
		"\61\0\51\0\61\0\54\0\61\0\56\0\61\0\57\0\61\0\60\0\61\0\61\0\61\0\105\0\171\0\111" +
		"\0\61\0\112\0\61\0\113\0\201\0\114\0\111\0\122\0\211\0\130\0\111\0\142\0\61\0\144" +
		"\0\231\0\145\0\61\0\146\0\61\0\147\0\61\0\150\0\61\0\151\0\61\0\152\0\61\0\153\0" +
		"\61\0\154\0\61\0\155\0\61\0\157\0\61\0\160\0\61\0\161\0\61\0\162\0\61\0\163\0\61" +
		"\0\164\0\61\0\165\0\61\0\175\0\171\0\201\0\61\0\204\0\61\0\210\0\61\0\221\0\61\0" +
		"\224\0\61\0\230\0\305\0\231\0\61\0\232\0\307\0\264\0\61\0\270\0\61\0\300\0\61\0\305" +
		"\0\61\0\307\0\61\0\310\0\61\0\312\0\61\0\315\0\61\0\321\0\61\0\332\0\61\0\333\0\111" +
		"\0\335\0\356\0\343\0\61\0\345\0\61\0\346\0\61\0\354\0\61\0\356\0\61\0\361\0\61\0" +
		"\135\0\226\0\177\0\262\0\256\0\314\0\263\0\316\0\274\0\324\0\306\0\335\0\334\0\355" +
		"\0\336\0\357\0\367\0\375\0\370\0\376\0\65\0\143\0\105\0\172\0\113\0\172\0\122\0\172" +
		"\0\175\0\172\0\232\0\172\0\245\0\172\0\100\0\164\0\115\0\204\0\117\0\164\0\121\0" +
		"\164\0\123\0\164\0\124\0\164\0\131\0\223\0\133\0\224\0\135\0\164\0\214\0\277\0\227" +
		"\0\164\0\271\0\164\0\273\0\223\0\306\0\164\0\317\0\164\0\320\0\343\0\331\0\164\0" +
		"\340\0\164\0\342\0\164\0\344\0\164\0\365\0\164\0\367\0\164\0\75\0\161\0\250\0\161" +
		"\0\251\0\161\0\75\0\162\0\250\0\162\0\251\0\162\0\74\0\157\0\35\0\112\0\130\0\216" +
		"\0\261\0\315\0\272\0\216\0\302\0\216\0\74\0\160\0\65\0\144\0\130\0\217\0\215\0\300" +
		"\0\272\0\217\0\302\0\217\0\72\0\152\0\233\0\152\0\234\0\152\0\235\0\152\0\236\0\152" +
		"\0\237\0\152\0\240\0\152\0\241\0\152\0\242\0\152\0\243\0\152\0\72\0\153\0\233\0\153" +
		"\0\234\0\153\0\235\0\153\0\236\0\153\0\237\0\153\0\240\0\153\0\241\0\153\0\242\0" +
		"\153\0\243\0\153\0\72\0\154\0\233\0\154\0\234\0\154\0\235\0\154\0\236\0\154\0\237" +
		"\0\154\0\240\0\154\0\241\0\154\0\242\0\154\0\243\0\154\0\72\0\155\0\233\0\155\0\234" +
		"\0\155\0\235\0\155\0\236\0\155\0\237\0\155\0\240\0\155\0\241\0\155\0\242\0\155\0" +
		"\243\0\155\0\130\0\220\0\252\0\310\0\272\0\220\0\302\0\220\0\75\0\163\0\16\0\62\0" +
		"\32\0\62\0\165\0\62\0\346\0\62\0\361\0\62\0\0\0\u0103\0\0\0\4\0\0\0\5\0\4\0\31\0" +
		"\0\0\6\0\4\0\6\0\0\0\7\0\4\0\7\0\3\0\27\0\55\0\27\0\0\0\10\0\4\0\10\0\105\0\173\0" +
		"\175\0\173\0\125\0\214\0\171\0\214\0\10\0\33\0\34\0\110\0\1\0\17\0\10\0\34\0\24\0" +
		"\103\0\313\0\341\0\360\0\371\0\374\0\u0101\0\63\0\140\0\64\0\141\0\123\0\212\0\174" +
		"\0\260\0\254\0\311\0\255\0\313\0\340\0\360\0\365\0\373\0\366\0\374\0\1\0\20\0\10" +
		"\0\20\0\17\0\102\0\24\0\20\0\34\0\102\0\103\0\102\0\313\0\20\0\326\0\347\0\341\0" +
		"\102\0\360\0\20\0\371\0\102\0\374\0\20\0\u0101\0\102\0\1\0\21\0\10\0\21\0\17\0\21" +
		"\0\24\0\21\0\34\0\21\0\103\0\21\0\313\0\21\0\326\0\21\0\341\0\21\0\360\0\21\0\371" +
		"\0\21\0\374\0\21\0\u0101\0\21\0\16\0\63\0\32\0\63\0\165\0\63\0\346\0\63\0\361\0\63" +
		"\0\115\0\205\0\26\0\105\0\40\0\113\0\47\0\122\0\106\0\175\0\144\0\232\0\156\0\245" +
		"\0\203\0\265\0\113\0\202\0\1\0\22\0\10\0\22\0\17\0\22\0\24\0\22\0\34\0\22\0\103\0" +
		"\22\0\313\0\22\0\326\0\22\0\341\0\22\0\360\0\22\0\371\0\22\0\374\0\22\0\u0101\0\22" +
		"\0\103\0\167\0\371\0\377\0\1\0\23\0\10\0\23\0\17\0\23\0\24\0\23\0\34\0\23\0\103\0" +
		"\23\0\313\0\23\0\326\0\23\0\341\0\23\0\360\0\23\0\371\0\23\0\374\0\23\0\u0101\0\23" +
		"\0\276\0\326\0\276\0\327\0\326\0\350\0\1\0\24\0\10\0\24\0\17\0\24\0\24\0\24\0\34" +
		"\0\24\0\103\0\24\0\313\0\24\0\326\0\24\0\341\0\24\0\360\0\24\0\371\0\24\0\374\0\24" +
		"\0\u0101\0\24\0\16\0\64\0\32\0\64\0\165\0\64\0\346\0\64\0\361\0\64\0\271\0\322\0" +
		"\372\0\322\0\103\0\170\0\326\0\351\0\341\0\362\0\371\0\170\0\u0101\0\u0102\0\16\0" +
		"\65\0\32\0\65\0\41\0\65\0\44\0\65\0\46\0\65\0\51\0\65\0\54\0\65\0\56\0\65\0\57\0" +
		"\65\0\60\0\65\0\61\0\65\0\111\0\65\0\112\0\65\0\142\0\65\0\145\0\65\0\146\0\65\0" +
		"\147\0\65\0\150\0\65\0\151\0\65\0\152\0\65\0\153\0\65\0\154\0\65\0\155\0\65\0\157" +
		"\0\65\0\160\0\65\0\161\0\65\0\162\0\65\0\163\0\65\0\164\0\65\0\165\0\65\0\201\0\65" +
		"\0\204\0\65\0\210\0\65\0\221\0\65\0\224\0\65\0\231\0\65\0\264\0\65\0\270\0\65\0\300" +
		"\0\65\0\305\0\65\0\307\0\65\0\310\0\65\0\312\0\65\0\315\0\65\0\321\0\65\0\332\0\65" +
		"\0\343\0\65\0\345\0\65\0\346\0\65\0\354\0\65\0\356\0\65\0\361\0\65\0\16\0\66\0\32" +
		"\0\66\0\41\0\66\0\44\0\66\0\46\0\66\0\51\0\66\0\54\0\66\0\56\0\66\0\57\0\66\0\60" +
		"\0\66\0\61\0\66\0\111\0\66\0\112\0\66\0\142\0\66\0\145\0\66\0\146\0\66\0\147\0\66" +
		"\0\150\0\66\0\151\0\66\0\152\0\66\0\153\0\66\0\154\0\66\0\155\0\66\0\157\0\66\0\160" +
		"\0\66\0\161\0\66\0\162\0\66\0\163\0\66\0\164\0\66\0\165\0\66\0\201\0\66\0\204\0\66" +
		"\0\210\0\66\0\221\0\66\0\224\0\66\0\231\0\66\0\264\0\66\0\270\0\66\0\300\0\66\0\305" +
		"\0\66\0\307\0\66\0\310\0\66\0\312\0\66\0\315\0\66\0\321\0\66\0\332\0\66\0\343\0\66" +
		"\0\345\0\66\0\346\0\66\0\354\0\66\0\356\0\66\0\361\0\66\0\16\0\67\0\32\0\67\0\41" +
		"\0\67\0\44\0\67\0\46\0\67\0\51\0\67\0\54\0\67\0\56\0\67\0\57\0\67\0\60\0\67\0\61" +
		"\0\67\0\111\0\67\0\112\0\67\0\142\0\67\0\145\0\67\0\146\0\67\0\147\0\67\0\150\0\67" +
		"\0\151\0\67\0\152\0\67\0\153\0\67\0\154\0\67\0\155\0\67\0\157\0\67\0\160\0\67\0\161" +
		"\0\67\0\162\0\67\0\163\0\67\0\164\0\67\0\165\0\67\0\201\0\67\0\204\0\67\0\210\0\67" +
		"\0\221\0\67\0\224\0\67\0\231\0\67\0\264\0\67\0\270\0\67\0\300\0\67\0\305\0\67\0\307" +
		"\0\67\0\310\0\67\0\312\0\67\0\315\0\67\0\321\0\67\0\332\0\67\0\343\0\67\0\345\0\67" +
		"\0\346\0\67\0\354\0\67\0\356\0\67\0\361\0\67\0\60\0\131\0\211\0\273\0\130\0\221\0" +
		"\272\0\221\0\302\0\332\0\16\0\70\0\32\0\70\0\41\0\70\0\44\0\70\0\46\0\70\0\51\0\70" +
		"\0\54\0\70\0\56\0\70\0\57\0\70\0\60\0\70\0\61\0\70\0\111\0\70\0\112\0\70\0\142\0" +
		"\70\0\145\0\70\0\146\0\70\0\147\0\70\0\150\0\70\0\151\0\70\0\152\0\70\0\153\0\70" +
		"\0\154\0\70\0\155\0\70\0\157\0\70\0\160\0\70\0\161\0\70\0\162\0\70\0\163\0\70\0\164" +
		"\0\70\0\165\0\70\0\201\0\70\0\204\0\70\0\210\0\70\0\221\0\70\0\224\0\70\0\231\0\70" +
		"\0\264\0\70\0\270\0\70\0\300\0\70\0\305\0\70\0\307\0\70\0\310\0\70\0\312\0\70\0\315" +
		"\0\70\0\321\0\70\0\332\0\70\0\343\0\70\0\345\0\70\0\346\0\70\0\354\0\70\0\356\0\70" +
		"\0\361\0\70\0\16\0\71\0\32\0\71\0\41\0\71\0\44\0\71\0\46\0\71\0\51\0\71\0\54\0\71" +
		"\0\56\0\126\0\57\0\127\0\60\0\71\0\61\0\71\0\111\0\71\0\112\0\71\0\142\0\71\0\145" +
		"\0\71\0\146\0\71\0\147\0\71\0\150\0\71\0\151\0\71\0\152\0\71\0\153\0\71\0\154\0\71" +
		"\0\155\0\71\0\157\0\71\0\160\0\71\0\161\0\71\0\162\0\71\0\163\0\71\0\164\0\71\0\165" +
		"\0\71\0\201\0\71\0\204\0\71\0\210\0\71\0\221\0\71\0\224\0\71\0\231\0\71\0\264\0\71" +
		"\0\270\0\71\0\300\0\71\0\305\0\71\0\307\0\71\0\310\0\71\0\312\0\71\0\315\0\71\0\321" +
		"\0\71\0\332\0\71\0\343\0\71\0\345\0\71\0\346\0\71\0\354\0\71\0\356\0\71\0\361\0\71" +
		"\0\16\0\72\0\32\0\72\0\41\0\72\0\44\0\72\0\46\0\72\0\51\0\72\0\54\0\72\0\60\0\72" +
		"\0\61\0\72\0\111\0\72\0\112\0\72\0\142\0\72\0\145\0\233\0\146\0\234\0\147\0\235\0" +
		"\150\0\236\0\151\0\237\0\152\0\240\0\153\0\241\0\154\0\242\0\155\0\243\0\157\0\72" +
		"\0\160\0\72\0\161\0\72\0\162\0\72\0\163\0\72\0\164\0\72\0\165\0\72\0\201\0\72\0\204" +
		"\0\72\0\210\0\72\0\221\0\72\0\224\0\72\0\231\0\72\0\264\0\72\0\270\0\72\0\300\0\72" +
		"\0\305\0\72\0\307\0\72\0\310\0\72\0\312\0\72\0\315\0\72\0\321\0\72\0\332\0\72\0\343" +
		"\0\72\0\345\0\72\0\346\0\72\0\354\0\72\0\356\0\72\0\361\0\72\0\16\0\73\0\32\0\73" +
		"\0\41\0\73\0\44\0\73\0\46\0\73\0\51\0\73\0\54\0\73\0\60\0\73\0\61\0\73\0\111\0\73" +
		"\0\112\0\73\0\142\0\73\0\157\0\246\0\160\0\247\0\161\0\73\0\162\0\73\0\163\0\73\0" +
		"\164\0\73\0\165\0\73\0\201\0\73\0\204\0\73\0\210\0\73\0\221\0\73\0\224\0\73\0\231" +
		"\0\73\0\264\0\73\0\270\0\73\0\300\0\73\0\305\0\73\0\307\0\73\0\310\0\73\0\312\0\73" +
		"\0\315\0\73\0\321\0\73\0\332\0\73\0\343\0\73\0\345\0\73\0\346\0\73\0\354\0\73\0\356" +
		"\0\73\0\361\0\73\0\16\0\74\0\32\0\74\0\41\0\74\0\44\0\74\0\46\0\74\0\51\0\74\0\54" +
		"\0\74\0\60\0\74\0\61\0\74\0\111\0\74\0\112\0\74\0\142\0\74\0\161\0\74\0\162\0\74" +
		"\0\163\0\74\0\164\0\74\0\165\0\74\0\201\0\74\0\204\0\74\0\210\0\74\0\221\0\74\0\224" +
		"\0\74\0\231\0\74\0\264\0\74\0\270\0\74\0\300\0\74\0\305\0\74\0\307\0\74\0\310\0\74" +
		"\0\312\0\74\0\315\0\74\0\321\0\74\0\332\0\74\0\343\0\74\0\345\0\74\0\346\0\74\0\354" +
		"\0\74\0\356\0\74\0\361\0\74\0\16\0\75\0\32\0\75\0\41\0\75\0\44\0\75\0\46\0\75\0\51" +
		"\0\75\0\54\0\75\0\60\0\75\0\61\0\75\0\111\0\75\0\112\0\75\0\142\0\75\0\161\0\250" +
		"\0\162\0\251\0\163\0\75\0\164\0\75\0\165\0\75\0\201\0\75\0\204\0\75\0\210\0\75\0" +
		"\221\0\75\0\224\0\75\0\231\0\75\0\264\0\75\0\270\0\75\0\300\0\75\0\305\0\75\0\307" +
		"\0\75\0\310\0\75\0\312\0\75\0\315\0\75\0\321\0\75\0\332\0\75\0\343\0\75\0\345\0\75" +
		"\0\346\0\75\0\354\0\75\0\356\0\75\0\361\0\75\0\16\0\76\0\32\0\76\0\41\0\115\0\44" +
		"\0\76\0\46\0\76\0\51\0\76\0\54\0\76\0\60\0\132\0\61\0\76\0\111\0\132\0\112\0\200" +
		"\0\142\0\76\0\163\0\252\0\164\0\76\0\165\0\76\0\201\0\132\0\204\0\267\0\210\0\76" +
		"\0\221\0\301\0\224\0\303\0\231\0\76\0\264\0\76\0\270\0\320\0\300\0\76\0\305\0\132" +
		"\0\307\0\132\0\310\0\337\0\312\0\76\0\315\0\76\0\321\0\76\0\332\0\353\0\343\0\364" +
		"\0\345\0\76\0\346\0\76\0\354\0\76\0\356\0\132\0\361\0\76\0\16\0\77\0\32\0\77\0\44" +
		"\0\77\0\46\0\77\0\51\0\77\0\54\0\77\0\61\0\77\0\142\0\77\0\164\0\253\0\165\0\77\0" +
		"\210\0\77\0\231\0\77\0\264\0\77\0\300\0\77\0\312\0\77\0\315\0\77\0\321\0\77\0\345" +
		"\0\77\0\346\0\77\0\354\0\77\0\361\0\77\0\16\0\100\0\32\0\100\0\44\0\117\0\46\0\121" +
		"\0\51\0\123\0\54\0\124\0\61\0\135\0\142\0\227\0\165\0\100\0\210\0\271\0\231\0\306" +
		"\0\264\0\317\0\300\0\331\0\312\0\340\0\315\0\342\0\321\0\344\0\345\0\365\0\346\0" +
		"\100\0\354\0\367\0\361\0\100\0\60\0\133\0\111\0\133\0\201\0\133\0\305\0\133\0\307" +
		"\0\133\0\356\0\133\0\1\0\u0104\0\16\0\101\0\32\0\101\0\165\0\101\0\346\0\101\0\361" +
		"\0\101\0\0\0\11\0\3\0\30\0\55\0\125\0\105\0\174\0\175\0\261\0\125\0\215\0\171\0\256" +
		"\0\113\0\203\0\203\0\266\0\115\0\206\0\60\0\134\0\111\0\177\0\201\0\263\0\305\0\334" +
		"\0\307\0\336\0\356\0\370\0\212\0\276\0\271\0\323\0\372\0\u0100\0\211\0\274\0");

	private static final int[] tmRuleLen = TemplatesLexer.unpack_int(136,
		"\1\0\1\0\2\0\1\0\1\0\1\0\3\0\2\0\10\0\1\0\5\0\3\0\1\0\3\0\3\0\2\0\1\0\1\0\1\0\1\0" +
		"\1\0\1\0\1\0\1\0\1\0\1\0\3\0\1\0\4\0\3\0\2\0\1\0\2\0\1\0\3\0\2\0\3\0\3\0\7\0\5\0" +
		"\1\0\13\0\7\0\1\0\2\0\2\0\4\0\3\0\5\0\11\0\2\0\2\0\2\0\3\0\1\0\1\0\3\0\1\0\1\0\1" +
		"\0\1\0\1\0\4\0\3\0\6\0\10\0\6\0\10\0\4\0\1\0\1\0\6\0\3\0\3\0\5\0\3\0\5\0\1\0\1\0" +
		"\1\0\1\0\1\0\1\0\2\0\2\0\1\0\3\0\3\0\3\0\3\0\3\0\3\0\3\0\3\0\3\0\1\0\3\0\3\0\1\0" +
		"\3\0\3\0\1\0\3\0\3\0\1\0\5\0\1\0\3\0\1\0\3\0\1\0\3\0\1\0\1\0\1\0\0\0\1\0\0\0\1\0" +
		"\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0");

	private static final int[] tmRuleSymbol = TemplatesLexer.unpack_int(136,
		"\102\0\103\0\103\0\104\0\104\0\104\0\105\0\105\0\106\0\107\0\110\0\111\0\112\0\112" +
		"\0\113\0\114\0\114\0\115\0\115\0\116\0\116\0\116\0\116\0\116\0\116\0\116\0\117\0" +
		"\120\0\120\0\120\0\120\0\120\0\121\0\122\0\122\0\123\0\124\0\125\0\126\0\126\0\126" +
		"\0\127\0\127\0\130\0\130\0\130\0\131\0\132\0\133\0\133\0\133\0\133\0\134\0\135\0" +
		"\135\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\136" +
		"\0\136\0\136\0\136\0\137\0\140\0\140\0\140\0\141\0\141\0\142\0\142\0\142\0\143\0" +
		"\143\0\144\0\144\0\144\0\145\0\145\0\145\0\145\0\145\0\145\0\145\0\145\0\145\0\145" +
		"\0\146\0\146\0\146\0\147\0\147\0\147\0\150\0\150\0\150\0\151\0\151\0\152\0\152\0" +
		"\153\0\153\0\154\0\154\0\155\0\156\0\157\0\157\0\160\0\160\0\161\0\161\0\162\0\162" +
		"\0\163\0\163\0\164\0\164\0\165\0\165\0\166\0\166\0\167\0\167\0\170\0\170\0\171\0" +
		"\171\0");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcached",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lfile",
		"Lforeach",
		"Lgrep",
		"Lif",
		"Lin",
		"Limport",
		"Lis",
		"Lmap",
		"Lnew",
		"Lnull",
		"Lquery",
		"Lswitch",
		"Lseparator",
		"Ltemplate",
		"Ltrue",
		"Lself",
		"Lassert",
		"'{'",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'|'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'='",
		"'!='",
		"'->'",
		"'=>'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"_skip",
		"error",
		"input",
		"definitions",
		"definition",
		"template_def",
		"query_def",
		"cached_flag",
		"template_start",
		"parameters",
		"parameter_list",
		"template_end",
		"instructions",
		"'[-]}'",
		"instruction",
		"simple_instruction",
		"sentence",
		"comma_expr",
		"qualified_id",
		"template_for_expr",
		"template_arguments",
		"control_instruction",
		"else_clause",
		"switch_instruction",
		"case_list",
		"one_case",
		"control_start",
		"control_sentence",
		"separator_expr",
		"control_end",
		"primary_expression",
		"closure",
		"complex_data",
		"map_entries",
		"map_separator",
		"bcon",
		"unary_expression",
		"binary_op",
		"instanceof_expression",
		"equality_expression",
		"conditional_op",
		"conditional_expression",
		"assignment_expression",
		"expression",
		"expression_list",
		"body",
		"syntax_problem",
		"definitionsopt",
		"cached_flagopt",
		"parametersopt",
		"parameter_listopt",
		"template_argumentsopt",
		"template_for_expropt",
		"comma_expropt",
		"expression_listopt",
		"anyopt",
		"separator_expropt",
		"map_entriesopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		int input = 66;
		int definitions = 67;
		int definition = 68;
		int template_def = 69;
		int query_def = 70;
		int cached_flag = 71;
		int template_start = 72;
		int parameters = 73;
		int parameter_list = 74;
		int template_end = 75;
		int instructions = 76;
		int LbrackMinusRbrackRbrace = 77;
		int instruction = 78;
		int simple_instruction = 79;
		int sentence = 80;
		int comma_expr = 81;
		int qualified_id = 82;
		int template_for_expr = 83;
		int template_arguments = 84;
		int control_instruction = 85;
		int else_clause = 86;
		int switch_instruction = 87;
		int case_list = 88;
		int one_case = 89;
		int control_start = 90;
		int control_sentence = 91;
		int separator_expr = 92;
		int control_end = 93;
		int primary_expression = 94;
		int closure = 95;
		int complex_data = 96;
		int map_entries = 97;
		int map_separator = 98;
		int bcon = 99;
		int unary_expression = 100;
		int binary_op = 101;
		int instanceof_expression = 102;
		int equality_expression = 103;
		int conditional_op = 104;
		int conditional_expression = 105;
		int assignment_expression = 106;
		int expression = 107;
		int expression_list = 108;
		int body = 109;
		int syntax_problem = 110;
		int definitionsopt = 111;
		int cached_flagopt = 112;
		int parametersopt = 113;
		int parameter_listopt = 114;
		int template_argumentsopt = 115;
		int template_for_expropt = 116;
		int comma_expropt = 117;
		int expression_listopt = 118;
		int anyopt = 119;
		int separator_expropt = 120;
		int map_entriesopt = 121;
	}

	// set(follow error)
	private static int[] afterErr = {
		36, 37
	};

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int gotoState(int state, int symbol) {
		int min = tmGoto[symbol], max = tmGoto[symbol + 1];
		int i, e;

		while (min < max) {
			e = (min + max) >> 2 << 1;
			i = tmFromTo[e];
			if (i == state) {
				return tmFromTo[e+1];
			} else if (i < state) {
				min = e + 2;
			} else {
				max = e;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TemplatesLexer tmLexer;

	private Object parse(TemplatesLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && gotoState(tmStack[tmHead].state, 65) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 65;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, 65);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = gotoState(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 1:  // definitions : definition
				{ tmLeft.value = new ArrayList(); if (((IBundleEntity)tmStack[tmHead].value) != null) ((List<IBundleEntity>)tmLeft.value).add(((IBundleEntity)tmStack[tmHead].value)); }
				break;
			case 2:  // definitions : definitions definition
				{ if (((IBundleEntity)tmStack[tmHead].value) != null) ((List<IBundleEntity>)tmStack[tmHead - 1].value).add(((IBundleEntity)tmStack[tmHead].value)); }
				break;
			case 5:  // definition : any
				{ tmLeft.value = null; }
				break;
			case 6:  // template_def : template_start instructions template_end
				{ ((TemplateNode)tmStack[tmHead - 2].value).setInstructions(((ArrayList<Node>)tmStack[tmHead - 1].value)); }
				break;
			case 8:  // query_def : '${' cached_flagopt Lquery qualified_id parametersopt '=' expression '}'
				{ tmLeft.value = new QueryNode(((String)tmStack[tmHead - 4].value), ((List<ParameterNode>)tmStack[tmHead - 3].value), templatePackage, ((ExpressionNode)tmStack[tmHead - 1].value), ((Boolean)tmStack[tmHead - 6].value) != null, source, tmLeft.offset, tmLeft.endoffset); checkFqn(((String)tmStack[tmHead - 4].value), tmLeft.offset, tmLeft.endoffset, tmStack[tmHead - 7].line); }
				break;
			case 9:  // cached_flag : Lcached
				{ tmLeft.value = Boolean.TRUE; }
				break;
			case 10:  // template_start : '${' Ltemplate qualified_id parametersopt '[-]}'
				{ tmLeft.value = new TemplateNode(((String)tmStack[tmHead - 2].value), ((List<ParameterNode>)tmStack[tmHead - 1].value), templatePackage, source, tmLeft.offset, tmLeft.endoffset); checkFqn(((String)tmStack[tmHead - 2].value), tmLeft.offset, tmLeft.endoffset, tmStack[tmHead - 4].line); }
				break;
			case 11:  // parameters : '(' parameter_listopt ')'
				{ tmLeft.value = ((List<ParameterNode>)tmStack[tmHead - 1].value); }
				break;
			case 12:  // parameter_list : identifier
				{ tmLeft.value = new ArrayList(); ((List<ParameterNode>)tmLeft.value).add(new ParameterNode(((String)tmStack[tmHead].value), source, tmStack[tmHead].offset, tmLeft.endoffset)); }
				break;
			case 13:  // parameter_list : parameter_list ',' identifier
				{ ((List<ParameterNode>)tmStack[tmHead - 2].value).add(new ParameterNode(((String)tmStack[tmHead].value), source, tmStack[tmHead].offset, tmLeft.endoffset)); }
				break;
			case 15:  // instructions : instructions instruction
				{ if (((Node)tmStack[tmHead].value) != null) ((ArrayList<Node>)tmStack[tmHead - 1].value).add(((Node)tmStack[tmHead].value)); }
				break;
			case 16:  // instructions : instruction
				{ tmLeft.value = new ArrayList<Node>(); if (((Node)tmStack[tmHead].value)!=null) ((ArrayList<Node>)tmLeft.value).add(((Node)tmStack[tmHead].value)); }
				break;
			case 17:  // '[-]}' : '-}'
				{ skipSpaces(tmStack[tmHead].offset+1); }
				break;
			case 22:  // instruction : escid
				{ tmLeft.value = createEscapedId(((String)tmStack[tmHead].value), tmLeft.offset, tmLeft.endoffset); }
				break;
			case 23:  // instruction : escint
				{ tmLeft.value = new IndexNode(null, new LiteralNode(((Integer)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 24:  // instruction : escdollar
				{ tmLeft.value = new DollarNode(source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 25:  // instruction : any
				{ tmLeft.value = new TextNode(source, rawText(tmLeft.offset, tmLeft.endoffset), tmLeft.endoffset); }
				break;
			case 26:  // simple_instruction : '${' sentence '[-]}'
				{ tmLeft.value = ((Node)tmStack[tmHead - 1].value); }
				break;
			case 28:  // sentence : Lcall qualified_id template_argumentsopt template_for_expropt
				{ tmLeft.value = new CallTemplateNode(((String)tmStack[tmHead - 2].value), ((ArrayList)tmStack[tmHead - 1].value), ((ExpressionNode)tmStack[tmHead].value), templatePackage, true, source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 29:  // sentence : Leval conditional_expression comma_expropt
				{ tmLeft.value = new EvalNode(((ExpressionNode)tmStack[tmHead - 1].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 30:  // sentence : Lassert expression
				{ tmLeft.value = new AssertNode(((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 31:  // sentence : syntax_problem
				{ tmLeft.value = null; }
				break;
			case 32:  // comma_expr : ',' conditional_expression
				{ tmLeft.value = ((ExpressionNode)tmStack[tmHead].value); }
				break;
			case 34:  // qualified_id : qualified_id '.' identifier
				{ tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); }
				break;
			case 35:  // template_for_expr : Lfor expression
				{ tmLeft.value = ((ExpressionNode)tmStack[tmHead].value); }
				break;
			case 36:  // template_arguments : '(' expression_listopt ')'
				{ tmLeft.value = ((ArrayList)tmStack[tmHead - 1].value); }
				break;
			case 37:  // control_instruction : control_start instructions else_clause
				{ ((CompoundNode)tmStack[tmHead - 2].value).setInstructions(((ArrayList<Node>)tmStack[tmHead - 1].value)); applyElse(((CompoundNode)tmStack[tmHead - 2].value),((ElseIfNode)tmStack[tmHead].value), tmLeft.offset, tmLeft.endoffset, tmLeft.line); }
				break;
			case 38:  // else_clause : '${' Lelse Lif expression '[-]}' instructions else_clause
				{ tmLeft.value = new ElseIfNode(((ExpressionNode)tmStack[tmHead - 3].value), ((ArrayList<Node>)tmStack[tmHead - 1].value), ((ElseIfNode)tmStack[tmHead].value), source, tmStack[tmHead - 6].offset, tmStack[tmHead - 1].endoffset); }
				break;
			case 39:  // else_clause : '${' Lelse '[-]}' instructions control_end
				{ tmLeft.value = new ElseIfNode(null, ((ArrayList<Node>)tmStack[tmHead - 1].value), null, source, tmStack[tmHead - 4].offset, tmStack[tmHead - 1].endoffset); }
				break;
			case 40:  // else_clause : control_end
				{ tmLeft.value = null; }
				break;
			case 41:  // switch_instruction : '${' Lswitch expression '[-]}' anyopt case_list '${' Lelse '[-]}' instructions control_end
				{ tmLeft.value = new SwitchNode(((ExpressionNode)tmStack[tmHead - 8].value), ((ArrayList)tmStack[tmHead - 5].value), ((ArrayList<Node>)tmStack[tmHead - 1].value), source, tmLeft.offset,tmLeft.endoffset); checkIsSpace(tmStack[tmHead - 6].offset,tmStack[tmHead - 6].endoffset, tmStack[tmHead - 6].line); }
				break;
			case 42:  // switch_instruction : '${' Lswitch expression '[-]}' anyopt case_list control_end
				{ tmLeft.value = new SwitchNode(((ExpressionNode)tmStack[tmHead - 4].value), ((ArrayList)tmStack[tmHead - 1].value), ((ArrayList<Node>)null), source, tmLeft.offset,tmLeft.endoffset); checkIsSpace(tmStack[tmHead - 2].offset,tmStack[tmHead - 2].endoffset, tmStack[tmHead - 2].line); }
				break;
			case 43:  // case_list : one_case
				{ tmLeft.value = new ArrayList(); ((ArrayList)tmLeft.value).add(((CaseNode)tmStack[tmHead].value)); }
				break;
			case 44:  // case_list : case_list one_case
				{ ((ArrayList)tmStack[tmHead - 1].value).add(((CaseNode)tmStack[tmHead].value)); }
				break;
			case 45:  // case_list : case_list instruction
				{ CaseNode.add(((ArrayList)tmStack[tmHead - 1].value), ((Node)tmStack[tmHead].value)); }
				break;
			case 46:  // one_case : '${' Lcase expression '[-]}'
				{ tmLeft.value = new CaseNode(((ExpressionNode)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 47:  // control_start : '${' control_sentence '[-]}'
				{ tmLeft.value = ((CompoundNode)tmStack[tmHead - 1].value); }
				break;
			case 48:  // control_sentence : Lforeach identifier Lin expression separator_expropt
				{ tmLeft.value = new ForeachNode(((String)tmStack[tmHead - 3].value), ((ExpressionNode)tmStack[tmHead - 1].value), null, ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 49:  // control_sentence : Lfor identifier Lin '[' conditional_expression ',' conditional_expression ']' separator_expropt
				{ tmLeft.value = new ForeachNode(((String)tmStack[tmHead - 7].value), ((ExpressionNode)tmStack[tmHead - 4].value), ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 50:  // control_sentence : Lif expression
				{ tmLeft.value = new IfNode(((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 51:  // control_sentence : Lfile expression
				{ tmLeft.value = new FileNode(((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 52:  // separator_expr : Lseparator expression
				{ tmLeft.value = ((ExpressionNode)tmStack[tmHead].value); }
				break;
			case 55:  // primary_expression : identifier
				{ tmLeft.value = new SelectNode(null, ((String)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 56:  // primary_expression : '(' expression ')'
				{ tmLeft.value = new ParenthesesNode(((ExpressionNode)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 57:  // primary_expression : icon
				{ tmLeft.value = new LiteralNode(((Integer)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 58:  // primary_expression : bcon
				{ tmLeft.value = new LiteralNode(((Boolean)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 59:  // primary_expression : ccon
				{ tmLeft.value = new LiteralNode(((String)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 60:  // primary_expression : Lself
				{ tmLeft.value = new ThisNode(source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 61:  // primary_expression : Lnull
				{ tmLeft.value = new LiteralNode(null, source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 62:  // primary_expression : identifier '(' expression_listopt ')'
				{ tmLeft.value = new MethodCallNode(null, ((String)tmStack[tmHead - 3].value), ((ArrayList)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 63:  // primary_expression : primary_expression '.' identifier
				{ tmLeft.value = new SelectNode(((ExpressionNode)tmStack[tmHead - 2].value), ((String)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 64:  // primary_expression : primary_expression '.' identifier '(' expression_listopt ')'
				{ tmLeft.value = new MethodCallNode(((ExpressionNode)tmStack[tmHead - 5].value), ((String)tmStack[tmHead - 3].value), ((ArrayList)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 65:  // primary_expression : primary_expression '.' identifier '(' identifier '|' expression ')'
				{ tmLeft.value = createCollectionProcessor(((ExpressionNode)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 5].value), ((String)tmStack[tmHead - 3].value), ((ExpressionNode)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset, tmLeft.line); }
				break;
			case 66:  // primary_expression : primary_expression '->' qualified_id '(' expression_listopt ')'
				{ tmLeft.value = new CallTemplateNode(((String)tmStack[tmHead - 3].value), ((ArrayList)tmStack[tmHead - 1].value), ((ExpressionNode)tmStack[tmHead - 5].value), templatePackage, false, source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 67:  // primary_expression : primary_expression '->' '(' expression ')' '(' expression_listopt ')'
				{ tmLeft.value = new CallTemplateNode(((ExpressionNode)tmStack[tmHead - 4].value),((ArrayList)tmStack[tmHead - 1].value),((ExpressionNode)tmStack[tmHead - 7].value),templatePackage, source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 68:  // primary_expression : primary_expression '[' expression ']'
				{ tmLeft.value = new IndexNode(((ExpressionNode)tmStack[tmHead - 3].value), ((ExpressionNode)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 71:  // closure : '{' cached_flagopt parameter_listopt '=>' expression '}'
				{ tmLeft.value = new ClosureNode(((Boolean)tmStack[tmHead - 4].value) != null, ((List<ParameterNode>)tmStack[tmHead - 3].value), ((ExpressionNode)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 72:  // complex_data : '[' expression_listopt ']'
				{ tmLeft.value = new ListNode(((ArrayList)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 73:  // complex_data : '[' map_entries ']'
				{ tmLeft.value = new ConcreteMapNode(((Map<String,ExpressionNode>)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 74:  // complex_data : Lnew qualified_id '(' map_entriesopt ')'
				{ tmLeft.value = new CreateClassNode(((String)tmStack[tmHead - 3].value), ((Map<String,ExpressionNode>)tmStack[tmHead - 1].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 75:  // map_entries : identifier map_separator conditional_expression
				{ tmLeft.value = new LinkedHashMap(); ((Map<String,ExpressionNode>)tmLeft.value).put(((String)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value)); }
				break;
			case 76:  // map_entries : map_entries ',' identifier map_separator conditional_expression
				{ ((Map<String,ExpressionNode>)tmStack[tmHead - 4].value).put(((String)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value)); }
				break;
			case 80:  // bcon : Ltrue
				{ tmLeft.value = Boolean.TRUE; }
				break;
			case 81:  // bcon : Lfalse
				{ tmLeft.value = Boolean.FALSE; }
				break;
			case 83:  // unary_expression : '!' unary_expression
				{ tmLeft.value = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 84:  // unary_expression : '-' unary_expression
				{ tmLeft.value = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 86:  // binary_op : binary_op '*' binary_op
				{ tmLeft.value = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 87:  // binary_op : binary_op '/' binary_op
				{ tmLeft.value = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 88:  // binary_op : binary_op '%' binary_op
				{ tmLeft.value = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 89:  // binary_op : binary_op '+' binary_op
				{ tmLeft.value = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 90:  // binary_op : binary_op '-' binary_op
				{ tmLeft.value = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 91:  // binary_op : binary_op '<' binary_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 92:  // binary_op : binary_op '>' binary_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 93:  // binary_op : binary_op '<=' binary_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 94:  // binary_op : binary_op '>=' binary_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 96:  // instanceof_expression : instanceof_expression Lis qualified_id
				{ tmLeft.value = new InstanceOfNode(((ExpressionNode)tmStack[tmHead - 2].value), ((String)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 97:  // instanceof_expression : instanceof_expression Lis ccon
				{ tmLeft.value = new InstanceOfNode(((ExpressionNode)tmStack[tmHead - 2].value), ((String)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 99:  // equality_expression : equality_expression '==' instanceof_expression
				{ tmLeft.value = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 100:  // equality_expression : equality_expression '!=' instanceof_expression
				{ tmLeft.value = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 102:  // conditional_op : conditional_op '&&' conditional_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 103:  // conditional_op : conditional_op '||' conditional_op
				{ tmLeft.value = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 105:  // conditional_expression : conditional_op '?' conditional_expression ':' conditional_expression
				{ tmLeft.value = new TriplexNode(((ExpressionNode)tmStack[tmHead - 4].value), ((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 107:  // assignment_expression : identifier '=' conditional_expression
				{ tmLeft.value = new AssignNode(((String)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 109:  // expression : expression ',' assignment_expression
				{ tmLeft.value = new CommaNode(((ExpressionNode)tmStack[tmHead - 2].value), ((ExpressionNode)tmStack[tmHead].value), source, tmLeft.offset, tmLeft.endoffset); }
				break;
			case 110:  // expression_list : conditional_expression
				{ tmLeft.value = new ArrayList(); ((ArrayList)tmLeft.value).add(((ExpressionNode)tmStack[tmHead].value)); }
				break;
			case 111:  // expression_list : expression_list ',' conditional_expression
				{ ((ArrayList)tmStack[tmHead - 2].value).add(((ExpressionNode)tmStack[tmHead].value)); }
				break;
			case 112:  // body : instructions
				{
							tmLeft.value = new TemplateNode("inline", null, templatePackage, source, tmLeft.offset, tmLeft.endoffset);
							((TemplateNode)tmLeft.value).setInstructions(((ArrayList<Node>)tmStack[tmHead].value));
						}
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public List<IBundleEntity> parseInput(TemplatesLexer lexer) throws IOException, ParseException {
		return (List<IBundleEntity>) parse(lexer, 0, 261);
	}

	public TemplateNode parseBody(TemplatesLexer lexer) throws IOException, ParseException {
		return (TemplateNode) parse(lexer, 1, 262);
	}
}
