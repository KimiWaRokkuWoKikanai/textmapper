${template main-}
${if self->go_parser.eventBased()-}
${file 'listener.go'-}
${call go.header-}
${call listener-}
${end-}
${end-}
${end}


${template listener-}
package ${self->go.package()}

${if self->localNodeType()-}
${call nodeTypeImpl-}
${end-}
${call categories-}
${end}


${query typedescr(rangeType) =
  signature = opts.eventFields
    ? syntax.rangeFields(rangeType).collect(it | it.toString())->util.join(' ')
    : '',
  signature.isEmpty() ? '' : '  // ' + signature }


${template nodeTypeImpl-}
type ${self->nodeTypeRef()->go.declarationName()} int

type Listener func(t ${self->nodeTypeRef()}, offset, endoffset int)

const (
	NoType ${self->nodeTypeRef()} = iota
${foreach rangeType in syntax.rangeTypes-}
	${rangeType->nodeTypeValueRef()->go.declarationName()}${call typedescr(rangeType)}
${end-}
${foreach extraType in opts.extraTypes-}
	${extraType->stripArrows()->nodeTypeValueRef()->go.declarationName()}
${end-}
${foreach name in opts.reportTokens.collect(it|it->go_token.tokenNodeName())-}
	${name->nodeTypeValueRef()->go.declarationName()}
${end-}
	${self->nodeType()}Max
)

var nodeTypeStr = [...]string{
	"NONE",
${foreach rangeType in syntax.rangeTypes-}
	"${rangeType->nodeTypeValueString()}",
${end-}
${foreach extraType in opts.extraTypes-}
	"${extraType->stripArrows()->nodeTypeValueString()}",
${end-}
${foreach name in opts.reportTokens.collect(it|it->go_token.tokenNodeName())-}
	"${name->nodeTypeValueString()}",
${end-}
}

func (t ${self->nodeType()}) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return "fmt".Sprintf("node(%d)", t)
}

${end}

${template categories-}
${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet' || syntax.categoryTypes(it).length > 0)-}
var ${cat->interfaceEnumValueRef()->go.declarationName()} = []${self->nodeTypeRef()}{
${foreach type in syntax.categoryTypes(cat)-}
    ${type->nodeTypeValueRef()},
${end-}
}

${end-}
${end}

${cached query reserve(scope) =
	util.uniqueId(util.toCamelCase(self, true)->go.escapeGoReserved(), scope)}

${cached query asRangeTypeName() =
    self->reserve('__rangeTypes__')}

${query localNodeType() = self->go.package()->go.element(self->nodeType()) == self->nodeTypeRef()}

${query stripArrows() = ind = self.indexOf('->'), (ind >= 0 ? self.substring(0, ind) : self).trim()};
${query nodeType() = self->nodeTypeRef()->go.declarationName()}
${query nodeTypeRef() = self->go.package()->go.element('NodeType')}
${query nodeTypeValueRef() = self->go.package()->go.element(self->asRangeTypeName())}
${query nodeFlags() = self.collect(it|'|'+it)->util.join('')}
${query interfaceEnumValueRef() = self->go.package()->go.element(self->asRangeTypeName())}
${query nodeTypeValueString() = self->asRangeTypeName()}
${query listenerTypeRef() = self->go.package()->go.element('Listener')}
