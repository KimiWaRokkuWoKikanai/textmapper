${template main-}
${file self->tokenFilename()-}
${call go.header-}
${call token-}
${end-}
${end}

${template token-}
package ${self->package()}

// Token is an enum of all terminal symbols of the ${opts.lang} language.
type Token int

// Token values.
const (
	UNAVAILABLE Token = iota-1
	EOI
${for i in [1, syntax.terminals - 1]-}
	${syntax.symbols[i]->tokenName()}${if syntax.symbols[i].isConstant()} // ${util.escape(syntax.symbols[i].getConstantValue())}${end}
${end-}

	NumTokens
)

var tokenStr = [...]string{
	"EOI",
${for i in [1, syntax.terminals - 1]-}
	"${util.escape(syntax.symbols[i].isConstant() ? util.escape(syntax.symbols[i].getConstantValue()) : syntax.symbols[i].id)}",
${end-}
}

func (tok Token) String() string {
	if tok >= 0 && int(tok) < len(tokenStr) {
		return tokenStr[tok]
	}
	return "fmt".Sprintf("token(%d)", tok)
}
${end}

${query tokenFilename() = 'token.go'}
${query package() = self->go.package()}

${query tokenVar() = 'token'}
${query tokenTypeRef() = self->package()->go.element('Token')}
${query numTokensRef() = self->package()->go.element('NumTokens')}
${query eoiRef() = self->package()->go.element('EOI')}
${query unavailableRef() = self->package()->go.element('UNAVAILABLE')}
${query tokenRef() = self->package()->go.element(self->tokenName())}

${cached query tokenName() = self.id->go.escapeGoReserved()}

${cached query tokenNodeName() = self.name.CamelCase}

${cached query invalidTokenName() = syntax.symbols.select(s|s.nameText == 'invalid_token' && s.isTerm()).first()->tokenName()}

${cached query isSpace(tok) = tok.nameText == 'invalid_token' || self->spaceTokens().exists(it| it == tok)}

${cached query spaceTokens() = syntax.lexerRules.select(x|x.kindAsText == 'space').collectUnique(it | it.symbol)}